
Student_Demo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008cd8  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000a7c  08008d98  08008d98  00018d98  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009814  08009814  000221f8  2**0
                  CONTENTS
  4 .ARM          00000000  08009814  08009814  000221f8  2**0
                  CONTENTS
  5 .preinit_array 00000000  08009814  08009814  000221f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009814  08009814  00019814  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009818  08009818  00019818  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000021f8  20000000  0800981c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000012c  200021f8  0800ba14  000221f8  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20002324  0800ba14  00022324  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  000221f8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b187  00000000  00000000  00022220  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001cb2  00000000  00000000  0002d3a7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c20  00000000  00000000  0002f060  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  00002a87  00000000  00000000  0002fc80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   0000e574  00000000  00000000  00032707  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    000aa395  00000000  00000000  00040c7b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000050  00000000  00000000  000eb010  2**0
                  CONTENTS, READONLY
 19 .debug_ranges 00000b20  00000000  00000000  000eb060  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003cb8  00000000  00000000  000ebb80  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	200021f8 	.word	0x200021f8
 80000dc:	00000000 	.word	0x00000000
 80000e0:	08008d7c 	.word	0x08008d7c

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	200021fc 	.word	0x200021fc
 8000100:	08008d7c 	.word	0x08008d7c

08000104 <strlen>:
 8000104:	2300      	movs	r3, #0
 8000106:	5cc2      	ldrb	r2, [r0, r3]
 8000108:	3301      	adds	r3, #1
 800010a:	2a00      	cmp	r2, #0
 800010c:	d1fb      	bne.n	8000106 <strlen+0x2>
 800010e:	1e58      	subs	r0, r3, #1
 8000110:	4770      	bx	lr
	...

08000114 <__gnu_thumb1_case_uqi>:
 8000114:	b402      	push	{r1}
 8000116:	4671      	mov	r1, lr
 8000118:	0849      	lsrs	r1, r1, #1
 800011a:	0049      	lsls	r1, r1, #1
 800011c:	5c09      	ldrb	r1, [r1, r0]
 800011e:	0049      	lsls	r1, r1, #1
 8000120:	448e      	add	lr, r1
 8000122:	bc02      	pop	{r1}
 8000124:	4770      	bx	lr
 8000126:	46c0      	nop			; (mov r8, r8)

08000128 <__gnu_thumb1_case_shi>:
 8000128:	b403      	push	{r0, r1}
 800012a:	4671      	mov	r1, lr
 800012c:	0849      	lsrs	r1, r1, #1
 800012e:	0040      	lsls	r0, r0, #1
 8000130:	0049      	lsls	r1, r1, #1
 8000132:	5e09      	ldrsh	r1, [r1, r0]
 8000134:	0049      	lsls	r1, r1, #1
 8000136:	448e      	add	lr, r1
 8000138:	bc03      	pop	{r0, r1}
 800013a:	4770      	bx	lr

0800013c <__udivsi3>:
 800013c:	2200      	movs	r2, #0
 800013e:	0843      	lsrs	r3, r0, #1
 8000140:	428b      	cmp	r3, r1
 8000142:	d374      	bcc.n	800022e <__udivsi3+0xf2>
 8000144:	0903      	lsrs	r3, r0, #4
 8000146:	428b      	cmp	r3, r1
 8000148:	d35f      	bcc.n	800020a <__udivsi3+0xce>
 800014a:	0a03      	lsrs	r3, r0, #8
 800014c:	428b      	cmp	r3, r1
 800014e:	d344      	bcc.n	80001da <__udivsi3+0x9e>
 8000150:	0b03      	lsrs	r3, r0, #12
 8000152:	428b      	cmp	r3, r1
 8000154:	d328      	bcc.n	80001a8 <__udivsi3+0x6c>
 8000156:	0c03      	lsrs	r3, r0, #16
 8000158:	428b      	cmp	r3, r1
 800015a:	d30d      	bcc.n	8000178 <__udivsi3+0x3c>
 800015c:	22ff      	movs	r2, #255	; 0xff
 800015e:	0209      	lsls	r1, r1, #8
 8000160:	ba12      	rev	r2, r2
 8000162:	0c03      	lsrs	r3, r0, #16
 8000164:	428b      	cmp	r3, r1
 8000166:	d302      	bcc.n	800016e <__udivsi3+0x32>
 8000168:	1212      	asrs	r2, r2, #8
 800016a:	0209      	lsls	r1, r1, #8
 800016c:	d065      	beq.n	800023a <__udivsi3+0xfe>
 800016e:	0b03      	lsrs	r3, r0, #12
 8000170:	428b      	cmp	r3, r1
 8000172:	d319      	bcc.n	80001a8 <__udivsi3+0x6c>
 8000174:	e000      	b.n	8000178 <__udivsi3+0x3c>
 8000176:	0a09      	lsrs	r1, r1, #8
 8000178:	0bc3      	lsrs	r3, r0, #15
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x46>
 800017e:	03cb      	lsls	r3, r1, #15
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0b83      	lsrs	r3, r0, #14
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x52>
 800018a:	038b      	lsls	r3, r1, #14
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0b43      	lsrs	r3, r0, #13
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x5e>
 8000196:	034b      	lsls	r3, r1, #13
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	0b03      	lsrs	r3, r0, #12
 800019e:	428b      	cmp	r3, r1
 80001a0:	d301      	bcc.n	80001a6 <__udivsi3+0x6a>
 80001a2:	030b      	lsls	r3, r1, #12
 80001a4:	1ac0      	subs	r0, r0, r3
 80001a6:	4152      	adcs	r2, r2
 80001a8:	0ac3      	lsrs	r3, r0, #11
 80001aa:	428b      	cmp	r3, r1
 80001ac:	d301      	bcc.n	80001b2 <__udivsi3+0x76>
 80001ae:	02cb      	lsls	r3, r1, #11
 80001b0:	1ac0      	subs	r0, r0, r3
 80001b2:	4152      	adcs	r2, r2
 80001b4:	0a83      	lsrs	r3, r0, #10
 80001b6:	428b      	cmp	r3, r1
 80001b8:	d301      	bcc.n	80001be <__udivsi3+0x82>
 80001ba:	028b      	lsls	r3, r1, #10
 80001bc:	1ac0      	subs	r0, r0, r3
 80001be:	4152      	adcs	r2, r2
 80001c0:	0a43      	lsrs	r3, r0, #9
 80001c2:	428b      	cmp	r3, r1
 80001c4:	d301      	bcc.n	80001ca <__udivsi3+0x8e>
 80001c6:	024b      	lsls	r3, r1, #9
 80001c8:	1ac0      	subs	r0, r0, r3
 80001ca:	4152      	adcs	r2, r2
 80001cc:	0a03      	lsrs	r3, r0, #8
 80001ce:	428b      	cmp	r3, r1
 80001d0:	d301      	bcc.n	80001d6 <__udivsi3+0x9a>
 80001d2:	020b      	lsls	r3, r1, #8
 80001d4:	1ac0      	subs	r0, r0, r3
 80001d6:	4152      	adcs	r2, r2
 80001d8:	d2cd      	bcs.n	8000176 <__udivsi3+0x3a>
 80001da:	09c3      	lsrs	r3, r0, #7
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xa8>
 80001e0:	01cb      	lsls	r3, r1, #7
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	0983      	lsrs	r3, r0, #6
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xb4>
 80001ec:	018b      	lsls	r3, r1, #6
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	0943      	lsrs	r3, r0, #5
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d301      	bcc.n	80001fc <__udivsi3+0xc0>
 80001f8:	014b      	lsls	r3, r1, #5
 80001fa:	1ac0      	subs	r0, r0, r3
 80001fc:	4152      	adcs	r2, r2
 80001fe:	0903      	lsrs	r3, r0, #4
 8000200:	428b      	cmp	r3, r1
 8000202:	d301      	bcc.n	8000208 <__udivsi3+0xcc>
 8000204:	010b      	lsls	r3, r1, #4
 8000206:	1ac0      	subs	r0, r0, r3
 8000208:	4152      	adcs	r2, r2
 800020a:	08c3      	lsrs	r3, r0, #3
 800020c:	428b      	cmp	r3, r1
 800020e:	d301      	bcc.n	8000214 <__udivsi3+0xd8>
 8000210:	00cb      	lsls	r3, r1, #3
 8000212:	1ac0      	subs	r0, r0, r3
 8000214:	4152      	adcs	r2, r2
 8000216:	0883      	lsrs	r3, r0, #2
 8000218:	428b      	cmp	r3, r1
 800021a:	d301      	bcc.n	8000220 <__udivsi3+0xe4>
 800021c:	008b      	lsls	r3, r1, #2
 800021e:	1ac0      	subs	r0, r0, r3
 8000220:	4152      	adcs	r2, r2
 8000222:	0843      	lsrs	r3, r0, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d301      	bcc.n	800022c <__udivsi3+0xf0>
 8000228:	004b      	lsls	r3, r1, #1
 800022a:	1ac0      	subs	r0, r0, r3
 800022c:	4152      	adcs	r2, r2
 800022e:	1a41      	subs	r1, r0, r1
 8000230:	d200      	bcs.n	8000234 <__udivsi3+0xf8>
 8000232:	4601      	mov	r1, r0
 8000234:	4152      	adcs	r2, r2
 8000236:	4610      	mov	r0, r2
 8000238:	4770      	bx	lr
 800023a:	e7ff      	b.n	800023c <__udivsi3+0x100>
 800023c:	b501      	push	{r0, lr}
 800023e:	2000      	movs	r0, #0
 8000240:	f000 f8f0 	bl	8000424 <__aeabi_idiv0>
 8000244:	bd02      	pop	{r1, pc}
 8000246:	46c0      	nop			; (mov r8, r8)

08000248 <__aeabi_uidivmod>:
 8000248:	2900      	cmp	r1, #0
 800024a:	d0f7      	beq.n	800023c <__udivsi3+0x100>
 800024c:	e776      	b.n	800013c <__udivsi3>
 800024e:	4770      	bx	lr

08000250 <__divsi3>:
 8000250:	4603      	mov	r3, r0
 8000252:	430b      	orrs	r3, r1
 8000254:	d47f      	bmi.n	8000356 <__divsi3+0x106>
 8000256:	2200      	movs	r2, #0
 8000258:	0843      	lsrs	r3, r0, #1
 800025a:	428b      	cmp	r3, r1
 800025c:	d374      	bcc.n	8000348 <__divsi3+0xf8>
 800025e:	0903      	lsrs	r3, r0, #4
 8000260:	428b      	cmp	r3, r1
 8000262:	d35f      	bcc.n	8000324 <__divsi3+0xd4>
 8000264:	0a03      	lsrs	r3, r0, #8
 8000266:	428b      	cmp	r3, r1
 8000268:	d344      	bcc.n	80002f4 <__divsi3+0xa4>
 800026a:	0b03      	lsrs	r3, r0, #12
 800026c:	428b      	cmp	r3, r1
 800026e:	d328      	bcc.n	80002c2 <__divsi3+0x72>
 8000270:	0c03      	lsrs	r3, r0, #16
 8000272:	428b      	cmp	r3, r1
 8000274:	d30d      	bcc.n	8000292 <__divsi3+0x42>
 8000276:	22ff      	movs	r2, #255	; 0xff
 8000278:	0209      	lsls	r1, r1, #8
 800027a:	ba12      	rev	r2, r2
 800027c:	0c03      	lsrs	r3, r0, #16
 800027e:	428b      	cmp	r3, r1
 8000280:	d302      	bcc.n	8000288 <__divsi3+0x38>
 8000282:	1212      	asrs	r2, r2, #8
 8000284:	0209      	lsls	r1, r1, #8
 8000286:	d065      	beq.n	8000354 <__divsi3+0x104>
 8000288:	0b03      	lsrs	r3, r0, #12
 800028a:	428b      	cmp	r3, r1
 800028c:	d319      	bcc.n	80002c2 <__divsi3+0x72>
 800028e:	e000      	b.n	8000292 <__divsi3+0x42>
 8000290:	0a09      	lsrs	r1, r1, #8
 8000292:	0bc3      	lsrs	r3, r0, #15
 8000294:	428b      	cmp	r3, r1
 8000296:	d301      	bcc.n	800029c <__divsi3+0x4c>
 8000298:	03cb      	lsls	r3, r1, #15
 800029a:	1ac0      	subs	r0, r0, r3
 800029c:	4152      	adcs	r2, r2
 800029e:	0b83      	lsrs	r3, r0, #14
 80002a0:	428b      	cmp	r3, r1
 80002a2:	d301      	bcc.n	80002a8 <__divsi3+0x58>
 80002a4:	038b      	lsls	r3, r1, #14
 80002a6:	1ac0      	subs	r0, r0, r3
 80002a8:	4152      	adcs	r2, r2
 80002aa:	0b43      	lsrs	r3, r0, #13
 80002ac:	428b      	cmp	r3, r1
 80002ae:	d301      	bcc.n	80002b4 <__divsi3+0x64>
 80002b0:	034b      	lsls	r3, r1, #13
 80002b2:	1ac0      	subs	r0, r0, r3
 80002b4:	4152      	adcs	r2, r2
 80002b6:	0b03      	lsrs	r3, r0, #12
 80002b8:	428b      	cmp	r3, r1
 80002ba:	d301      	bcc.n	80002c0 <__divsi3+0x70>
 80002bc:	030b      	lsls	r3, r1, #12
 80002be:	1ac0      	subs	r0, r0, r3
 80002c0:	4152      	adcs	r2, r2
 80002c2:	0ac3      	lsrs	r3, r0, #11
 80002c4:	428b      	cmp	r3, r1
 80002c6:	d301      	bcc.n	80002cc <__divsi3+0x7c>
 80002c8:	02cb      	lsls	r3, r1, #11
 80002ca:	1ac0      	subs	r0, r0, r3
 80002cc:	4152      	adcs	r2, r2
 80002ce:	0a83      	lsrs	r3, r0, #10
 80002d0:	428b      	cmp	r3, r1
 80002d2:	d301      	bcc.n	80002d8 <__divsi3+0x88>
 80002d4:	028b      	lsls	r3, r1, #10
 80002d6:	1ac0      	subs	r0, r0, r3
 80002d8:	4152      	adcs	r2, r2
 80002da:	0a43      	lsrs	r3, r0, #9
 80002dc:	428b      	cmp	r3, r1
 80002de:	d301      	bcc.n	80002e4 <__divsi3+0x94>
 80002e0:	024b      	lsls	r3, r1, #9
 80002e2:	1ac0      	subs	r0, r0, r3
 80002e4:	4152      	adcs	r2, r2
 80002e6:	0a03      	lsrs	r3, r0, #8
 80002e8:	428b      	cmp	r3, r1
 80002ea:	d301      	bcc.n	80002f0 <__divsi3+0xa0>
 80002ec:	020b      	lsls	r3, r1, #8
 80002ee:	1ac0      	subs	r0, r0, r3
 80002f0:	4152      	adcs	r2, r2
 80002f2:	d2cd      	bcs.n	8000290 <__divsi3+0x40>
 80002f4:	09c3      	lsrs	r3, r0, #7
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d301      	bcc.n	80002fe <__divsi3+0xae>
 80002fa:	01cb      	lsls	r3, r1, #7
 80002fc:	1ac0      	subs	r0, r0, r3
 80002fe:	4152      	adcs	r2, r2
 8000300:	0983      	lsrs	r3, r0, #6
 8000302:	428b      	cmp	r3, r1
 8000304:	d301      	bcc.n	800030a <__divsi3+0xba>
 8000306:	018b      	lsls	r3, r1, #6
 8000308:	1ac0      	subs	r0, r0, r3
 800030a:	4152      	adcs	r2, r2
 800030c:	0943      	lsrs	r3, r0, #5
 800030e:	428b      	cmp	r3, r1
 8000310:	d301      	bcc.n	8000316 <__divsi3+0xc6>
 8000312:	014b      	lsls	r3, r1, #5
 8000314:	1ac0      	subs	r0, r0, r3
 8000316:	4152      	adcs	r2, r2
 8000318:	0903      	lsrs	r3, r0, #4
 800031a:	428b      	cmp	r3, r1
 800031c:	d301      	bcc.n	8000322 <__divsi3+0xd2>
 800031e:	010b      	lsls	r3, r1, #4
 8000320:	1ac0      	subs	r0, r0, r3
 8000322:	4152      	adcs	r2, r2
 8000324:	08c3      	lsrs	r3, r0, #3
 8000326:	428b      	cmp	r3, r1
 8000328:	d301      	bcc.n	800032e <__divsi3+0xde>
 800032a:	00cb      	lsls	r3, r1, #3
 800032c:	1ac0      	subs	r0, r0, r3
 800032e:	4152      	adcs	r2, r2
 8000330:	0883      	lsrs	r3, r0, #2
 8000332:	428b      	cmp	r3, r1
 8000334:	d301      	bcc.n	800033a <__divsi3+0xea>
 8000336:	008b      	lsls	r3, r1, #2
 8000338:	1ac0      	subs	r0, r0, r3
 800033a:	4152      	adcs	r2, r2
 800033c:	0843      	lsrs	r3, r0, #1
 800033e:	428b      	cmp	r3, r1
 8000340:	d301      	bcc.n	8000346 <__divsi3+0xf6>
 8000342:	004b      	lsls	r3, r1, #1
 8000344:	1ac0      	subs	r0, r0, r3
 8000346:	4152      	adcs	r2, r2
 8000348:	1a41      	subs	r1, r0, r1
 800034a:	d200      	bcs.n	800034e <__divsi3+0xfe>
 800034c:	4601      	mov	r1, r0
 800034e:	4152      	adcs	r2, r2
 8000350:	4610      	mov	r0, r2
 8000352:	4770      	bx	lr
 8000354:	e05d      	b.n	8000412 <__divsi3+0x1c2>
 8000356:	0fca      	lsrs	r2, r1, #31
 8000358:	d000      	beq.n	800035c <__divsi3+0x10c>
 800035a:	4249      	negs	r1, r1
 800035c:	1003      	asrs	r3, r0, #32
 800035e:	d300      	bcc.n	8000362 <__divsi3+0x112>
 8000360:	4240      	negs	r0, r0
 8000362:	4053      	eors	r3, r2
 8000364:	2200      	movs	r2, #0
 8000366:	469c      	mov	ip, r3
 8000368:	0903      	lsrs	r3, r0, #4
 800036a:	428b      	cmp	r3, r1
 800036c:	d32d      	bcc.n	80003ca <__divsi3+0x17a>
 800036e:	0a03      	lsrs	r3, r0, #8
 8000370:	428b      	cmp	r3, r1
 8000372:	d312      	bcc.n	800039a <__divsi3+0x14a>
 8000374:	22fc      	movs	r2, #252	; 0xfc
 8000376:	0189      	lsls	r1, r1, #6
 8000378:	ba12      	rev	r2, r2
 800037a:	0a03      	lsrs	r3, r0, #8
 800037c:	428b      	cmp	r3, r1
 800037e:	d30c      	bcc.n	800039a <__divsi3+0x14a>
 8000380:	0189      	lsls	r1, r1, #6
 8000382:	1192      	asrs	r2, r2, #6
 8000384:	428b      	cmp	r3, r1
 8000386:	d308      	bcc.n	800039a <__divsi3+0x14a>
 8000388:	0189      	lsls	r1, r1, #6
 800038a:	1192      	asrs	r2, r2, #6
 800038c:	428b      	cmp	r3, r1
 800038e:	d304      	bcc.n	800039a <__divsi3+0x14a>
 8000390:	0189      	lsls	r1, r1, #6
 8000392:	d03a      	beq.n	800040a <__divsi3+0x1ba>
 8000394:	1192      	asrs	r2, r2, #6
 8000396:	e000      	b.n	800039a <__divsi3+0x14a>
 8000398:	0989      	lsrs	r1, r1, #6
 800039a:	09c3      	lsrs	r3, r0, #7
 800039c:	428b      	cmp	r3, r1
 800039e:	d301      	bcc.n	80003a4 <__divsi3+0x154>
 80003a0:	01cb      	lsls	r3, r1, #7
 80003a2:	1ac0      	subs	r0, r0, r3
 80003a4:	4152      	adcs	r2, r2
 80003a6:	0983      	lsrs	r3, r0, #6
 80003a8:	428b      	cmp	r3, r1
 80003aa:	d301      	bcc.n	80003b0 <__divsi3+0x160>
 80003ac:	018b      	lsls	r3, r1, #6
 80003ae:	1ac0      	subs	r0, r0, r3
 80003b0:	4152      	adcs	r2, r2
 80003b2:	0943      	lsrs	r3, r0, #5
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d301      	bcc.n	80003bc <__divsi3+0x16c>
 80003b8:	014b      	lsls	r3, r1, #5
 80003ba:	1ac0      	subs	r0, r0, r3
 80003bc:	4152      	adcs	r2, r2
 80003be:	0903      	lsrs	r3, r0, #4
 80003c0:	428b      	cmp	r3, r1
 80003c2:	d301      	bcc.n	80003c8 <__divsi3+0x178>
 80003c4:	010b      	lsls	r3, r1, #4
 80003c6:	1ac0      	subs	r0, r0, r3
 80003c8:	4152      	adcs	r2, r2
 80003ca:	08c3      	lsrs	r3, r0, #3
 80003cc:	428b      	cmp	r3, r1
 80003ce:	d301      	bcc.n	80003d4 <__divsi3+0x184>
 80003d0:	00cb      	lsls	r3, r1, #3
 80003d2:	1ac0      	subs	r0, r0, r3
 80003d4:	4152      	adcs	r2, r2
 80003d6:	0883      	lsrs	r3, r0, #2
 80003d8:	428b      	cmp	r3, r1
 80003da:	d301      	bcc.n	80003e0 <__divsi3+0x190>
 80003dc:	008b      	lsls	r3, r1, #2
 80003de:	1ac0      	subs	r0, r0, r3
 80003e0:	4152      	adcs	r2, r2
 80003e2:	d2d9      	bcs.n	8000398 <__divsi3+0x148>
 80003e4:	0843      	lsrs	r3, r0, #1
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d301      	bcc.n	80003ee <__divsi3+0x19e>
 80003ea:	004b      	lsls	r3, r1, #1
 80003ec:	1ac0      	subs	r0, r0, r3
 80003ee:	4152      	adcs	r2, r2
 80003f0:	1a41      	subs	r1, r0, r1
 80003f2:	d200      	bcs.n	80003f6 <__divsi3+0x1a6>
 80003f4:	4601      	mov	r1, r0
 80003f6:	4663      	mov	r3, ip
 80003f8:	4152      	adcs	r2, r2
 80003fa:	105b      	asrs	r3, r3, #1
 80003fc:	4610      	mov	r0, r2
 80003fe:	d301      	bcc.n	8000404 <__divsi3+0x1b4>
 8000400:	4240      	negs	r0, r0
 8000402:	2b00      	cmp	r3, #0
 8000404:	d500      	bpl.n	8000408 <__divsi3+0x1b8>
 8000406:	4249      	negs	r1, r1
 8000408:	4770      	bx	lr
 800040a:	4663      	mov	r3, ip
 800040c:	105b      	asrs	r3, r3, #1
 800040e:	d300      	bcc.n	8000412 <__divsi3+0x1c2>
 8000410:	4240      	negs	r0, r0
 8000412:	b501      	push	{r0, lr}
 8000414:	2000      	movs	r0, #0
 8000416:	f000 f805 	bl	8000424 <__aeabi_idiv0>
 800041a:	bd02      	pop	{r1, pc}

0800041c <__aeabi_idivmod>:
 800041c:	2900      	cmp	r1, #0
 800041e:	d0f8      	beq.n	8000412 <__divsi3+0x1c2>
 8000420:	e716      	b.n	8000250 <__divsi3>
 8000422:	4770      	bx	lr

08000424 <__aeabi_idiv0>:
 8000424:	4770      	bx	lr
 8000426:	46c0      	nop			; (mov r8, r8)

08000428 <__aeabi_cdrcmple>:
 8000428:	4684      	mov	ip, r0
 800042a:	0010      	movs	r0, r2
 800042c:	4662      	mov	r2, ip
 800042e:	468c      	mov	ip, r1
 8000430:	0019      	movs	r1, r3
 8000432:	4663      	mov	r3, ip
 8000434:	e000      	b.n	8000438 <__aeabi_cdcmpeq>
 8000436:	46c0      	nop			; (mov r8, r8)

08000438 <__aeabi_cdcmpeq>:
 8000438:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800043a:	f000 ff0d 	bl	8001258 <__ledf2>
 800043e:	2800      	cmp	r0, #0
 8000440:	d401      	bmi.n	8000446 <__aeabi_cdcmpeq+0xe>
 8000442:	2100      	movs	r1, #0
 8000444:	42c8      	cmn	r0, r1
 8000446:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000448 <__aeabi_dcmpeq>:
 8000448:	b510      	push	{r4, lr}
 800044a:	f000 fe5d 	bl	8001108 <__eqdf2>
 800044e:	4240      	negs	r0, r0
 8000450:	3001      	adds	r0, #1
 8000452:	bd10      	pop	{r4, pc}

08000454 <__aeabi_dcmplt>:
 8000454:	b510      	push	{r4, lr}
 8000456:	f000 feff 	bl	8001258 <__ledf2>
 800045a:	2800      	cmp	r0, #0
 800045c:	db01      	blt.n	8000462 <__aeabi_dcmplt+0xe>
 800045e:	2000      	movs	r0, #0
 8000460:	bd10      	pop	{r4, pc}
 8000462:	2001      	movs	r0, #1
 8000464:	bd10      	pop	{r4, pc}
 8000466:	46c0      	nop			; (mov r8, r8)

08000468 <__aeabi_dcmple>:
 8000468:	b510      	push	{r4, lr}
 800046a:	f000 fef5 	bl	8001258 <__ledf2>
 800046e:	2800      	cmp	r0, #0
 8000470:	dd01      	ble.n	8000476 <__aeabi_dcmple+0xe>
 8000472:	2000      	movs	r0, #0
 8000474:	bd10      	pop	{r4, pc}
 8000476:	2001      	movs	r0, #1
 8000478:	bd10      	pop	{r4, pc}
 800047a:	46c0      	nop			; (mov r8, r8)

0800047c <__aeabi_dcmpgt>:
 800047c:	b510      	push	{r4, lr}
 800047e:	f000 fe85 	bl	800118c <__gedf2>
 8000482:	2800      	cmp	r0, #0
 8000484:	dc01      	bgt.n	800048a <__aeabi_dcmpgt+0xe>
 8000486:	2000      	movs	r0, #0
 8000488:	bd10      	pop	{r4, pc}
 800048a:	2001      	movs	r0, #1
 800048c:	bd10      	pop	{r4, pc}
 800048e:	46c0      	nop			; (mov r8, r8)

08000490 <__aeabi_dcmpge>:
 8000490:	b510      	push	{r4, lr}
 8000492:	f000 fe7b 	bl	800118c <__gedf2>
 8000496:	2800      	cmp	r0, #0
 8000498:	da01      	bge.n	800049e <__aeabi_dcmpge+0xe>
 800049a:	2000      	movs	r0, #0
 800049c:	bd10      	pop	{r4, pc}
 800049e:	2001      	movs	r0, #1
 80004a0:	bd10      	pop	{r4, pc}
 80004a2:	46c0      	nop			; (mov r8, r8)

080004a4 <__aeabi_dadd>:
 80004a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80004a6:	464f      	mov	r7, r9
 80004a8:	4646      	mov	r6, r8
 80004aa:	46d6      	mov	lr, sl
 80004ac:	000d      	movs	r5, r1
 80004ae:	0004      	movs	r4, r0
 80004b0:	b5c0      	push	{r6, r7, lr}
 80004b2:	001f      	movs	r7, r3
 80004b4:	0011      	movs	r1, r2
 80004b6:	0328      	lsls	r0, r5, #12
 80004b8:	0f62      	lsrs	r2, r4, #29
 80004ba:	0a40      	lsrs	r0, r0, #9
 80004bc:	4310      	orrs	r0, r2
 80004be:	007a      	lsls	r2, r7, #1
 80004c0:	0d52      	lsrs	r2, r2, #21
 80004c2:	00e3      	lsls	r3, r4, #3
 80004c4:	033c      	lsls	r4, r7, #12
 80004c6:	4691      	mov	r9, r2
 80004c8:	0a64      	lsrs	r4, r4, #9
 80004ca:	0ffa      	lsrs	r2, r7, #31
 80004cc:	0f4f      	lsrs	r7, r1, #29
 80004ce:	006e      	lsls	r6, r5, #1
 80004d0:	4327      	orrs	r7, r4
 80004d2:	4692      	mov	sl, r2
 80004d4:	46b8      	mov	r8, r7
 80004d6:	0d76      	lsrs	r6, r6, #21
 80004d8:	0fed      	lsrs	r5, r5, #31
 80004da:	00c9      	lsls	r1, r1, #3
 80004dc:	4295      	cmp	r5, r2
 80004de:	d100      	bne.n	80004e2 <__aeabi_dadd+0x3e>
 80004e0:	e099      	b.n	8000616 <__aeabi_dadd+0x172>
 80004e2:	464c      	mov	r4, r9
 80004e4:	1b34      	subs	r4, r6, r4
 80004e6:	46a4      	mov	ip, r4
 80004e8:	2c00      	cmp	r4, #0
 80004ea:	dc00      	bgt.n	80004ee <__aeabi_dadd+0x4a>
 80004ec:	e07c      	b.n	80005e8 <__aeabi_dadd+0x144>
 80004ee:	464a      	mov	r2, r9
 80004f0:	2a00      	cmp	r2, #0
 80004f2:	d100      	bne.n	80004f6 <__aeabi_dadd+0x52>
 80004f4:	e0b8      	b.n	8000668 <__aeabi_dadd+0x1c4>
 80004f6:	4ac5      	ldr	r2, [pc, #788]	; (800080c <__aeabi_dadd+0x368>)
 80004f8:	4296      	cmp	r6, r2
 80004fa:	d100      	bne.n	80004fe <__aeabi_dadd+0x5a>
 80004fc:	e11c      	b.n	8000738 <__aeabi_dadd+0x294>
 80004fe:	2280      	movs	r2, #128	; 0x80
 8000500:	003c      	movs	r4, r7
 8000502:	0412      	lsls	r2, r2, #16
 8000504:	4314      	orrs	r4, r2
 8000506:	46a0      	mov	r8, r4
 8000508:	4662      	mov	r2, ip
 800050a:	2a38      	cmp	r2, #56	; 0x38
 800050c:	dd00      	ble.n	8000510 <__aeabi_dadd+0x6c>
 800050e:	e161      	b.n	80007d4 <__aeabi_dadd+0x330>
 8000510:	2a1f      	cmp	r2, #31
 8000512:	dd00      	ble.n	8000516 <__aeabi_dadd+0x72>
 8000514:	e1cc      	b.n	80008b0 <__aeabi_dadd+0x40c>
 8000516:	4664      	mov	r4, ip
 8000518:	2220      	movs	r2, #32
 800051a:	1b12      	subs	r2, r2, r4
 800051c:	4644      	mov	r4, r8
 800051e:	4094      	lsls	r4, r2
 8000520:	000f      	movs	r7, r1
 8000522:	46a1      	mov	r9, r4
 8000524:	4664      	mov	r4, ip
 8000526:	4091      	lsls	r1, r2
 8000528:	40e7      	lsrs	r7, r4
 800052a:	464c      	mov	r4, r9
 800052c:	1e4a      	subs	r2, r1, #1
 800052e:	4191      	sbcs	r1, r2
 8000530:	433c      	orrs	r4, r7
 8000532:	4642      	mov	r2, r8
 8000534:	4321      	orrs	r1, r4
 8000536:	4664      	mov	r4, ip
 8000538:	40e2      	lsrs	r2, r4
 800053a:	1a80      	subs	r0, r0, r2
 800053c:	1a5c      	subs	r4, r3, r1
 800053e:	42a3      	cmp	r3, r4
 8000540:	419b      	sbcs	r3, r3
 8000542:	425f      	negs	r7, r3
 8000544:	1bc7      	subs	r7, r0, r7
 8000546:	023b      	lsls	r3, r7, #8
 8000548:	d400      	bmi.n	800054c <__aeabi_dadd+0xa8>
 800054a:	e0d0      	b.n	80006ee <__aeabi_dadd+0x24a>
 800054c:	027f      	lsls	r7, r7, #9
 800054e:	0a7f      	lsrs	r7, r7, #9
 8000550:	2f00      	cmp	r7, #0
 8000552:	d100      	bne.n	8000556 <__aeabi_dadd+0xb2>
 8000554:	e0ff      	b.n	8000756 <__aeabi_dadd+0x2b2>
 8000556:	0038      	movs	r0, r7
 8000558:	f001 fd8a 	bl	8002070 <__clzsi2>
 800055c:	0001      	movs	r1, r0
 800055e:	3908      	subs	r1, #8
 8000560:	2320      	movs	r3, #32
 8000562:	0022      	movs	r2, r4
 8000564:	1a5b      	subs	r3, r3, r1
 8000566:	408f      	lsls	r7, r1
 8000568:	40da      	lsrs	r2, r3
 800056a:	408c      	lsls	r4, r1
 800056c:	4317      	orrs	r7, r2
 800056e:	42b1      	cmp	r1, r6
 8000570:	da00      	bge.n	8000574 <__aeabi_dadd+0xd0>
 8000572:	e0ff      	b.n	8000774 <__aeabi_dadd+0x2d0>
 8000574:	1b89      	subs	r1, r1, r6
 8000576:	1c4b      	adds	r3, r1, #1
 8000578:	2b1f      	cmp	r3, #31
 800057a:	dd00      	ble.n	800057e <__aeabi_dadd+0xda>
 800057c:	e0a8      	b.n	80006d0 <__aeabi_dadd+0x22c>
 800057e:	2220      	movs	r2, #32
 8000580:	0039      	movs	r1, r7
 8000582:	1ad2      	subs	r2, r2, r3
 8000584:	0020      	movs	r0, r4
 8000586:	4094      	lsls	r4, r2
 8000588:	4091      	lsls	r1, r2
 800058a:	40d8      	lsrs	r0, r3
 800058c:	1e62      	subs	r2, r4, #1
 800058e:	4194      	sbcs	r4, r2
 8000590:	40df      	lsrs	r7, r3
 8000592:	2600      	movs	r6, #0
 8000594:	4301      	orrs	r1, r0
 8000596:	430c      	orrs	r4, r1
 8000598:	0763      	lsls	r3, r4, #29
 800059a:	d009      	beq.n	80005b0 <__aeabi_dadd+0x10c>
 800059c:	230f      	movs	r3, #15
 800059e:	4023      	ands	r3, r4
 80005a0:	2b04      	cmp	r3, #4
 80005a2:	d005      	beq.n	80005b0 <__aeabi_dadd+0x10c>
 80005a4:	1d23      	adds	r3, r4, #4
 80005a6:	42a3      	cmp	r3, r4
 80005a8:	41a4      	sbcs	r4, r4
 80005aa:	4264      	negs	r4, r4
 80005ac:	193f      	adds	r7, r7, r4
 80005ae:	001c      	movs	r4, r3
 80005b0:	023b      	lsls	r3, r7, #8
 80005b2:	d400      	bmi.n	80005b6 <__aeabi_dadd+0x112>
 80005b4:	e09e      	b.n	80006f4 <__aeabi_dadd+0x250>
 80005b6:	4b95      	ldr	r3, [pc, #596]	; (800080c <__aeabi_dadd+0x368>)
 80005b8:	3601      	adds	r6, #1
 80005ba:	429e      	cmp	r6, r3
 80005bc:	d100      	bne.n	80005c0 <__aeabi_dadd+0x11c>
 80005be:	e0b7      	b.n	8000730 <__aeabi_dadd+0x28c>
 80005c0:	4a93      	ldr	r2, [pc, #588]	; (8000810 <__aeabi_dadd+0x36c>)
 80005c2:	08e4      	lsrs	r4, r4, #3
 80005c4:	4017      	ands	r7, r2
 80005c6:	077b      	lsls	r3, r7, #29
 80005c8:	0571      	lsls	r1, r6, #21
 80005ca:	027f      	lsls	r7, r7, #9
 80005cc:	4323      	orrs	r3, r4
 80005ce:	0b3f      	lsrs	r7, r7, #12
 80005d0:	0d4a      	lsrs	r2, r1, #21
 80005d2:	0512      	lsls	r2, r2, #20
 80005d4:	433a      	orrs	r2, r7
 80005d6:	07ed      	lsls	r5, r5, #31
 80005d8:	432a      	orrs	r2, r5
 80005da:	0018      	movs	r0, r3
 80005dc:	0011      	movs	r1, r2
 80005de:	bce0      	pop	{r5, r6, r7}
 80005e0:	46ba      	mov	sl, r7
 80005e2:	46b1      	mov	r9, r6
 80005e4:	46a8      	mov	r8, r5
 80005e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80005e8:	2c00      	cmp	r4, #0
 80005ea:	d04b      	beq.n	8000684 <__aeabi_dadd+0x1e0>
 80005ec:	464c      	mov	r4, r9
 80005ee:	1ba4      	subs	r4, r4, r6
 80005f0:	46a4      	mov	ip, r4
 80005f2:	2e00      	cmp	r6, #0
 80005f4:	d000      	beq.n	80005f8 <__aeabi_dadd+0x154>
 80005f6:	e123      	b.n	8000840 <__aeabi_dadd+0x39c>
 80005f8:	0004      	movs	r4, r0
 80005fa:	431c      	orrs	r4, r3
 80005fc:	d100      	bne.n	8000600 <__aeabi_dadd+0x15c>
 80005fe:	e1af      	b.n	8000960 <__aeabi_dadd+0x4bc>
 8000600:	4662      	mov	r2, ip
 8000602:	1e54      	subs	r4, r2, #1
 8000604:	2a01      	cmp	r2, #1
 8000606:	d100      	bne.n	800060a <__aeabi_dadd+0x166>
 8000608:	e215      	b.n	8000a36 <__aeabi_dadd+0x592>
 800060a:	4d80      	ldr	r5, [pc, #512]	; (800080c <__aeabi_dadd+0x368>)
 800060c:	45ac      	cmp	ip, r5
 800060e:	d100      	bne.n	8000612 <__aeabi_dadd+0x16e>
 8000610:	e1c8      	b.n	80009a4 <__aeabi_dadd+0x500>
 8000612:	46a4      	mov	ip, r4
 8000614:	e11b      	b.n	800084e <__aeabi_dadd+0x3aa>
 8000616:	464a      	mov	r2, r9
 8000618:	1ab2      	subs	r2, r6, r2
 800061a:	4694      	mov	ip, r2
 800061c:	2a00      	cmp	r2, #0
 800061e:	dc00      	bgt.n	8000622 <__aeabi_dadd+0x17e>
 8000620:	e0ac      	b.n	800077c <__aeabi_dadd+0x2d8>
 8000622:	464a      	mov	r2, r9
 8000624:	2a00      	cmp	r2, #0
 8000626:	d043      	beq.n	80006b0 <__aeabi_dadd+0x20c>
 8000628:	4a78      	ldr	r2, [pc, #480]	; (800080c <__aeabi_dadd+0x368>)
 800062a:	4296      	cmp	r6, r2
 800062c:	d100      	bne.n	8000630 <__aeabi_dadd+0x18c>
 800062e:	e1af      	b.n	8000990 <__aeabi_dadd+0x4ec>
 8000630:	2280      	movs	r2, #128	; 0x80
 8000632:	003c      	movs	r4, r7
 8000634:	0412      	lsls	r2, r2, #16
 8000636:	4314      	orrs	r4, r2
 8000638:	46a0      	mov	r8, r4
 800063a:	4662      	mov	r2, ip
 800063c:	2a38      	cmp	r2, #56	; 0x38
 800063e:	dc67      	bgt.n	8000710 <__aeabi_dadd+0x26c>
 8000640:	2a1f      	cmp	r2, #31
 8000642:	dc00      	bgt.n	8000646 <__aeabi_dadd+0x1a2>
 8000644:	e15f      	b.n	8000906 <__aeabi_dadd+0x462>
 8000646:	4647      	mov	r7, r8
 8000648:	3a20      	subs	r2, #32
 800064a:	40d7      	lsrs	r7, r2
 800064c:	4662      	mov	r2, ip
 800064e:	2a20      	cmp	r2, #32
 8000650:	d005      	beq.n	800065e <__aeabi_dadd+0x1ba>
 8000652:	4664      	mov	r4, ip
 8000654:	2240      	movs	r2, #64	; 0x40
 8000656:	1b12      	subs	r2, r2, r4
 8000658:	4644      	mov	r4, r8
 800065a:	4094      	lsls	r4, r2
 800065c:	4321      	orrs	r1, r4
 800065e:	1e4a      	subs	r2, r1, #1
 8000660:	4191      	sbcs	r1, r2
 8000662:	000c      	movs	r4, r1
 8000664:	433c      	orrs	r4, r7
 8000666:	e057      	b.n	8000718 <__aeabi_dadd+0x274>
 8000668:	003a      	movs	r2, r7
 800066a:	430a      	orrs	r2, r1
 800066c:	d100      	bne.n	8000670 <__aeabi_dadd+0x1cc>
 800066e:	e105      	b.n	800087c <__aeabi_dadd+0x3d8>
 8000670:	0022      	movs	r2, r4
 8000672:	3a01      	subs	r2, #1
 8000674:	2c01      	cmp	r4, #1
 8000676:	d100      	bne.n	800067a <__aeabi_dadd+0x1d6>
 8000678:	e182      	b.n	8000980 <__aeabi_dadd+0x4dc>
 800067a:	4c64      	ldr	r4, [pc, #400]	; (800080c <__aeabi_dadd+0x368>)
 800067c:	45a4      	cmp	ip, r4
 800067e:	d05b      	beq.n	8000738 <__aeabi_dadd+0x294>
 8000680:	4694      	mov	ip, r2
 8000682:	e741      	b.n	8000508 <__aeabi_dadd+0x64>
 8000684:	4c63      	ldr	r4, [pc, #396]	; (8000814 <__aeabi_dadd+0x370>)
 8000686:	1c77      	adds	r7, r6, #1
 8000688:	4227      	tst	r7, r4
 800068a:	d000      	beq.n	800068e <__aeabi_dadd+0x1ea>
 800068c:	e0c4      	b.n	8000818 <__aeabi_dadd+0x374>
 800068e:	0004      	movs	r4, r0
 8000690:	431c      	orrs	r4, r3
 8000692:	2e00      	cmp	r6, #0
 8000694:	d000      	beq.n	8000698 <__aeabi_dadd+0x1f4>
 8000696:	e169      	b.n	800096c <__aeabi_dadd+0x4c8>
 8000698:	2c00      	cmp	r4, #0
 800069a:	d100      	bne.n	800069e <__aeabi_dadd+0x1fa>
 800069c:	e1bf      	b.n	8000a1e <__aeabi_dadd+0x57a>
 800069e:	4644      	mov	r4, r8
 80006a0:	430c      	orrs	r4, r1
 80006a2:	d000      	beq.n	80006a6 <__aeabi_dadd+0x202>
 80006a4:	e1d0      	b.n	8000a48 <__aeabi_dadd+0x5a4>
 80006a6:	0742      	lsls	r2, r0, #29
 80006a8:	08db      	lsrs	r3, r3, #3
 80006aa:	4313      	orrs	r3, r2
 80006ac:	08c0      	lsrs	r0, r0, #3
 80006ae:	e029      	b.n	8000704 <__aeabi_dadd+0x260>
 80006b0:	003a      	movs	r2, r7
 80006b2:	430a      	orrs	r2, r1
 80006b4:	d100      	bne.n	80006b8 <__aeabi_dadd+0x214>
 80006b6:	e170      	b.n	800099a <__aeabi_dadd+0x4f6>
 80006b8:	4662      	mov	r2, ip
 80006ba:	4664      	mov	r4, ip
 80006bc:	3a01      	subs	r2, #1
 80006be:	2c01      	cmp	r4, #1
 80006c0:	d100      	bne.n	80006c4 <__aeabi_dadd+0x220>
 80006c2:	e0e0      	b.n	8000886 <__aeabi_dadd+0x3e2>
 80006c4:	4c51      	ldr	r4, [pc, #324]	; (800080c <__aeabi_dadd+0x368>)
 80006c6:	45a4      	cmp	ip, r4
 80006c8:	d100      	bne.n	80006cc <__aeabi_dadd+0x228>
 80006ca:	e161      	b.n	8000990 <__aeabi_dadd+0x4ec>
 80006cc:	4694      	mov	ip, r2
 80006ce:	e7b4      	b.n	800063a <__aeabi_dadd+0x196>
 80006d0:	003a      	movs	r2, r7
 80006d2:	391f      	subs	r1, #31
 80006d4:	40ca      	lsrs	r2, r1
 80006d6:	0011      	movs	r1, r2
 80006d8:	2b20      	cmp	r3, #32
 80006da:	d003      	beq.n	80006e4 <__aeabi_dadd+0x240>
 80006dc:	2240      	movs	r2, #64	; 0x40
 80006de:	1ad3      	subs	r3, r2, r3
 80006e0:	409f      	lsls	r7, r3
 80006e2:	433c      	orrs	r4, r7
 80006e4:	1e63      	subs	r3, r4, #1
 80006e6:	419c      	sbcs	r4, r3
 80006e8:	2700      	movs	r7, #0
 80006ea:	2600      	movs	r6, #0
 80006ec:	430c      	orrs	r4, r1
 80006ee:	0763      	lsls	r3, r4, #29
 80006f0:	d000      	beq.n	80006f4 <__aeabi_dadd+0x250>
 80006f2:	e753      	b.n	800059c <__aeabi_dadd+0xf8>
 80006f4:	46b4      	mov	ip, r6
 80006f6:	08e4      	lsrs	r4, r4, #3
 80006f8:	077b      	lsls	r3, r7, #29
 80006fa:	4323      	orrs	r3, r4
 80006fc:	08f8      	lsrs	r0, r7, #3
 80006fe:	4a43      	ldr	r2, [pc, #268]	; (800080c <__aeabi_dadd+0x368>)
 8000700:	4594      	cmp	ip, r2
 8000702:	d01d      	beq.n	8000740 <__aeabi_dadd+0x29c>
 8000704:	4662      	mov	r2, ip
 8000706:	0307      	lsls	r7, r0, #12
 8000708:	0552      	lsls	r2, r2, #21
 800070a:	0b3f      	lsrs	r7, r7, #12
 800070c:	0d52      	lsrs	r2, r2, #21
 800070e:	e760      	b.n	80005d2 <__aeabi_dadd+0x12e>
 8000710:	4644      	mov	r4, r8
 8000712:	430c      	orrs	r4, r1
 8000714:	1e62      	subs	r2, r4, #1
 8000716:	4194      	sbcs	r4, r2
 8000718:	18e4      	adds	r4, r4, r3
 800071a:	429c      	cmp	r4, r3
 800071c:	419b      	sbcs	r3, r3
 800071e:	425f      	negs	r7, r3
 8000720:	183f      	adds	r7, r7, r0
 8000722:	023b      	lsls	r3, r7, #8
 8000724:	d5e3      	bpl.n	80006ee <__aeabi_dadd+0x24a>
 8000726:	4b39      	ldr	r3, [pc, #228]	; (800080c <__aeabi_dadd+0x368>)
 8000728:	3601      	adds	r6, #1
 800072a:	429e      	cmp	r6, r3
 800072c:	d000      	beq.n	8000730 <__aeabi_dadd+0x28c>
 800072e:	e0b5      	b.n	800089c <__aeabi_dadd+0x3f8>
 8000730:	0032      	movs	r2, r6
 8000732:	2700      	movs	r7, #0
 8000734:	2300      	movs	r3, #0
 8000736:	e74c      	b.n	80005d2 <__aeabi_dadd+0x12e>
 8000738:	0742      	lsls	r2, r0, #29
 800073a:	08db      	lsrs	r3, r3, #3
 800073c:	4313      	orrs	r3, r2
 800073e:	08c0      	lsrs	r0, r0, #3
 8000740:	001a      	movs	r2, r3
 8000742:	4302      	orrs	r2, r0
 8000744:	d100      	bne.n	8000748 <__aeabi_dadd+0x2a4>
 8000746:	e1e1      	b.n	8000b0c <__aeabi_dadd+0x668>
 8000748:	2780      	movs	r7, #128	; 0x80
 800074a:	033f      	lsls	r7, r7, #12
 800074c:	4307      	orrs	r7, r0
 800074e:	033f      	lsls	r7, r7, #12
 8000750:	4a2e      	ldr	r2, [pc, #184]	; (800080c <__aeabi_dadd+0x368>)
 8000752:	0b3f      	lsrs	r7, r7, #12
 8000754:	e73d      	b.n	80005d2 <__aeabi_dadd+0x12e>
 8000756:	0020      	movs	r0, r4
 8000758:	f001 fc8a 	bl	8002070 <__clzsi2>
 800075c:	0001      	movs	r1, r0
 800075e:	3118      	adds	r1, #24
 8000760:	291f      	cmp	r1, #31
 8000762:	dc00      	bgt.n	8000766 <__aeabi_dadd+0x2c2>
 8000764:	e6fc      	b.n	8000560 <__aeabi_dadd+0xbc>
 8000766:	3808      	subs	r0, #8
 8000768:	4084      	lsls	r4, r0
 800076a:	0027      	movs	r7, r4
 800076c:	2400      	movs	r4, #0
 800076e:	42b1      	cmp	r1, r6
 8000770:	db00      	blt.n	8000774 <__aeabi_dadd+0x2d0>
 8000772:	e6ff      	b.n	8000574 <__aeabi_dadd+0xd0>
 8000774:	4a26      	ldr	r2, [pc, #152]	; (8000810 <__aeabi_dadd+0x36c>)
 8000776:	1a76      	subs	r6, r6, r1
 8000778:	4017      	ands	r7, r2
 800077a:	e70d      	b.n	8000598 <__aeabi_dadd+0xf4>
 800077c:	2a00      	cmp	r2, #0
 800077e:	d02f      	beq.n	80007e0 <__aeabi_dadd+0x33c>
 8000780:	464a      	mov	r2, r9
 8000782:	1b92      	subs	r2, r2, r6
 8000784:	4694      	mov	ip, r2
 8000786:	2e00      	cmp	r6, #0
 8000788:	d100      	bne.n	800078c <__aeabi_dadd+0x2e8>
 800078a:	e0ad      	b.n	80008e8 <__aeabi_dadd+0x444>
 800078c:	4a1f      	ldr	r2, [pc, #124]	; (800080c <__aeabi_dadd+0x368>)
 800078e:	4591      	cmp	r9, r2
 8000790:	d100      	bne.n	8000794 <__aeabi_dadd+0x2f0>
 8000792:	e10f      	b.n	80009b4 <__aeabi_dadd+0x510>
 8000794:	2280      	movs	r2, #128	; 0x80
 8000796:	0412      	lsls	r2, r2, #16
 8000798:	4310      	orrs	r0, r2
 800079a:	4662      	mov	r2, ip
 800079c:	2a38      	cmp	r2, #56	; 0x38
 800079e:	dd00      	ble.n	80007a2 <__aeabi_dadd+0x2fe>
 80007a0:	e10f      	b.n	80009c2 <__aeabi_dadd+0x51e>
 80007a2:	2a1f      	cmp	r2, #31
 80007a4:	dd00      	ble.n	80007a8 <__aeabi_dadd+0x304>
 80007a6:	e180      	b.n	8000aaa <__aeabi_dadd+0x606>
 80007a8:	4664      	mov	r4, ip
 80007aa:	2220      	movs	r2, #32
 80007ac:	001e      	movs	r6, r3
 80007ae:	1b12      	subs	r2, r2, r4
 80007b0:	4667      	mov	r7, ip
 80007b2:	0004      	movs	r4, r0
 80007b4:	4093      	lsls	r3, r2
 80007b6:	4094      	lsls	r4, r2
 80007b8:	40fe      	lsrs	r6, r7
 80007ba:	1e5a      	subs	r2, r3, #1
 80007bc:	4193      	sbcs	r3, r2
 80007be:	40f8      	lsrs	r0, r7
 80007c0:	4334      	orrs	r4, r6
 80007c2:	431c      	orrs	r4, r3
 80007c4:	4480      	add	r8, r0
 80007c6:	1864      	adds	r4, r4, r1
 80007c8:	428c      	cmp	r4, r1
 80007ca:	41bf      	sbcs	r7, r7
 80007cc:	427f      	negs	r7, r7
 80007ce:	464e      	mov	r6, r9
 80007d0:	4447      	add	r7, r8
 80007d2:	e7a6      	b.n	8000722 <__aeabi_dadd+0x27e>
 80007d4:	4642      	mov	r2, r8
 80007d6:	430a      	orrs	r2, r1
 80007d8:	0011      	movs	r1, r2
 80007da:	1e4a      	subs	r2, r1, #1
 80007dc:	4191      	sbcs	r1, r2
 80007de:	e6ad      	b.n	800053c <__aeabi_dadd+0x98>
 80007e0:	4c0c      	ldr	r4, [pc, #48]	; (8000814 <__aeabi_dadd+0x370>)
 80007e2:	1c72      	adds	r2, r6, #1
 80007e4:	4222      	tst	r2, r4
 80007e6:	d000      	beq.n	80007ea <__aeabi_dadd+0x346>
 80007e8:	e0a1      	b.n	800092e <__aeabi_dadd+0x48a>
 80007ea:	0002      	movs	r2, r0
 80007ec:	431a      	orrs	r2, r3
 80007ee:	2e00      	cmp	r6, #0
 80007f0:	d000      	beq.n	80007f4 <__aeabi_dadd+0x350>
 80007f2:	e0fa      	b.n	80009ea <__aeabi_dadd+0x546>
 80007f4:	2a00      	cmp	r2, #0
 80007f6:	d100      	bne.n	80007fa <__aeabi_dadd+0x356>
 80007f8:	e145      	b.n	8000a86 <__aeabi_dadd+0x5e2>
 80007fa:	003a      	movs	r2, r7
 80007fc:	430a      	orrs	r2, r1
 80007fe:	d000      	beq.n	8000802 <__aeabi_dadd+0x35e>
 8000800:	e146      	b.n	8000a90 <__aeabi_dadd+0x5ec>
 8000802:	0742      	lsls	r2, r0, #29
 8000804:	08db      	lsrs	r3, r3, #3
 8000806:	4313      	orrs	r3, r2
 8000808:	08c0      	lsrs	r0, r0, #3
 800080a:	e77b      	b.n	8000704 <__aeabi_dadd+0x260>
 800080c:	000007ff 	.word	0x000007ff
 8000810:	ff7fffff 	.word	0xff7fffff
 8000814:	000007fe 	.word	0x000007fe
 8000818:	4647      	mov	r7, r8
 800081a:	1a5c      	subs	r4, r3, r1
 800081c:	1bc2      	subs	r2, r0, r7
 800081e:	42a3      	cmp	r3, r4
 8000820:	41bf      	sbcs	r7, r7
 8000822:	427f      	negs	r7, r7
 8000824:	46b9      	mov	r9, r7
 8000826:	0017      	movs	r7, r2
 8000828:	464a      	mov	r2, r9
 800082a:	1abf      	subs	r7, r7, r2
 800082c:	023a      	lsls	r2, r7, #8
 800082e:	d500      	bpl.n	8000832 <__aeabi_dadd+0x38e>
 8000830:	e08d      	b.n	800094e <__aeabi_dadd+0x4aa>
 8000832:	0023      	movs	r3, r4
 8000834:	433b      	orrs	r3, r7
 8000836:	d000      	beq.n	800083a <__aeabi_dadd+0x396>
 8000838:	e68a      	b.n	8000550 <__aeabi_dadd+0xac>
 800083a:	2000      	movs	r0, #0
 800083c:	2500      	movs	r5, #0
 800083e:	e761      	b.n	8000704 <__aeabi_dadd+0x260>
 8000840:	4cb4      	ldr	r4, [pc, #720]	; (8000b14 <__aeabi_dadd+0x670>)
 8000842:	45a1      	cmp	r9, r4
 8000844:	d100      	bne.n	8000848 <__aeabi_dadd+0x3a4>
 8000846:	e0ad      	b.n	80009a4 <__aeabi_dadd+0x500>
 8000848:	2480      	movs	r4, #128	; 0x80
 800084a:	0424      	lsls	r4, r4, #16
 800084c:	4320      	orrs	r0, r4
 800084e:	4664      	mov	r4, ip
 8000850:	2c38      	cmp	r4, #56	; 0x38
 8000852:	dc3d      	bgt.n	80008d0 <__aeabi_dadd+0x42c>
 8000854:	4662      	mov	r2, ip
 8000856:	2c1f      	cmp	r4, #31
 8000858:	dd00      	ble.n	800085c <__aeabi_dadd+0x3b8>
 800085a:	e0b7      	b.n	80009cc <__aeabi_dadd+0x528>
 800085c:	2520      	movs	r5, #32
 800085e:	001e      	movs	r6, r3
 8000860:	1b2d      	subs	r5, r5, r4
 8000862:	0004      	movs	r4, r0
 8000864:	40ab      	lsls	r3, r5
 8000866:	40ac      	lsls	r4, r5
 8000868:	40d6      	lsrs	r6, r2
 800086a:	40d0      	lsrs	r0, r2
 800086c:	4642      	mov	r2, r8
 800086e:	1e5d      	subs	r5, r3, #1
 8000870:	41ab      	sbcs	r3, r5
 8000872:	4334      	orrs	r4, r6
 8000874:	1a12      	subs	r2, r2, r0
 8000876:	4690      	mov	r8, r2
 8000878:	4323      	orrs	r3, r4
 800087a:	e02c      	b.n	80008d6 <__aeabi_dadd+0x432>
 800087c:	0742      	lsls	r2, r0, #29
 800087e:	08db      	lsrs	r3, r3, #3
 8000880:	4313      	orrs	r3, r2
 8000882:	08c0      	lsrs	r0, r0, #3
 8000884:	e73b      	b.n	80006fe <__aeabi_dadd+0x25a>
 8000886:	185c      	adds	r4, r3, r1
 8000888:	429c      	cmp	r4, r3
 800088a:	419b      	sbcs	r3, r3
 800088c:	4440      	add	r0, r8
 800088e:	425b      	negs	r3, r3
 8000890:	18c7      	adds	r7, r0, r3
 8000892:	2601      	movs	r6, #1
 8000894:	023b      	lsls	r3, r7, #8
 8000896:	d400      	bmi.n	800089a <__aeabi_dadd+0x3f6>
 8000898:	e729      	b.n	80006ee <__aeabi_dadd+0x24a>
 800089a:	2602      	movs	r6, #2
 800089c:	4a9e      	ldr	r2, [pc, #632]	; (8000b18 <__aeabi_dadd+0x674>)
 800089e:	0863      	lsrs	r3, r4, #1
 80008a0:	4017      	ands	r7, r2
 80008a2:	2201      	movs	r2, #1
 80008a4:	4014      	ands	r4, r2
 80008a6:	431c      	orrs	r4, r3
 80008a8:	07fb      	lsls	r3, r7, #31
 80008aa:	431c      	orrs	r4, r3
 80008ac:	087f      	lsrs	r7, r7, #1
 80008ae:	e673      	b.n	8000598 <__aeabi_dadd+0xf4>
 80008b0:	4644      	mov	r4, r8
 80008b2:	3a20      	subs	r2, #32
 80008b4:	40d4      	lsrs	r4, r2
 80008b6:	4662      	mov	r2, ip
 80008b8:	2a20      	cmp	r2, #32
 80008ba:	d005      	beq.n	80008c8 <__aeabi_dadd+0x424>
 80008bc:	4667      	mov	r7, ip
 80008be:	2240      	movs	r2, #64	; 0x40
 80008c0:	1bd2      	subs	r2, r2, r7
 80008c2:	4647      	mov	r7, r8
 80008c4:	4097      	lsls	r7, r2
 80008c6:	4339      	orrs	r1, r7
 80008c8:	1e4a      	subs	r2, r1, #1
 80008ca:	4191      	sbcs	r1, r2
 80008cc:	4321      	orrs	r1, r4
 80008ce:	e635      	b.n	800053c <__aeabi_dadd+0x98>
 80008d0:	4303      	orrs	r3, r0
 80008d2:	1e58      	subs	r0, r3, #1
 80008d4:	4183      	sbcs	r3, r0
 80008d6:	1acc      	subs	r4, r1, r3
 80008d8:	42a1      	cmp	r1, r4
 80008da:	41bf      	sbcs	r7, r7
 80008dc:	4643      	mov	r3, r8
 80008de:	427f      	negs	r7, r7
 80008e0:	4655      	mov	r5, sl
 80008e2:	464e      	mov	r6, r9
 80008e4:	1bdf      	subs	r7, r3, r7
 80008e6:	e62e      	b.n	8000546 <__aeabi_dadd+0xa2>
 80008e8:	0002      	movs	r2, r0
 80008ea:	431a      	orrs	r2, r3
 80008ec:	d100      	bne.n	80008f0 <__aeabi_dadd+0x44c>
 80008ee:	e0bd      	b.n	8000a6c <__aeabi_dadd+0x5c8>
 80008f0:	4662      	mov	r2, ip
 80008f2:	4664      	mov	r4, ip
 80008f4:	3a01      	subs	r2, #1
 80008f6:	2c01      	cmp	r4, #1
 80008f8:	d100      	bne.n	80008fc <__aeabi_dadd+0x458>
 80008fa:	e0e5      	b.n	8000ac8 <__aeabi_dadd+0x624>
 80008fc:	4c85      	ldr	r4, [pc, #532]	; (8000b14 <__aeabi_dadd+0x670>)
 80008fe:	45a4      	cmp	ip, r4
 8000900:	d058      	beq.n	80009b4 <__aeabi_dadd+0x510>
 8000902:	4694      	mov	ip, r2
 8000904:	e749      	b.n	800079a <__aeabi_dadd+0x2f6>
 8000906:	4664      	mov	r4, ip
 8000908:	2220      	movs	r2, #32
 800090a:	1b12      	subs	r2, r2, r4
 800090c:	4644      	mov	r4, r8
 800090e:	4094      	lsls	r4, r2
 8000910:	000f      	movs	r7, r1
 8000912:	46a1      	mov	r9, r4
 8000914:	4664      	mov	r4, ip
 8000916:	4091      	lsls	r1, r2
 8000918:	40e7      	lsrs	r7, r4
 800091a:	464c      	mov	r4, r9
 800091c:	1e4a      	subs	r2, r1, #1
 800091e:	4191      	sbcs	r1, r2
 8000920:	433c      	orrs	r4, r7
 8000922:	4642      	mov	r2, r8
 8000924:	430c      	orrs	r4, r1
 8000926:	4661      	mov	r1, ip
 8000928:	40ca      	lsrs	r2, r1
 800092a:	1880      	adds	r0, r0, r2
 800092c:	e6f4      	b.n	8000718 <__aeabi_dadd+0x274>
 800092e:	4c79      	ldr	r4, [pc, #484]	; (8000b14 <__aeabi_dadd+0x670>)
 8000930:	42a2      	cmp	r2, r4
 8000932:	d100      	bne.n	8000936 <__aeabi_dadd+0x492>
 8000934:	e6fd      	b.n	8000732 <__aeabi_dadd+0x28e>
 8000936:	1859      	adds	r1, r3, r1
 8000938:	4299      	cmp	r1, r3
 800093a:	419b      	sbcs	r3, r3
 800093c:	4440      	add	r0, r8
 800093e:	425f      	negs	r7, r3
 8000940:	19c7      	adds	r7, r0, r7
 8000942:	07fc      	lsls	r4, r7, #31
 8000944:	0849      	lsrs	r1, r1, #1
 8000946:	0016      	movs	r6, r2
 8000948:	430c      	orrs	r4, r1
 800094a:	087f      	lsrs	r7, r7, #1
 800094c:	e6cf      	b.n	80006ee <__aeabi_dadd+0x24a>
 800094e:	1acc      	subs	r4, r1, r3
 8000950:	42a1      	cmp	r1, r4
 8000952:	41bf      	sbcs	r7, r7
 8000954:	4643      	mov	r3, r8
 8000956:	427f      	negs	r7, r7
 8000958:	1a18      	subs	r0, r3, r0
 800095a:	4655      	mov	r5, sl
 800095c:	1bc7      	subs	r7, r0, r7
 800095e:	e5f7      	b.n	8000550 <__aeabi_dadd+0xac>
 8000960:	08c9      	lsrs	r1, r1, #3
 8000962:	077b      	lsls	r3, r7, #29
 8000964:	4655      	mov	r5, sl
 8000966:	430b      	orrs	r3, r1
 8000968:	08f8      	lsrs	r0, r7, #3
 800096a:	e6c8      	b.n	80006fe <__aeabi_dadd+0x25a>
 800096c:	2c00      	cmp	r4, #0
 800096e:	d000      	beq.n	8000972 <__aeabi_dadd+0x4ce>
 8000970:	e081      	b.n	8000a76 <__aeabi_dadd+0x5d2>
 8000972:	4643      	mov	r3, r8
 8000974:	430b      	orrs	r3, r1
 8000976:	d115      	bne.n	80009a4 <__aeabi_dadd+0x500>
 8000978:	2080      	movs	r0, #128	; 0x80
 800097a:	2500      	movs	r5, #0
 800097c:	0300      	lsls	r0, r0, #12
 800097e:	e6e3      	b.n	8000748 <__aeabi_dadd+0x2a4>
 8000980:	1a5c      	subs	r4, r3, r1
 8000982:	42a3      	cmp	r3, r4
 8000984:	419b      	sbcs	r3, r3
 8000986:	1bc7      	subs	r7, r0, r7
 8000988:	425b      	negs	r3, r3
 800098a:	2601      	movs	r6, #1
 800098c:	1aff      	subs	r7, r7, r3
 800098e:	e5da      	b.n	8000546 <__aeabi_dadd+0xa2>
 8000990:	0742      	lsls	r2, r0, #29
 8000992:	08db      	lsrs	r3, r3, #3
 8000994:	4313      	orrs	r3, r2
 8000996:	08c0      	lsrs	r0, r0, #3
 8000998:	e6d2      	b.n	8000740 <__aeabi_dadd+0x29c>
 800099a:	0742      	lsls	r2, r0, #29
 800099c:	08db      	lsrs	r3, r3, #3
 800099e:	4313      	orrs	r3, r2
 80009a0:	08c0      	lsrs	r0, r0, #3
 80009a2:	e6ac      	b.n	80006fe <__aeabi_dadd+0x25a>
 80009a4:	4643      	mov	r3, r8
 80009a6:	4642      	mov	r2, r8
 80009a8:	08c9      	lsrs	r1, r1, #3
 80009aa:	075b      	lsls	r3, r3, #29
 80009ac:	4655      	mov	r5, sl
 80009ae:	430b      	orrs	r3, r1
 80009b0:	08d0      	lsrs	r0, r2, #3
 80009b2:	e6c5      	b.n	8000740 <__aeabi_dadd+0x29c>
 80009b4:	4643      	mov	r3, r8
 80009b6:	4642      	mov	r2, r8
 80009b8:	075b      	lsls	r3, r3, #29
 80009ba:	08c9      	lsrs	r1, r1, #3
 80009bc:	430b      	orrs	r3, r1
 80009be:	08d0      	lsrs	r0, r2, #3
 80009c0:	e6be      	b.n	8000740 <__aeabi_dadd+0x29c>
 80009c2:	4303      	orrs	r3, r0
 80009c4:	001c      	movs	r4, r3
 80009c6:	1e63      	subs	r3, r4, #1
 80009c8:	419c      	sbcs	r4, r3
 80009ca:	e6fc      	b.n	80007c6 <__aeabi_dadd+0x322>
 80009cc:	0002      	movs	r2, r0
 80009ce:	3c20      	subs	r4, #32
 80009d0:	40e2      	lsrs	r2, r4
 80009d2:	0014      	movs	r4, r2
 80009d4:	4662      	mov	r2, ip
 80009d6:	2a20      	cmp	r2, #32
 80009d8:	d003      	beq.n	80009e2 <__aeabi_dadd+0x53e>
 80009da:	2540      	movs	r5, #64	; 0x40
 80009dc:	1aad      	subs	r5, r5, r2
 80009de:	40a8      	lsls	r0, r5
 80009e0:	4303      	orrs	r3, r0
 80009e2:	1e58      	subs	r0, r3, #1
 80009e4:	4183      	sbcs	r3, r0
 80009e6:	4323      	orrs	r3, r4
 80009e8:	e775      	b.n	80008d6 <__aeabi_dadd+0x432>
 80009ea:	2a00      	cmp	r2, #0
 80009ec:	d0e2      	beq.n	80009b4 <__aeabi_dadd+0x510>
 80009ee:	003a      	movs	r2, r7
 80009f0:	430a      	orrs	r2, r1
 80009f2:	d0cd      	beq.n	8000990 <__aeabi_dadd+0x4ec>
 80009f4:	0742      	lsls	r2, r0, #29
 80009f6:	08db      	lsrs	r3, r3, #3
 80009f8:	4313      	orrs	r3, r2
 80009fa:	2280      	movs	r2, #128	; 0x80
 80009fc:	08c0      	lsrs	r0, r0, #3
 80009fe:	0312      	lsls	r2, r2, #12
 8000a00:	4210      	tst	r0, r2
 8000a02:	d006      	beq.n	8000a12 <__aeabi_dadd+0x56e>
 8000a04:	08fc      	lsrs	r4, r7, #3
 8000a06:	4214      	tst	r4, r2
 8000a08:	d103      	bne.n	8000a12 <__aeabi_dadd+0x56e>
 8000a0a:	0020      	movs	r0, r4
 8000a0c:	08cb      	lsrs	r3, r1, #3
 8000a0e:	077a      	lsls	r2, r7, #29
 8000a10:	4313      	orrs	r3, r2
 8000a12:	0f5a      	lsrs	r2, r3, #29
 8000a14:	00db      	lsls	r3, r3, #3
 8000a16:	0752      	lsls	r2, r2, #29
 8000a18:	08db      	lsrs	r3, r3, #3
 8000a1a:	4313      	orrs	r3, r2
 8000a1c:	e690      	b.n	8000740 <__aeabi_dadd+0x29c>
 8000a1e:	4643      	mov	r3, r8
 8000a20:	430b      	orrs	r3, r1
 8000a22:	d100      	bne.n	8000a26 <__aeabi_dadd+0x582>
 8000a24:	e709      	b.n	800083a <__aeabi_dadd+0x396>
 8000a26:	4643      	mov	r3, r8
 8000a28:	4642      	mov	r2, r8
 8000a2a:	08c9      	lsrs	r1, r1, #3
 8000a2c:	075b      	lsls	r3, r3, #29
 8000a2e:	4655      	mov	r5, sl
 8000a30:	430b      	orrs	r3, r1
 8000a32:	08d0      	lsrs	r0, r2, #3
 8000a34:	e666      	b.n	8000704 <__aeabi_dadd+0x260>
 8000a36:	1acc      	subs	r4, r1, r3
 8000a38:	42a1      	cmp	r1, r4
 8000a3a:	4189      	sbcs	r1, r1
 8000a3c:	1a3f      	subs	r7, r7, r0
 8000a3e:	4249      	negs	r1, r1
 8000a40:	4655      	mov	r5, sl
 8000a42:	2601      	movs	r6, #1
 8000a44:	1a7f      	subs	r7, r7, r1
 8000a46:	e57e      	b.n	8000546 <__aeabi_dadd+0xa2>
 8000a48:	4642      	mov	r2, r8
 8000a4a:	1a5c      	subs	r4, r3, r1
 8000a4c:	1a87      	subs	r7, r0, r2
 8000a4e:	42a3      	cmp	r3, r4
 8000a50:	4192      	sbcs	r2, r2
 8000a52:	4252      	negs	r2, r2
 8000a54:	1abf      	subs	r7, r7, r2
 8000a56:	023a      	lsls	r2, r7, #8
 8000a58:	d53d      	bpl.n	8000ad6 <__aeabi_dadd+0x632>
 8000a5a:	1acc      	subs	r4, r1, r3
 8000a5c:	42a1      	cmp	r1, r4
 8000a5e:	4189      	sbcs	r1, r1
 8000a60:	4643      	mov	r3, r8
 8000a62:	4249      	negs	r1, r1
 8000a64:	1a1f      	subs	r7, r3, r0
 8000a66:	4655      	mov	r5, sl
 8000a68:	1a7f      	subs	r7, r7, r1
 8000a6a:	e595      	b.n	8000598 <__aeabi_dadd+0xf4>
 8000a6c:	077b      	lsls	r3, r7, #29
 8000a6e:	08c9      	lsrs	r1, r1, #3
 8000a70:	430b      	orrs	r3, r1
 8000a72:	08f8      	lsrs	r0, r7, #3
 8000a74:	e643      	b.n	80006fe <__aeabi_dadd+0x25a>
 8000a76:	4644      	mov	r4, r8
 8000a78:	08db      	lsrs	r3, r3, #3
 8000a7a:	430c      	orrs	r4, r1
 8000a7c:	d130      	bne.n	8000ae0 <__aeabi_dadd+0x63c>
 8000a7e:	0742      	lsls	r2, r0, #29
 8000a80:	4313      	orrs	r3, r2
 8000a82:	08c0      	lsrs	r0, r0, #3
 8000a84:	e65c      	b.n	8000740 <__aeabi_dadd+0x29c>
 8000a86:	077b      	lsls	r3, r7, #29
 8000a88:	08c9      	lsrs	r1, r1, #3
 8000a8a:	430b      	orrs	r3, r1
 8000a8c:	08f8      	lsrs	r0, r7, #3
 8000a8e:	e639      	b.n	8000704 <__aeabi_dadd+0x260>
 8000a90:	185c      	adds	r4, r3, r1
 8000a92:	429c      	cmp	r4, r3
 8000a94:	419b      	sbcs	r3, r3
 8000a96:	4440      	add	r0, r8
 8000a98:	425b      	negs	r3, r3
 8000a9a:	18c7      	adds	r7, r0, r3
 8000a9c:	023b      	lsls	r3, r7, #8
 8000a9e:	d400      	bmi.n	8000aa2 <__aeabi_dadd+0x5fe>
 8000aa0:	e625      	b.n	80006ee <__aeabi_dadd+0x24a>
 8000aa2:	4b1d      	ldr	r3, [pc, #116]	; (8000b18 <__aeabi_dadd+0x674>)
 8000aa4:	2601      	movs	r6, #1
 8000aa6:	401f      	ands	r7, r3
 8000aa8:	e621      	b.n	80006ee <__aeabi_dadd+0x24a>
 8000aaa:	0004      	movs	r4, r0
 8000aac:	3a20      	subs	r2, #32
 8000aae:	40d4      	lsrs	r4, r2
 8000ab0:	4662      	mov	r2, ip
 8000ab2:	2a20      	cmp	r2, #32
 8000ab4:	d004      	beq.n	8000ac0 <__aeabi_dadd+0x61c>
 8000ab6:	2240      	movs	r2, #64	; 0x40
 8000ab8:	4666      	mov	r6, ip
 8000aba:	1b92      	subs	r2, r2, r6
 8000abc:	4090      	lsls	r0, r2
 8000abe:	4303      	orrs	r3, r0
 8000ac0:	1e5a      	subs	r2, r3, #1
 8000ac2:	4193      	sbcs	r3, r2
 8000ac4:	431c      	orrs	r4, r3
 8000ac6:	e67e      	b.n	80007c6 <__aeabi_dadd+0x322>
 8000ac8:	185c      	adds	r4, r3, r1
 8000aca:	428c      	cmp	r4, r1
 8000acc:	4189      	sbcs	r1, r1
 8000ace:	4440      	add	r0, r8
 8000ad0:	4249      	negs	r1, r1
 8000ad2:	1847      	adds	r7, r0, r1
 8000ad4:	e6dd      	b.n	8000892 <__aeabi_dadd+0x3ee>
 8000ad6:	0023      	movs	r3, r4
 8000ad8:	433b      	orrs	r3, r7
 8000ada:	d100      	bne.n	8000ade <__aeabi_dadd+0x63a>
 8000adc:	e6ad      	b.n	800083a <__aeabi_dadd+0x396>
 8000ade:	e606      	b.n	80006ee <__aeabi_dadd+0x24a>
 8000ae0:	0744      	lsls	r4, r0, #29
 8000ae2:	4323      	orrs	r3, r4
 8000ae4:	2480      	movs	r4, #128	; 0x80
 8000ae6:	08c0      	lsrs	r0, r0, #3
 8000ae8:	0324      	lsls	r4, r4, #12
 8000aea:	4220      	tst	r0, r4
 8000aec:	d008      	beq.n	8000b00 <__aeabi_dadd+0x65c>
 8000aee:	4642      	mov	r2, r8
 8000af0:	08d6      	lsrs	r6, r2, #3
 8000af2:	4226      	tst	r6, r4
 8000af4:	d104      	bne.n	8000b00 <__aeabi_dadd+0x65c>
 8000af6:	4655      	mov	r5, sl
 8000af8:	0030      	movs	r0, r6
 8000afa:	08cb      	lsrs	r3, r1, #3
 8000afc:	0751      	lsls	r1, r2, #29
 8000afe:	430b      	orrs	r3, r1
 8000b00:	0f5a      	lsrs	r2, r3, #29
 8000b02:	00db      	lsls	r3, r3, #3
 8000b04:	08db      	lsrs	r3, r3, #3
 8000b06:	0752      	lsls	r2, r2, #29
 8000b08:	4313      	orrs	r3, r2
 8000b0a:	e619      	b.n	8000740 <__aeabi_dadd+0x29c>
 8000b0c:	2300      	movs	r3, #0
 8000b0e:	4a01      	ldr	r2, [pc, #4]	; (8000b14 <__aeabi_dadd+0x670>)
 8000b10:	001f      	movs	r7, r3
 8000b12:	e55e      	b.n	80005d2 <__aeabi_dadd+0x12e>
 8000b14:	000007ff 	.word	0x000007ff
 8000b18:	ff7fffff 	.word	0xff7fffff

08000b1c <__aeabi_ddiv>:
 8000b1c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000b1e:	4657      	mov	r7, sl
 8000b20:	464e      	mov	r6, r9
 8000b22:	4645      	mov	r5, r8
 8000b24:	46de      	mov	lr, fp
 8000b26:	b5e0      	push	{r5, r6, r7, lr}
 8000b28:	4681      	mov	r9, r0
 8000b2a:	0005      	movs	r5, r0
 8000b2c:	030c      	lsls	r4, r1, #12
 8000b2e:	0048      	lsls	r0, r1, #1
 8000b30:	4692      	mov	sl, r2
 8000b32:	001f      	movs	r7, r3
 8000b34:	b085      	sub	sp, #20
 8000b36:	0b24      	lsrs	r4, r4, #12
 8000b38:	0d40      	lsrs	r0, r0, #21
 8000b3a:	0fce      	lsrs	r6, r1, #31
 8000b3c:	2800      	cmp	r0, #0
 8000b3e:	d100      	bne.n	8000b42 <__aeabi_ddiv+0x26>
 8000b40:	e156      	b.n	8000df0 <__aeabi_ddiv+0x2d4>
 8000b42:	4bd4      	ldr	r3, [pc, #848]	; (8000e94 <__aeabi_ddiv+0x378>)
 8000b44:	4298      	cmp	r0, r3
 8000b46:	d100      	bne.n	8000b4a <__aeabi_ddiv+0x2e>
 8000b48:	e172      	b.n	8000e30 <__aeabi_ddiv+0x314>
 8000b4a:	0f6b      	lsrs	r3, r5, #29
 8000b4c:	00e4      	lsls	r4, r4, #3
 8000b4e:	431c      	orrs	r4, r3
 8000b50:	2380      	movs	r3, #128	; 0x80
 8000b52:	041b      	lsls	r3, r3, #16
 8000b54:	4323      	orrs	r3, r4
 8000b56:	4698      	mov	r8, r3
 8000b58:	4bcf      	ldr	r3, [pc, #828]	; (8000e98 <__aeabi_ddiv+0x37c>)
 8000b5a:	00ed      	lsls	r5, r5, #3
 8000b5c:	469b      	mov	fp, r3
 8000b5e:	2300      	movs	r3, #0
 8000b60:	4699      	mov	r9, r3
 8000b62:	4483      	add	fp, r0
 8000b64:	9300      	str	r3, [sp, #0]
 8000b66:	033c      	lsls	r4, r7, #12
 8000b68:	007b      	lsls	r3, r7, #1
 8000b6a:	4650      	mov	r0, sl
 8000b6c:	0b24      	lsrs	r4, r4, #12
 8000b6e:	0d5b      	lsrs	r3, r3, #21
 8000b70:	0fff      	lsrs	r7, r7, #31
 8000b72:	2b00      	cmp	r3, #0
 8000b74:	d100      	bne.n	8000b78 <__aeabi_ddiv+0x5c>
 8000b76:	e11f      	b.n	8000db8 <__aeabi_ddiv+0x29c>
 8000b78:	4ac6      	ldr	r2, [pc, #792]	; (8000e94 <__aeabi_ddiv+0x378>)
 8000b7a:	4293      	cmp	r3, r2
 8000b7c:	d100      	bne.n	8000b80 <__aeabi_ddiv+0x64>
 8000b7e:	e162      	b.n	8000e46 <__aeabi_ddiv+0x32a>
 8000b80:	49c5      	ldr	r1, [pc, #788]	; (8000e98 <__aeabi_ddiv+0x37c>)
 8000b82:	0f42      	lsrs	r2, r0, #29
 8000b84:	468c      	mov	ip, r1
 8000b86:	00e4      	lsls	r4, r4, #3
 8000b88:	4659      	mov	r1, fp
 8000b8a:	4314      	orrs	r4, r2
 8000b8c:	2280      	movs	r2, #128	; 0x80
 8000b8e:	4463      	add	r3, ip
 8000b90:	0412      	lsls	r2, r2, #16
 8000b92:	1acb      	subs	r3, r1, r3
 8000b94:	4314      	orrs	r4, r2
 8000b96:	469b      	mov	fp, r3
 8000b98:	00c2      	lsls	r2, r0, #3
 8000b9a:	2000      	movs	r0, #0
 8000b9c:	0033      	movs	r3, r6
 8000b9e:	407b      	eors	r3, r7
 8000ba0:	469a      	mov	sl, r3
 8000ba2:	464b      	mov	r3, r9
 8000ba4:	2b0f      	cmp	r3, #15
 8000ba6:	d827      	bhi.n	8000bf8 <__aeabi_ddiv+0xdc>
 8000ba8:	49bc      	ldr	r1, [pc, #752]	; (8000e9c <__aeabi_ddiv+0x380>)
 8000baa:	009b      	lsls	r3, r3, #2
 8000bac:	58cb      	ldr	r3, [r1, r3]
 8000bae:	469f      	mov	pc, r3
 8000bb0:	46b2      	mov	sl, r6
 8000bb2:	9b00      	ldr	r3, [sp, #0]
 8000bb4:	2b02      	cmp	r3, #2
 8000bb6:	d016      	beq.n	8000be6 <__aeabi_ddiv+0xca>
 8000bb8:	2b03      	cmp	r3, #3
 8000bba:	d100      	bne.n	8000bbe <__aeabi_ddiv+0xa2>
 8000bbc:	e28e      	b.n	80010dc <__aeabi_ddiv+0x5c0>
 8000bbe:	2b01      	cmp	r3, #1
 8000bc0:	d000      	beq.n	8000bc4 <__aeabi_ddiv+0xa8>
 8000bc2:	e0d9      	b.n	8000d78 <__aeabi_ddiv+0x25c>
 8000bc4:	2300      	movs	r3, #0
 8000bc6:	2400      	movs	r4, #0
 8000bc8:	2500      	movs	r5, #0
 8000bca:	4652      	mov	r2, sl
 8000bcc:	051b      	lsls	r3, r3, #20
 8000bce:	4323      	orrs	r3, r4
 8000bd0:	07d2      	lsls	r2, r2, #31
 8000bd2:	4313      	orrs	r3, r2
 8000bd4:	0028      	movs	r0, r5
 8000bd6:	0019      	movs	r1, r3
 8000bd8:	b005      	add	sp, #20
 8000bda:	bcf0      	pop	{r4, r5, r6, r7}
 8000bdc:	46bb      	mov	fp, r7
 8000bde:	46b2      	mov	sl, r6
 8000be0:	46a9      	mov	r9, r5
 8000be2:	46a0      	mov	r8, r4
 8000be4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000be6:	2400      	movs	r4, #0
 8000be8:	2500      	movs	r5, #0
 8000bea:	4baa      	ldr	r3, [pc, #680]	; (8000e94 <__aeabi_ddiv+0x378>)
 8000bec:	e7ed      	b.n	8000bca <__aeabi_ddiv+0xae>
 8000bee:	46ba      	mov	sl, r7
 8000bf0:	46a0      	mov	r8, r4
 8000bf2:	0015      	movs	r5, r2
 8000bf4:	9000      	str	r0, [sp, #0]
 8000bf6:	e7dc      	b.n	8000bb2 <__aeabi_ddiv+0x96>
 8000bf8:	4544      	cmp	r4, r8
 8000bfa:	d200      	bcs.n	8000bfe <__aeabi_ddiv+0xe2>
 8000bfc:	e1c7      	b.n	8000f8e <__aeabi_ddiv+0x472>
 8000bfe:	d100      	bne.n	8000c02 <__aeabi_ddiv+0xe6>
 8000c00:	e1c2      	b.n	8000f88 <__aeabi_ddiv+0x46c>
 8000c02:	2301      	movs	r3, #1
 8000c04:	425b      	negs	r3, r3
 8000c06:	469c      	mov	ip, r3
 8000c08:	002e      	movs	r6, r5
 8000c0a:	4640      	mov	r0, r8
 8000c0c:	2500      	movs	r5, #0
 8000c0e:	44e3      	add	fp, ip
 8000c10:	0223      	lsls	r3, r4, #8
 8000c12:	0e14      	lsrs	r4, r2, #24
 8000c14:	431c      	orrs	r4, r3
 8000c16:	0c1b      	lsrs	r3, r3, #16
 8000c18:	4699      	mov	r9, r3
 8000c1a:	0423      	lsls	r3, r4, #16
 8000c1c:	0c1f      	lsrs	r7, r3, #16
 8000c1e:	0212      	lsls	r2, r2, #8
 8000c20:	4649      	mov	r1, r9
 8000c22:	9200      	str	r2, [sp, #0]
 8000c24:	9701      	str	r7, [sp, #4]
 8000c26:	f7ff fb0f 	bl	8000248 <__aeabi_uidivmod>
 8000c2a:	0002      	movs	r2, r0
 8000c2c:	437a      	muls	r2, r7
 8000c2e:	040b      	lsls	r3, r1, #16
 8000c30:	0c31      	lsrs	r1, r6, #16
 8000c32:	4680      	mov	r8, r0
 8000c34:	4319      	orrs	r1, r3
 8000c36:	428a      	cmp	r2, r1
 8000c38:	d907      	bls.n	8000c4a <__aeabi_ddiv+0x12e>
 8000c3a:	2301      	movs	r3, #1
 8000c3c:	425b      	negs	r3, r3
 8000c3e:	469c      	mov	ip, r3
 8000c40:	1909      	adds	r1, r1, r4
 8000c42:	44e0      	add	r8, ip
 8000c44:	428c      	cmp	r4, r1
 8000c46:	d800      	bhi.n	8000c4a <__aeabi_ddiv+0x12e>
 8000c48:	e207      	b.n	800105a <__aeabi_ddiv+0x53e>
 8000c4a:	1a88      	subs	r0, r1, r2
 8000c4c:	4649      	mov	r1, r9
 8000c4e:	f7ff fafb 	bl	8000248 <__aeabi_uidivmod>
 8000c52:	0409      	lsls	r1, r1, #16
 8000c54:	468c      	mov	ip, r1
 8000c56:	0431      	lsls	r1, r6, #16
 8000c58:	4666      	mov	r6, ip
 8000c5a:	9a01      	ldr	r2, [sp, #4]
 8000c5c:	0c09      	lsrs	r1, r1, #16
 8000c5e:	4342      	muls	r2, r0
 8000c60:	0003      	movs	r3, r0
 8000c62:	4331      	orrs	r1, r6
 8000c64:	428a      	cmp	r2, r1
 8000c66:	d904      	bls.n	8000c72 <__aeabi_ddiv+0x156>
 8000c68:	1909      	adds	r1, r1, r4
 8000c6a:	3b01      	subs	r3, #1
 8000c6c:	428c      	cmp	r4, r1
 8000c6e:	d800      	bhi.n	8000c72 <__aeabi_ddiv+0x156>
 8000c70:	e1ed      	b.n	800104e <__aeabi_ddiv+0x532>
 8000c72:	1a88      	subs	r0, r1, r2
 8000c74:	4642      	mov	r2, r8
 8000c76:	0412      	lsls	r2, r2, #16
 8000c78:	431a      	orrs	r2, r3
 8000c7a:	4690      	mov	r8, r2
 8000c7c:	4641      	mov	r1, r8
 8000c7e:	9b00      	ldr	r3, [sp, #0]
 8000c80:	040e      	lsls	r6, r1, #16
 8000c82:	0c1b      	lsrs	r3, r3, #16
 8000c84:	001f      	movs	r7, r3
 8000c86:	9302      	str	r3, [sp, #8]
 8000c88:	9b00      	ldr	r3, [sp, #0]
 8000c8a:	0c36      	lsrs	r6, r6, #16
 8000c8c:	041b      	lsls	r3, r3, #16
 8000c8e:	0c19      	lsrs	r1, r3, #16
 8000c90:	000b      	movs	r3, r1
 8000c92:	4373      	muls	r3, r6
 8000c94:	0c12      	lsrs	r2, r2, #16
 8000c96:	437e      	muls	r6, r7
 8000c98:	9103      	str	r1, [sp, #12]
 8000c9a:	4351      	muls	r1, r2
 8000c9c:	437a      	muls	r2, r7
 8000c9e:	0c1f      	lsrs	r7, r3, #16
 8000ca0:	46bc      	mov	ip, r7
 8000ca2:	1876      	adds	r6, r6, r1
 8000ca4:	4466      	add	r6, ip
 8000ca6:	42b1      	cmp	r1, r6
 8000ca8:	d903      	bls.n	8000cb2 <__aeabi_ddiv+0x196>
 8000caa:	2180      	movs	r1, #128	; 0x80
 8000cac:	0249      	lsls	r1, r1, #9
 8000cae:	468c      	mov	ip, r1
 8000cb0:	4462      	add	r2, ip
 8000cb2:	0c31      	lsrs	r1, r6, #16
 8000cb4:	188a      	adds	r2, r1, r2
 8000cb6:	0431      	lsls	r1, r6, #16
 8000cb8:	041e      	lsls	r6, r3, #16
 8000cba:	0c36      	lsrs	r6, r6, #16
 8000cbc:	198e      	adds	r6, r1, r6
 8000cbe:	4290      	cmp	r0, r2
 8000cc0:	d302      	bcc.n	8000cc8 <__aeabi_ddiv+0x1ac>
 8000cc2:	d112      	bne.n	8000cea <__aeabi_ddiv+0x1ce>
 8000cc4:	42b5      	cmp	r5, r6
 8000cc6:	d210      	bcs.n	8000cea <__aeabi_ddiv+0x1ce>
 8000cc8:	4643      	mov	r3, r8
 8000cca:	1e59      	subs	r1, r3, #1
 8000ccc:	9b00      	ldr	r3, [sp, #0]
 8000cce:	469c      	mov	ip, r3
 8000cd0:	4465      	add	r5, ip
 8000cd2:	001f      	movs	r7, r3
 8000cd4:	429d      	cmp	r5, r3
 8000cd6:	419b      	sbcs	r3, r3
 8000cd8:	425b      	negs	r3, r3
 8000cda:	191b      	adds	r3, r3, r4
 8000cdc:	18c0      	adds	r0, r0, r3
 8000cde:	4284      	cmp	r4, r0
 8000ce0:	d200      	bcs.n	8000ce4 <__aeabi_ddiv+0x1c8>
 8000ce2:	e1a0      	b.n	8001026 <__aeabi_ddiv+0x50a>
 8000ce4:	d100      	bne.n	8000ce8 <__aeabi_ddiv+0x1cc>
 8000ce6:	e19b      	b.n	8001020 <__aeabi_ddiv+0x504>
 8000ce8:	4688      	mov	r8, r1
 8000cea:	1bae      	subs	r6, r5, r6
 8000cec:	42b5      	cmp	r5, r6
 8000cee:	41ad      	sbcs	r5, r5
 8000cf0:	1a80      	subs	r0, r0, r2
 8000cf2:	426d      	negs	r5, r5
 8000cf4:	1b40      	subs	r0, r0, r5
 8000cf6:	4284      	cmp	r4, r0
 8000cf8:	d100      	bne.n	8000cfc <__aeabi_ddiv+0x1e0>
 8000cfa:	e1d5      	b.n	80010a8 <__aeabi_ddiv+0x58c>
 8000cfc:	4649      	mov	r1, r9
 8000cfe:	f7ff faa3 	bl	8000248 <__aeabi_uidivmod>
 8000d02:	9a01      	ldr	r2, [sp, #4]
 8000d04:	040b      	lsls	r3, r1, #16
 8000d06:	4342      	muls	r2, r0
 8000d08:	0c31      	lsrs	r1, r6, #16
 8000d0a:	0005      	movs	r5, r0
 8000d0c:	4319      	orrs	r1, r3
 8000d0e:	428a      	cmp	r2, r1
 8000d10:	d900      	bls.n	8000d14 <__aeabi_ddiv+0x1f8>
 8000d12:	e16c      	b.n	8000fee <__aeabi_ddiv+0x4d2>
 8000d14:	1a88      	subs	r0, r1, r2
 8000d16:	4649      	mov	r1, r9
 8000d18:	f7ff fa96 	bl	8000248 <__aeabi_uidivmod>
 8000d1c:	9a01      	ldr	r2, [sp, #4]
 8000d1e:	0436      	lsls	r6, r6, #16
 8000d20:	4342      	muls	r2, r0
 8000d22:	0409      	lsls	r1, r1, #16
 8000d24:	0c36      	lsrs	r6, r6, #16
 8000d26:	0003      	movs	r3, r0
 8000d28:	430e      	orrs	r6, r1
 8000d2a:	42b2      	cmp	r2, r6
 8000d2c:	d900      	bls.n	8000d30 <__aeabi_ddiv+0x214>
 8000d2e:	e153      	b.n	8000fd8 <__aeabi_ddiv+0x4bc>
 8000d30:	9803      	ldr	r0, [sp, #12]
 8000d32:	1ab6      	subs	r6, r6, r2
 8000d34:	0002      	movs	r2, r0
 8000d36:	042d      	lsls	r5, r5, #16
 8000d38:	431d      	orrs	r5, r3
 8000d3a:	9f02      	ldr	r7, [sp, #8]
 8000d3c:	042b      	lsls	r3, r5, #16
 8000d3e:	0c1b      	lsrs	r3, r3, #16
 8000d40:	435a      	muls	r2, r3
 8000d42:	437b      	muls	r3, r7
 8000d44:	469c      	mov	ip, r3
 8000d46:	0c29      	lsrs	r1, r5, #16
 8000d48:	4348      	muls	r0, r1
 8000d4a:	0c13      	lsrs	r3, r2, #16
 8000d4c:	4484      	add	ip, r0
 8000d4e:	4463      	add	r3, ip
 8000d50:	4379      	muls	r1, r7
 8000d52:	4298      	cmp	r0, r3
 8000d54:	d903      	bls.n	8000d5e <__aeabi_ddiv+0x242>
 8000d56:	2080      	movs	r0, #128	; 0x80
 8000d58:	0240      	lsls	r0, r0, #9
 8000d5a:	4684      	mov	ip, r0
 8000d5c:	4461      	add	r1, ip
 8000d5e:	0c18      	lsrs	r0, r3, #16
 8000d60:	0412      	lsls	r2, r2, #16
 8000d62:	041b      	lsls	r3, r3, #16
 8000d64:	0c12      	lsrs	r2, r2, #16
 8000d66:	1841      	adds	r1, r0, r1
 8000d68:	189b      	adds	r3, r3, r2
 8000d6a:	428e      	cmp	r6, r1
 8000d6c:	d200      	bcs.n	8000d70 <__aeabi_ddiv+0x254>
 8000d6e:	e0ff      	b.n	8000f70 <__aeabi_ddiv+0x454>
 8000d70:	d100      	bne.n	8000d74 <__aeabi_ddiv+0x258>
 8000d72:	e0fa      	b.n	8000f6a <__aeabi_ddiv+0x44e>
 8000d74:	2301      	movs	r3, #1
 8000d76:	431d      	orrs	r5, r3
 8000d78:	4a49      	ldr	r2, [pc, #292]	; (8000ea0 <__aeabi_ddiv+0x384>)
 8000d7a:	445a      	add	r2, fp
 8000d7c:	2a00      	cmp	r2, #0
 8000d7e:	dc00      	bgt.n	8000d82 <__aeabi_ddiv+0x266>
 8000d80:	e0aa      	b.n	8000ed8 <__aeabi_ddiv+0x3bc>
 8000d82:	076b      	lsls	r3, r5, #29
 8000d84:	d000      	beq.n	8000d88 <__aeabi_ddiv+0x26c>
 8000d86:	e13d      	b.n	8001004 <__aeabi_ddiv+0x4e8>
 8000d88:	08ed      	lsrs	r5, r5, #3
 8000d8a:	4643      	mov	r3, r8
 8000d8c:	01db      	lsls	r3, r3, #7
 8000d8e:	d506      	bpl.n	8000d9e <__aeabi_ddiv+0x282>
 8000d90:	4642      	mov	r2, r8
 8000d92:	4b44      	ldr	r3, [pc, #272]	; (8000ea4 <__aeabi_ddiv+0x388>)
 8000d94:	401a      	ands	r2, r3
 8000d96:	4690      	mov	r8, r2
 8000d98:	2280      	movs	r2, #128	; 0x80
 8000d9a:	00d2      	lsls	r2, r2, #3
 8000d9c:	445a      	add	r2, fp
 8000d9e:	4b42      	ldr	r3, [pc, #264]	; (8000ea8 <__aeabi_ddiv+0x38c>)
 8000da0:	429a      	cmp	r2, r3
 8000da2:	dd00      	ble.n	8000da6 <__aeabi_ddiv+0x28a>
 8000da4:	e71f      	b.n	8000be6 <__aeabi_ddiv+0xca>
 8000da6:	4643      	mov	r3, r8
 8000da8:	075b      	lsls	r3, r3, #29
 8000daa:	431d      	orrs	r5, r3
 8000dac:	4643      	mov	r3, r8
 8000dae:	0552      	lsls	r2, r2, #21
 8000db0:	025c      	lsls	r4, r3, #9
 8000db2:	0b24      	lsrs	r4, r4, #12
 8000db4:	0d53      	lsrs	r3, r2, #21
 8000db6:	e708      	b.n	8000bca <__aeabi_ddiv+0xae>
 8000db8:	4652      	mov	r2, sl
 8000dba:	4322      	orrs	r2, r4
 8000dbc:	d100      	bne.n	8000dc0 <__aeabi_ddiv+0x2a4>
 8000dbe:	e07b      	b.n	8000eb8 <__aeabi_ddiv+0x39c>
 8000dc0:	2c00      	cmp	r4, #0
 8000dc2:	d100      	bne.n	8000dc6 <__aeabi_ddiv+0x2aa>
 8000dc4:	e0fa      	b.n	8000fbc <__aeabi_ddiv+0x4a0>
 8000dc6:	0020      	movs	r0, r4
 8000dc8:	f001 f952 	bl	8002070 <__clzsi2>
 8000dcc:	0002      	movs	r2, r0
 8000dce:	3a0b      	subs	r2, #11
 8000dd0:	231d      	movs	r3, #29
 8000dd2:	0001      	movs	r1, r0
 8000dd4:	1a9b      	subs	r3, r3, r2
 8000dd6:	4652      	mov	r2, sl
 8000dd8:	3908      	subs	r1, #8
 8000dda:	40da      	lsrs	r2, r3
 8000ddc:	408c      	lsls	r4, r1
 8000dde:	4314      	orrs	r4, r2
 8000de0:	4652      	mov	r2, sl
 8000de2:	408a      	lsls	r2, r1
 8000de4:	4b31      	ldr	r3, [pc, #196]	; (8000eac <__aeabi_ddiv+0x390>)
 8000de6:	4458      	add	r0, fp
 8000de8:	469b      	mov	fp, r3
 8000dea:	4483      	add	fp, r0
 8000dec:	2000      	movs	r0, #0
 8000dee:	e6d5      	b.n	8000b9c <__aeabi_ddiv+0x80>
 8000df0:	464b      	mov	r3, r9
 8000df2:	4323      	orrs	r3, r4
 8000df4:	4698      	mov	r8, r3
 8000df6:	d044      	beq.n	8000e82 <__aeabi_ddiv+0x366>
 8000df8:	2c00      	cmp	r4, #0
 8000dfa:	d100      	bne.n	8000dfe <__aeabi_ddiv+0x2e2>
 8000dfc:	e0ce      	b.n	8000f9c <__aeabi_ddiv+0x480>
 8000dfe:	0020      	movs	r0, r4
 8000e00:	f001 f936 	bl	8002070 <__clzsi2>
 8000e04:	0001      	movs	r1, r0
 8000e06:	0002      	movs	r2, r0
 8000e08:	390b      	subs	r1, #11
 8000e0a:	231d      	movs	r3, #29
 8000e0c:	1a5b      	subs	r3, r3, r1
 8000e0e:	4649      	mov	r1, r9
 8000e10:	0010      	movs	r0, r2
 8000e12:	40d9      	lsrs	r1, r3
 8000e14:	3808      	subs	r0, #8
 8000e16:	4084      	lsls	r4, r0
 8000e18:	000b      	movs	r3, r1
 8000e1a:	464d      	mov	r5, r9
 8000e1c:	4323      	orrs	r3, r4
 8000e1e:	4698      	mov	r8, r3
 8000e20:	4085      	lsls	r5, r0
 8000e22:	4823      	ldr	r0, [pc, #140]	; (8000eb0 <__aeabi_ddiv+0x394>)
 8000e24:	1a83      	subs	r3, r0, r2
 8000e26:	469b      	mov	fp, r3
 8000e28:	2300      	movs	r3, #0
 8000e2a:	4699      	mov	r9, r3
 8000e2c:	9300      	str	r3, [sp, #0]
 8000e2e:	e69a      	b.n	8000b66 <__aeabi_ddiv+0x4a>
 8000e30:	464b      	mov	r3, r9
 8000e32:	4323      	orrs	r3, r4
 8000e34:	4698      	mov	r8, r3
 8000e36:	d11d      	bne.n	8000e74 <__aeabi_ddiv+0x358>
 8000e38:	2308      	movs	r3, #8
 8000e3a:	4699      	mov	r9, r3
 8000e3c:	3b06      	subs	r3, #6
 8000e3e:	2500      	movs	r5, #0
 8000e40:	4683      	mov	fp, r0
 8000e42:	9300      	str	r3, [sp, #0]
 8000e44:	e68f      	b.n	8000b66 <__aeabi_ddiv+0x4a>
 8000e46:	4652      	mov	r2, sl
 8000e48:	4322      	orrs	r2, r4
 8000e4a:	d109      	bne.n	8000e60 <__aeabi_ddiv+0x344>
 8000e4c:	2302      	movs	r3, #2
 8000e4e:	4649      	mov	r1, r9
 8000e50:	4319      	orrs	r1, r3
 8000e52:	4b18      	ldr	r3, [pc, #96]	; (8000eb4 <__aeabi_ddiv+0x398>)
 8000e54:	4689      	mov	r9, r1
 8000e56:	469c      	mov	ip, r3
 8000e58:	2400      	movs	r4, #0
 8000e5a:	2002      	movs	r0, #2
 8000e5c:	44e3      	add	fp, ip
 8000e5e:	e69d      	b.n	8000b9c <__aeabi_ddiv+0x80>
 8000e60:	2303      	movs	r3, #3
 8000e62:	464a      	mov	r2, r9
 8000e64:	431a      	orrs	r2, r3
 8000e66:	4b13      	ldr	r3, [pc, #76]	; (8000eb4 <__aeabi_ddiv+0x398>)
 8000e68:	4691      	mov	r9, r2
 8000e6a:	469c      	mov	ip, r3
 8000e6c:	4652      	mov	r2, sl
 8000e6e:	2003      	movs	r0, #3
 8000e70:	44e3      	add	fp, ip
 8000e72:	e693      	b.n	8000b9c <__aeabi_ddiv+0x80>
 8000e74:	230c      	movs	r3, #12
 8000e76:	4699      	mov	r9, r3
 8000e78:	3b09      	subs	r3, #9
 8000e7a:	46a0      	mov	r8, r4
 8000e7c:	4683      	mov	fp, r0
 8000e7e:	9300      	str	r3, [sp, #0]
 8000e80:	e671      	b.n	8000b66 <__aeabi_ddiv+0x4a>
 8000e82:	2304      	movs	r3, #4
 8000e84:	4699      	mov	r9, r3
 8000e86:	2300      	movs	r3, #0
 8000e88:	469b      	mov	fp, r3
 8000e8a:	3301      	adds	r3, #1
 8000e8c:	2500      	movs	r5, #0
 8000e8e:	9300      	str	r3, [sp, #0]
 8000e90:	e669      	b.n	8000b66 <__aeabi_ddiv+0x4a>
 8000e92:	46c0      	nop			; (mov r8, r8)
 8000e94:	000007ff 	.word	0x000007ff
 8000e98:	fffffc01 	.word	0xfffffc01
 8000e9c:	08008e70 	.word	0x08008e70
 8000ea0:	000003ff 	.word	0x000003ff
 8000ea4:	feffffff 	.word	0xfeffffff
 8000ea8:	000007fe 	.word	0x000007fe
 8000eac:	000003f3 	.word	0x000003f3
 8000eb0:	fffffc0d 	.word	0xfffffc0d
 8000eb4:	fffff801 	.word	0xfffff801
 8000eb8:	4649      	mov	r1, r9
 8000eba:	2301      	movs	r3, #1
 8000ebc:	4319      	orrs	r1, r3
 8000ebe:	4689      	mov	r9, r1
 8000ec0:	2400      	movs	r4, #0
 8000ec2:	2001      	movs	r0, #1
 8000ec4:	e66a      	b.n	8000b9c <__aeabi_ddiv+0x80>
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	2480      	movs	r4, #128	; 0x80
 8000eca:	469a      	mov	sl, r3
 8000ecc:	2500      	movs	r5, #0
 8000ece:	4b8a      	ldr	r3, [pc, #552]	; (80010f8 <__aeabi_ddiv+0x5dc>)
 8000ed0:	0324      	lsls	r4, r4, #12
 8000ed2:	e67a      	b.n	8000bca <__aeabi_ddiv+0xae>
 8000ed4:	2501      	movs	r5, #1
 8000ed6:	426d      	negs	r5, r5
 8000ed8:	2301      	movs	r3, #1
 8000eda:	1a9b      	subs	r3, r3, r2
 8000edc:	2b38      	cmp	r3, #56	; 0x38
 8000ede:	dd00      	ble.n	8000ee2 <__aeabi_ddiv+0x3c6>
 8000ee0:	e670      	b.n	8000bc4 <__aeabi_ddiv+0xa8>
 8000ee2:	2b1f      	cmp	r3, #31
 8000ee4:	dc00      	bgt.n	8000ee8 <__aeabi_ddiv+0x3cc>
 8000ee6:	e0bf      	b.n	8001068 <__aeabi_ddiv+0x54c>
 8000ee8:	211f      	movs	r1, #31
 8000eea:	4249      	negs	r1, r1
 8000eec:	1a8a      	subs	r2, r1, r2
 8000eee:	4641      	mov	r1, r8
 8000ef0:	40d1      	lsrs	r1, r2
 8000ef2:	000a      	movs	r2, r1
 8000ef4:	2b20      	cmp	r3, #32
 8000ef6:	d004      	beq.n	8000f02 <__aeabi_ddiv+0x3e6>
 8000ef8:	4641      	mov	r1, r8
 8000efa:	4b80      	ldr	r3, [pc, #512]	; (80010fc <__aeabi_ddiv+0x5e0>)
 8000efc:	445b      	add	r3, fp
 8000efe:	4099      	lsls	r1, r3
 8000f00:	430d      	orrs	r5, r1
 8000f02:	1e6b      	subs	r3, r5, #1
 8000f04:	419d      	sbcs	r5, r3
 8000f06:	2307      	movs	r3, #7
 8000f08:	432a      	orrs	r2, r5
 8000f0a:	001d      	movs	r5, r3
 8000f0c:	2400      	movs	r4, #0
 8000f0e:	4015      	ands	r5, r2
 8000f10:	4213      	tst	r3, r2
 8000f12:	d100      	bne.n	8000f16 <__aeabi_ddiv+0x3fa>
 8000f14:	e0d4      	b.n	80010c0 <__aeabi_ddiv+0x5a4>
 8000f16:	210f      	movs	r1, #15
 8000f18:	2300      	movs	r3, #0
 8000f1a:	4011      	ands	r1, r2
 8000f1c:	2904      	cmp	r1, #4
 8000f1e:	d100      	bne.n	8000f22 <__aeabi_ddiv+0x406>
 8000f20:	e0cb      	b.n	80010ba <__aeabi_ddiv+0x59e>
 8000f22:	1d11      	adds	r1, r2, #4
 8000f24:	4291      	cmp	r1, r2
 8000f26:	4192      	sbcs	r2, r2
 8000f28:	4252      	negs	r2, r2
 8000f2a:	189b      	adds	r3, r3, r2
 8000f2c:	000a      	movs	r2, r1
 8000f2e:	0219      	lsls	r1, r3, #8
 8000f30:	d400      	bmi.n	8000f34 <__aeabi_ddiv+0x418>
 8000f32:	e0c2      	b.n	80010ba <__aeabi_ddiv+0x59e>
 8000f34:	2301      	movs	r3, #1
 8000f36:	2400      	movs	r4, #0
 8000f38:	2500      	movs	r5, #0
 8000f3a:	e646      	b.n	8000bca <__aeabi_ddiv+0xae>
 8000f3c:	2380      	movs	r3, #128	; 0x80
 8000f3e:	4641      	mov	r1, r8
 8000f40:	031b      	lsls	r3, r3, #12
 8000f42:	4219      	tst	r1, r3
 8000f44:	d008      	beq.n	8000f58 <__aeabi_ddiv+0x43c>
 8000f46:	421c      	tst	r4, r3
 8000f48:	d106      	bne.n	8000f58 <__aeabi_ddiv+0x43c>
 8000f4a:	431c      	orrs	r4, r3
 8000f4c:	0324      	lsls	r4, r4, #12
 8000f4e:	46ba      	mov	sl, r7
 8000f50:	0015      	movs	r5, r2
 8000f52:	4b69      	ldr	r3, [pc, #420]	; (80010f8 <__aeabi_ddiv+0x5dc>)
 8000f54:	0b24      	lsrs	r4, r4, #12
 8000f56:	e638      	b.n	8000bca <__aeabi_ddiv+0xae>
 8000f58:	2480      	movs	r4, #128	; 0x80
 8000f5a:	4643      	mov	r3, r8
 8000f5c:	0324      	lsls	r4, r4, #12
 8000f5e:	431c      	orrs	r4, r3
 8000f60:	0324      	lsls	r4, r4, #12
 8000f62:	46b2      	mov	sl, r6
 8000f64:	4b64      	ldr	r3, [pc, #400]	; (80010f8 <__aeabi_ddiv+0x5dc>)
 8000f66:	0b24      	lsrs	r4, r4, #12
 8000f68:	e62f      	b.n	8000bca <__aeabi_ddiv+0xae>
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	d100      	bne.n	8000f70 <__aeabi_ddiv+0x454>
 8000f6e:	e703      	b.n	8000d78 <__aeabi_ddiv+0x25c>
 8000f70:	19a6      	adds	r6, r4, r6
 8000f72:	1e68      	subs	r0, r5, #1
 8000f74:	42a6      	cmp	r6, r4
 8000f76:	d200      	bcs.n	8000f7a <__aeabi_ddiv+0x45e>
 8000f78:	e08d      	b.n	8001096 <__aeabi_ddiv+0x57a>
 8000f7a:	428e      	cmp	r6, r1
 8000f7c:	d200      	bcs.n	8000f80 <__aeabi_ddiv+0x464>
 8000f7e:	e0a3      	b.n	80010c8 <__aeabi_ddiv+0x5ac>
 8000f80:	d100      	bne.n	8000f84 <__aeabi_ddiv+0x468>
 8000f82:	e0b3      	b.n	80010ec <__aeabi_ddiv+0x5d0>
 8000f84:	0005      	movs	r5, r0
 8000f86:	e6f5      	b.n	8000d74 <__aeabi_ddiv+0x258>
 8000f88:	42aa      	cmp	r2, r5
 8000f8a:	d900      	bls.n	8000f8e <__aeabi_ddiv+0x472>
 8000f8c:	e639      	b.n	8000c02 <__aeabi_ddiv+0xe6>
 8000f8e:	4643      	mov	r3, r8
 8000f90:	07de      	lsls	r6, r3, #31
 8000f92:	0858      	lsrs	r0, r3, #1
 8000f94:	086b      	lsrs	r3, r5, #1
 8000f96:	431e      	orrs	r6, r3
 8000f98:	07ed      	lsls	r5, r5, #31
 8000f9a:	e639      	b.n	8000c10 <__aeabi_ddiv+0xf4>
 8000f9c:	4648      	mov	r0, r9
 8000f9e:	f001 f867 	bl	8002070 <__clzsi2>
 8000fa2:	0001      	movs	r1, r0
 8000fa4:	0002      	movs	r2, r0
 8000fa6:	3115      	adds	r1, #21
 8000fa8:	3220      	adds	r2, #32
 8000faa:	291c      	cmp	r1, #28
 8000fac:	dc00      	bgt.n	8000fb0 <__aeabi_ddiv+0x494>
 8000fae:	e72c      	b.n	8000e0a <__aeabi_ddiv+0x2ee>
 8000fb0:	464b      	mov	r3, r9
 8000fb2:	3808      	subs	r0, #8
 8000fb4:	4083      	lsls	r3, r0
 8000fb6:	2500      	movs	r5, #0
 8000fb8:	4698      	mov	r8, r3
 8000fba:	e732      	b.n	8000e22 <__aeabi_ddiv+0x306>
 8000fbc:	f001 f858 	bl	8002070 <__clzsi2>
 8000fc0:	0003      	movs	r3, r0
 8000fc2:	001a      	movs	r2, r3
 8000fc4:	3215      	adds	r2, #21
 8000fc6:	3020      	adds	r0, #32
 8000fc8:	2a1c      	cmp	r2, #28
 8000fca:	dc00      	bgt.n	8000fce <__aeabi_ddiv+0x4b2>
 8000fcc:	e700      	b.n	8000dd0 <__aeabi_ddiv+0x2b4>
 8000fce:	4654      	mov	r4, sl
 8000fd0:	3b08      	subs	r3, #8
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	409c      	lsls	r4, r3
 8000fd6:	e705      	b.n	8000de4 <__aeabi_ddiv+0x2c8>
 8000fd8:	1936      	adds	r6, r6, r4
 8000fda:	3b01      	subs	r3, #1
 8000fdc:	42b4      	cmp	r4, r6
 8000fde:	d900      	bls.n	8000fe2 <__aeabi_ddiv+0x4c6>
 8000fe0:	e6a6      	b.n	8000d30 <__aeabi_ddiv+0x214>
 8000fe2:	42b2      	cmp	r2, r6
 8000fe4:	d800      	bhi.n	8000fe8 <__aeabi_ddiv+0x4cc>
 8000fe6:	e6a3      	b.n	8000d30 <__aeabi_ddiv+0x214>
 8000fe8:	1e83      	subs	r3, r0, #2
 8000fea:	1936      	adds	r6, r6, r4
 8000fec:	e6a0      	b.n	8000d30 <__aeabi_ddiv+0x214>
 8000fee:	1909      	adds	r1, r1, r4
 8000ff0:	3d01      	subs	r5, #1
 8000ff2:	428c      	cmp	r4, r1
 8000ff4:	d900      	bls.n	8000ff8 <__aeabi_ddiv+0x4dc>
 8000ff6:	e68d      	b.n	8000d14 <__aeabi_ddiv+0x1f8>
 8000ff8:	428a      	cmp	r2, r1
 8000ffa:	d800      	bhi.n	8000ffe <__aeabi_ddiv+0x4e2>
 8000ffc:	e68a      	b.n	8000d14 <__aeabi_ddiv+0x1f8>
 8000ffe:	1e85      	subs	r5, r0, #2
 8001000:	1909      	adds	r1, r1, r4
 8001002:	e687      	b.n	8000d14 <__aeabi_ddiv+0x1f8>
 8001004:	230f      	movs	r3, #15
 8001006:	402b      	ands	r3, r5
 8001008:	2b04      	cmp	r3, #4
 800100a:	d100      	bne.n	800100e <__aeabi_ddiv+0x4f2>
 800100c:	e6bc      	b.n	8000d88 <__aeabi_ddiv+0x26c>
 800100e:	2305      	movs	r3, #5
 8001010:	425b      	negs	r3, r3
 8001012:	42ab      	cmp	r3, r5
 8001014:	419b      	sbcs	r3, r3
 8001016:	3504      	adds	r5, #4
 8001018:	425b      	negs	r3, r3
 800101a:	08ed      	lsrs	r5, r5, #3
 800101c:	4498      	add	r8, r3
 800101e:	e6b4      	b.n	8000d8a <__aeabi_ddiv+0x26e>
 8001020:	42af      	cmp	r7, r5
 8001022:	d900      	bls.n	8001026 <__aeabi_ddiv+0x50a>
 8001024:	e660      	b.n	8000ce8 <__aeabi_ddiv+0x1cc>
 8001026:	4282      	cmp	r2, r0
 8001028:	d804      	bhi.n	8001034 <__aeabi_ddiv+0x518>
 800102a:	d000      	beq.n	800102e <__aeabi_ddiv+0x512>
 800102c:	e65c      	b.n	8000ce8 <__aeabi_ddiv+0x1cc>
 800102e:	42ae      	cmp	r6, r5
 8001030:	d800      	bhi.n	8001034 <__aeabi_ddiv+0x518>
 8001032:	e659      	b.n	8000ce8 <__aeabi_ddiv+0x1cc>
 8001034:	2302      	movs	r3, #2
 8001036:	425b      	negs	r3, r3
 8001038:	469c      	mov	ip, r3
 800103a:	9b00      	ldr	r3, [sp, #0]
 800103c:	44e0      	add	r8, ip
 800103e:	469c      	mov	ip, r3
 8001040:	4465      	add	r5, ip
 8001042:	429d      	cmp	r5, r3
 8001044:	419b      	sbcs	r3, r3
 8001046:	425b      	negs	r3, r3
 8001048:	191b      	adds	r3, r3, r4
 800104a:	18c0      	adds	r0, r0, r3
 800104c:	e64d      	b.n	8000cea <__aeabi_ddiv+0x1ce>
 800104e:	428a      	cmp	r2, r1
 8001050:	d800      	bhi.n	8001054 <__aeabi_ddiv+0x538>
 8001052:	e60e      	b.n	8000c72 <__aeabi_ddiv+0x156>
 8001054:	1e83      	subs	r3, r0, #2
 8001056:	1909      	adds	r1, r1, r4
 8001058:	e60b      	b.n	8000c72 <__aeabi_ddiv+0x156>
 800105a:	428a      	cmp	r2, r1
 800105c:	d800      	bhi.n	8001060 <__aeabi_ddiv+0x544>
 800105e:	e5f4      	b.n	8000c4a <__aeabi_ddiv+0x12e>
 8001060:	1e83      	subs	r3, r0, #2
 8001062:	4698      	mov	r8, r3
 8001064:	1909      	adds	r1, r1, r4
 8001066:	e5f0      	b.n	8000c4a <__aeabi_ddiv+0x12e>
 8001068:	4925      	ldr	r1, [pc, #148]	; (8001100 <__aeabi_ddiv+0x5e4>)
 800106a:	0028      	movs	r0, r5
 800106c:	4459      	add	r1, fp
 800106e:	408d      	lsls	r5, r1
 8001070:	4642      	mov	r2, r8
 8001072:	408a      	lsls	r2, r1
 8001074:	1e69      	subs	r1, r5, #1
 8001076:	418d      	sbcs	r5, r1
 8001078:	4641      	mov	r1, r8
 800107a:	40d8      	lsrs	r0, r3
 800107c:	40d9      	lsrs	r1, r3
 800107e:	4302      	orrs	r2, r0
 8001080:	432a      	orrs	r2, r5
 8001082:	000b      	movs	r3, r1
 8001084:	0751      	lsls	r1, r2, #29
 8001086:	d100      	bne.n	800108a <__aeabi_ddiv+0x56e>
 8001088:	e751      	b.n	8000f2e <__aeabi_ddiv+0x412>
 800108a:	210f      	movs	r1, #15
 800108c:	4011      	ands	r1, r2
 800108e:	2904      	cmp	r1, #4
 8001090:	d000      	beq.n	8001094 <__aeabi_ddiv+0x578>
 8001092:	e746      	b.n	8000f22 <__aeabi_ddiv+0x406>
 8001094:	e74b      	b.n	8000f2e <__aeabi_ddiv+0x412>
 8001096:	0005      	movs	r5, r0
 8001098:	428e      	cmp	r6, r1
 800109a:	d000      	beq.n	800109e <__aeabi_ddiv+0x582>
 800109c:	e66a      	b.n	8000d74 <__aeabi_ddiv+0x258>
 800109e:	9a00      	ldr	r2, [sp, #0]
 80010a0:	4293      	cmp	r3, r2
 80010a2:	d000      	beq.n	80010a6 <__aeabi_ddiv+0x58a>
 80010a4:	e666      	b.n	8000d74 <__aeabi_ddiv+0x258>
 80010a6:	e667      	b.n	8000d78 <__aeabi_ddiv+0x25c>
 80010a8:	4a16      	ldr	r2, [pc, #88]	; (8001104 <__aeabi_ddiv+0x5e8>)
 80010aa:	445a      	add	r2, fp
 80010ac:	2a00      	cmp	r2, #0
 80010ae:	dc00      	bgt.n	80010b2 <__aeabi_ddiv+0x596>
 80010b0:	e710      	b.n	8000ed4 <__aeabi_ddiv+0x3b8>
 80010b2:	2301      	movs	r3, #1
 80010b4:	2500      	movs	r5, #0
 80010b6:	4498      	add	r8, r3
 80010b8:	e667      	b.n	8000d8a <__aeabi_ddiv+0x26e>
 80010ba:	075d      	lsls	r5, r3, #29
 80010bc:	025b      	lsls	r3, r3, #9
 80010be:	0b1c      	lsrs	r4, r3, #12
 80010c0:	08d2      	lsrs	r2, r2, #3
 80010c2:	2300      	movs	r3, #0
 80010c4:	4315      	orrs	r5, r2
 80010c6:	e580      	b.n	8000bca <__aeabi_ddiv+0xae>
 80010c8:	9800      	ldr	r0, [sp, #0]
 80010ca:	3d02      	subs	r5, #2
 80010cc:	0042      	lsls	r2, r0, #1
 80010ce:	4282      	cmp	r2, r0
 80010d0:	41bf      	sbcs	r7, r7
 80010d2:	427f      	negs	r7, r7
 80010d4:	193c      	adds	r4, r7, r4
 80010d6:	1936      	adds	r6, r6, r4
 80010d8:	9200      	str	r2, [sp, #0]
 80010da:	e7dd      	b.n	8001098 <__aeabi_ddiv+0x57c>
 80010dc:	2480      	movs	r4, #128	; 0x80
 80010de:	4643      	mov	r3, r8
 80010e0:	0324      	lsls	r4, r4, #12
 80010e2:	431c      	orrs	r4, r3
 80010e4:	0324      	lsls	r4, r4, #12
 80010e6:	4b04      	ldr	r3, [pc, #16]	; (80010f8 <__aeabi_ddiv+0x5dc>)
 80010e8:	0b24      	lsrs	r4, r4, #12
 80010ea:	e56e      	b.n	8000bca <__aeabi_ddiv+0xae>
 80010ec:	9a00      	ldr	r2, [sp, #0]
 80010ee:	429a      	cmp	r2, r3
 80010f0:	d3ea      	bcc.n	80010c8 <__aeabi_ddiv+0x5ac>
 80010f2:	0005      	movs	r5, r0
 80010f4:	e7d3      	b.n	800109e <__aeabi_ddiv+0x582>
 80010f6:	46c0      	nop			; (mov r8, r8)
 80010f8:	000007ff 	.word	0x000007ff
 80010fc:	0000043e 	.word	0x0000043e
 8001100:	0000041e 	.word	0x0000041e
 8001104:	000003ff 	.word	0x000003ff

08001108 <__eqdf2>:
 8001108:	b5f0      	push	{r4, r5, r6, r7, lr}
 800110a:	464e      	mov	r6, r9
 800110c:	4645      	mov	r5, r8
 800110e:	46de      	mov	lr, fp
 8001110:	4657      	mov	r7, sl
 8001112:	4690      	mov	r8, r2
 8001114:	b5e0      	push	{r5, r6, r7, lr}
 8001116:	0017      	movs	r7, r2
 8001118:	031a      	lsls	r2, r3, #12
 800111a:	0b12      	lsrs	r2, r2, #12
 800111c:	0005      	movs	r5, r0
 800111e:	4684      	mov	ip, r0
 8001120:	4819      	ldr	r0, [pc, #100]	; (8001188 <__eqdf2+0x80>)
 8001122:	030e      	lsls	r6, r1, #12
 8001124:	004c      	lsls	r4, r1, #1
 8001126:	4691      	mov	r9, r2
 8001128:	005a      	lsls	r2, r3, #1
 800112a:	0fdb      	lsrs	r3, r3, #31
 800112c:	469b      	mov	fp, r3
 800112e:	0b36      	lsrs	r6, r6, #12
 8001130:	0d64      	lsrs	r4, r4, #21
 8001132:	0fc9      	lsrs	r1, r1, #31
 8001134:	0d52      	lsrs	r2, r2, #21
 8001136:	4284      	cmp	r4, r0
 8001138:	d019      	beq.n	800116e <__eqdf2+0x66>
 800113a:	4282      	cmp	r2, r0
 800113c:	d010      	beq.n	8001160 <__eqdf2+0x58>
 800113e:	2001      	movs	r0, #1
 8001140:	4294      	cmp	r4, r2
 8001142:	d10e      	bne.n	8001162 <__eqdf2+0x5a>
 8001144:	454e      	cmp	r6, r9
 8001146:	d10c      	bne.n	8001162 <__eqdf2+0x5a>
 8001148:	2001      	movs	r0, #1
 800114a:	45c4      	cmp	ip, r8
 800114c:	d109      	bne.n	8001162 <__eqdf2+0x5a>
 800114e:	4559      	cmp	r1, fp
 8001150:	d017      	beq.n	8001182 <__eqdf2+0x7a>
 8001152:	2c00      	cmp	r4, #0
 8001154:	d105      	bne.n	8001162 <__eqdf2+0x5a>
 8001156:	0030      	movs	r0, r6
 8001158:	4328      	orrs	r0, r5
 800115a:	1e43      	subs	r3, r0, #1
 800115c:	4198      	sbcs	r0, r3
 800115e:	e000      	b.n	8001162 <__eqdf2+0x5a>
 8001160:	2001      	movs	r0, #1
 8001162:	bcf0      	pop	{r4, r5, r6, r7}
 8001164:	46bb      	mov	fp, r7
 8001166:	46b2      	mov	sl, r6
 8001168:	46a9      	mov	r9, r5
 800116a:	46a0      	mov	r8, r4
 800116c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800116e:	0033      	movs	r3, r6
 8001170:	2001      	movs	r0, #1
 8001172:	432b      	orrs	r3, r5
 8001174:	d1f5      	bne.n	8001162 <__eqdf2+0x5a>
 8001176:	42a2      	cmp	r2, r4
 8001178:	d1f3      	bne.n	8001162 <__eqdf2+0x5a>
 800117a:	464b      	mov	r3, r9
 800117c:	433b      	orrs	r3, r7
 800117e:	d1f0      	bne.n	8001162 <__eqdf2+0x5a>
 8001180:	e7e2      	b.n	8001148 <__eqdf2+0x40>
 8001182:	2000      	movs	r0, #0
 8001184:	e7ed      	b.n	8001162 <__eqdf2+0x5a>
 8001186:	46c0      	nop			; (mov r8, r8)
 8001188:	000007ff 	.word	0x000007ff

0800118c <__gedf2>:
 800118c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800118e:	4647      	mov	r7, r8
 8001190:	46ce      	mov	lr, r9
 8001192:	0004      	movs	r4, r0
 8001194:	0018      	movs	r0, r3
 8001196:	0016      	movs	r6, r2
 8001198:	031b      	lsls	r3, r3, #12
 800119a:	0b1b      	lsrs	r3, r3, #12
 800119c:	4d2d      	ldr	r5, [pc, #180]	; (8001254 <__gedf2+0xc8>)
 800119e:	004a      	lsls	r2, r1, #1
 80011a0:	4699      	mov	r9, r3
 80011a2:	b580      	push	{r7, lr}
 80011a4:	0043      	lsls	r3, r0, #1
 80011a6:	030f      	lsls	r7, r1, #12
 80011a8:	46a4      	mov	ip, r4
 80011aa:	46b0      	mov	r8, r6
 80011ac:	0b3f      	lsrs	r7, r7, #12
 80011ae:	0d52      	lsrs	r2, r2, #21
 80011b0:	0fc9      	lsrs	r1, r1, #31
 80011b2:	0d5b      	lsrs	r3, r3, #21
 80011b4:	0fc0      	lsrs	r0, r0, #31
 80011b6:	42aa      	cmp	r2, r5
 80011b8:	d021      	beq.n	80011fe <__gedf2+0x72>
 80011ba:	42ab      	cmp	r3, r5
 80011bc:	d013      	beq.n	80011e6 <__gedf2+0x5a>
 80011be:	2a00      	cmp	r2, #0
 80011c0:	d122      	bne.n	8001208 <__gedf2+0x7c>
 80011c2:	433c      	orrs	r4, r7
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d102      	bne.n	80011ce <__gedf2+0x42>
 80011c8:	464d      	mov	r5, r9
 80011ca:	432e      	orrs	r6, r5
 80011cc:	d022      	beq.n	8001214 <__gedf2+0x88>
 80011ce:	2c00      	cmp	r4, #0
 80011d0:	d010      	beq.n	80011f4 <__gedf2+0x68>
 80011d2:	4281      	cmp	r1, r0
 80011d4:	d022      	beq.n	800121c <__gedf2+0x90>
 80011d6:	2002      	movs	r0, #2
 80011d8:	3901      	subs	r1, #1
 80011da:	4008      	ands	r0, r1
 80011dc:	3801      	subs	r0, #1
 80011de:	bcc0      	pop	{r6, r7}
 80011e0:	46b9      	mov	r9, r7
 80011e2:	46b0      	mov	r8, r6
 80011e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80011e6:	464d      	mov	r5, r9
 80011e8:	432e      	orrs	r6, r5
 80011ea:	d129      	bne.n	8001240 <__gedf2+0xb4>
 80011ec:	2a00      	cmp	r2, #0
 80011ee:	d1f0      	bne.n	80011d2 <__gedf2+0x46>
 80011f0:	433c      	orrs	r4, r7
 80011f2:	d1ee      	bne.n	80011d2 <__gedf2+0x46>
 80011f4:	2800      	cmp	r0, #0
 80011f6:	d1f2      	bne.n	80011de <__gedf2+0x52>
 80011f8:	2001      	movs	r0, #1
 80011fa:	4240      	negs	r0, r0
 80011fc:	e7ef      	b.n	80011de <__gedf2+0x52>
 80011fe:	003d      	movs	r5, r7
 8001200:	4325      	orrs	r5, r4
 8001202:	d11d      	bne.n	8001240 <__gedf2+0xb4>
 8001204:	4293      	cmp	r3, r2
 8001206:	d0ee      	beq.n	80011e6 <__gedf2+0x5a>
 8001208:	2b00      	cmp	r3, #0
 800120a:	d1e2      	bne.n	80011d2 <__gedf2+0x46>
 800120c:	464c      	mov	r4, r9
 800120e:	4326      	orrs	r6, r4
 8001210:	d1df      	bne.n	80011d2 <__gedf2+0x46>
 8001212:	e7e0      	b.n	80011d6 <__gedf2+0x4a>
 8001214:	2000      	movs	r0, #0
 8001216:	2c00      	cmp	r4, #0
 8001218:	d0e1      	beq.n	80011de <__gedf2+0x52>
 800121a:	e7dc      	b.n	80011d6 <__gedf2+0x4a>
 800121c:	429a      	cmp	r2, r3
 800121e:	dc0a      	bgt.n	8001236 <__gedf2+0xaa>
 8001220:	dbe8      	blt.n	80011f4 <__gedf2+0x68>
 8001222:	454f      	cmp	r7, r9
 8001224:	d8d7      	bhi.n	80011d6 <__gedf2+0x4a>
 8001226:	d00e      	beq.n	8001246 <__gedf2+0xba>
 8001228:	2000      	movs	r0, #0
 800122a:	454f      	cmp	r7, r9
 800122c:	d2d7      	bcs.n	80011de <__gedf2+0x52>
 800122e:	2900      	cmp	r1, #0
 8001230:	d0e2      	beq.n	80011f8 <__gedf2+0x6c>
 8001232:	0008      	movs	r0, r1
 8001234:	e7d3      	b.n	80011de <__gedf2+0x52>
 8001236:	4243      	negs	r3, r0
 8001238:	4158      	adcs	r0, r3
 800123a:	0040      	lsls	r0, r0, #1
 800123c:	3801      	subs	r0, #1
 800123e:	e7ce      	b.n	80011de <__gedf2+0x52>
 8001240:	2002      	movs	r0, #2
 8001242:	4240      	negs	r0, r0
 8001244:	e7cb      	b.n	80011de <__gedf2+0x52>
 8001246:	45c4      	cmp	ip, r8
 8001248:	d8c5      	bhi.n	80011d6 <__gedf2+0x4a>
 800124a:	2000      	movs	r0, #0
 800124c:	45c4      	cmp	ip, r8
 800124e:	d2c6      	bcs.n	80011de <__gedf2+0x52>
 8001250:	e7ed      	b.n	800122e <__gedf2+0xa2>
 8001252:	46c0      	nop			; (mov r8, r8)
 8001254:	000007ff 	.word	0x000007ff

08001258 <__ledf2>:
 8001258:	b5f0      	push	{r4, r5, r6, r7, lr}
 800125a:	4647      	mov	r7, r8
 800125c:	46ce      	mov	lr, r9
 800125e:	0004      	movs	r4, r0
 8001260:	0018      	movs	r0, r3
 8001262:	0016      	movs	r6, r2
 8001264:	031b      	lsls	r3, r3, #12
 8001266:	0b1b      	lsrs	r3, r3, #12
 8001268:	4d2c      	ldr	r5, [pc, #176]	; (800131c <__ledf2+0xc4>)
 800126a:	004a      	lsls	r2, r1, #1
 800126c:	4699      	mov	r9, r3
 800126e:	b580      	push	{r7, lr}
 8001270:	0043      	lsls	r3, r0, #1
 8001272:	030f      	lsls	r7, r1, #12
 8001274:	46a4      	mov	ip, r4
 8001276:	46b0      	mov	r8, r6
 8001278:	0b3f      	lsrs	r7, r7, #12
 800127a:	0d52      	lsrs	r2, r2, #21
 800127c:	0fc9      	lsrs	r1, r1, #31
 800127e:	0d5b      	lsrs	r3, r3, #21
 8001280:	0fc0      	lsrs	r0, r0, #31
 8001282:	42aa      	cmp	r2, r5
 8001284:	d00d      	beq.n	80012a2 <__ledf2+0x4a>
 8001286:	42ab      	cmp	r3, r5
 8001288:	d010      	beq.n	80012ac <__ledf2+0x54>
 800128a:	2a00      	cmp	r2, #0
 800128c:	d127      	bne.n	80012de <__ledf2+0x86>
 800128e:	433c      	orrs	r4, r7
 8001290:	2b00      	cmp	r3, #0
 8001292:	d111      	bne.n	80012b8 <__ledf2+0x60>
 8001294:	464d      	mov	r5, r9
 8001296:	432e      	orrs	r6, r5
 8001298:	d10e      	bne.n	80012b8 <__ledf2+0x60>
 800129a:	2000      	movs	r0, #0
 800129c:	2c00      	cmp	r4, #0
 800129e:	d015      	beq.n	80012cc <__ledf2+0x74>
 80012a0:	e00e      	b.n	80012c0 <__ledf2+0x68>
 80012a2:	003d      	movs	r5, r7
 80012a4:	4325      	orrs	r5, r4
 80012a6:	d110      	bne.n	80012ca <__ledf2+0x72>
 80012a8:	4293      	cmp	r3, r2
 80012aa:	d118      	bne.n	80012de <__ledf2+0x86>
 80012ac:	464d      	mov	r5, r9
 80012ae:	432e      	orrs	r6, r5
 80012b0:	d10b      	bne.n	80012ca <__ledf2+0x72>
 80012b2:	2a00      	cmp	r2, #0
 80012b4:	d102      	bne.n	80012bc <__ledf2+0x64>
 80012b6:	433c      	orrs	r4, r7
 80012b8:	2c00      	cmp	r4, #0
 80012ba:	d00b      	beq.n	80012d4 <__ledf2+0x7c>
 80012bc:	4281      	cmp	r1, r0
 80012be:	d014      	beq.n	80012ea <__ledf2+0x92>
 80012c0:	2002      	movs	r0, #2
 80012c2:	3901      	subs	r1, #1
 80012c4:	4008      	ands	r0, r1
 80012c6:	3801      	subs	r0, #1
 80012c8:	e000      	b.n	80012cc <__ledf2+0x74>
 80012ca:	2002      	movs	r0, #2
 80012cc:	bcc0      	pop	{r6, r7}
 80012ce:	46b9      	mov	r9, r7
 80012d0:	46b0      	mov	r8, r6
 80012d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80012d4:	2800      	cmp	r0, #0
 80012d6:	d1f9      	bne.n	80012cc <__ledf2+0x74>
 80012d8:	2001      	movs	r0, #1
 80012da:	4240      	negs	r0, r0
 80012dc:	e7f6      	b.n	80012cc <__ledf2+0x74>
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d1ec      	bne.n	80012bc <__ledf2+0x64>
 80012e2:	464c      	mov	r4, r9
 80012e4:	4326      	orrs	r6, r4
 80012e6:	d1e9      	bne.n	80012bc <__ledf2+0x64>
 80012e8:	e7ea      	b.n	80012c0 <__ledf2+0x68>
 80012ea:	429a      	cmp	r2, r3
 80012ec:	dd04      	ble.n	80012f8 <__ledf2+0xa0>
 80012ee:	4243      	negs	r3, r0
 80012f0:	4158      	adcs	r0, r3
 80012f2:	0040      	lsls	r0, r0, #1
 80012f4:	3801      	subs	r0, #1
 80012f6:	e7e9      	b.n	80012cc <__ledf2+0x74>
 80012f8:	429a      	cmp	r2, r3
 80012fa:	dbeb      	blt.n	80012d4 <__ledf2+0x7c>
 80012fc:	454f      	cmp	r7, r9
 80012fe:	d8df      	bhi.n	80012c0 <__ledf2+0x68>
 8001300:	d006      	beq.n	8001310 <__ledf2+0xb8>
 8001302:	2000      	movs	r0, #0
 8001304:	454f      	cmp	r7, r9
 8001306:	d2e1      	bcs.n	80012cc <__ledf2+0x74>
 8001308:	2900      	cmp	r1, #0
 800130a:	d0e5      	beq.n	80012d8 <__ledf2+0x80>
 800130c:	0008      	movs	r0, r1
 800130e:	e7dd      	b.n	80012cc <__ledf2+0x74>
 8001310:	45c4      	cmp	ip, r8
 8001312:	d8d5      	bhi.n	80012c0 <__ledf2+0x68>
 8001314:	2000      	movs	r0, #0
 8001316:	45c4      	cmp	ip, r8
 8001318:	d2d8      	bcs.n	80012cc <__ledf2+0x74>
 800131a:	e7f5      	b.n	8001308 <__ledf2+0xb0>
 800131c:	000007ff 	.word	0x000007ff

08001320 <__aeabi_dmul>:
 8001320:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001322:	4657      	mov	r7, sl
 8001324:	464e      	mov	r6, r9
 8001326:	4645      	mov	r5, r8
 8001328:	46de      	mov	lr, fp
 800132a:	b5e0      	push	{r5, r6, r7, lr}
 800132c:	4698      	mov	r8, r3
 800132e:	030c      	lsls	r4, r1, #12
 8001330:	004b      	lsls	r3, r1, #1
 8001332:	0006      	movs	r6, r0
 8001334:	4692      	mov	sl, r2
 8001336:	b087      	sub	sp, #28
 8001338:	0b24      	lsrs	r4, r4, #12
 800133a:	0d5b      	lsrs	r3, r3, #21
 800133c:	0fcf      	lsrs	r7, r1, #31
 800133e:	2b00      	cmp	r3, #0
 8001340:	d100      	bne.n	8001344 <__aeabi_dmul+0x24>
 8001342:	e15c      	b.n	80015fe <__aeabi_dmul+0x2de>
 8001344:	4ad9      	ldr	r2, [pc, #868]	; (80016ac <__aeabi_dmul+0x38c>)
 8001346:	4293      	cmp	r3, r2
 8001348:	d100      	bne.n	800134c <__aeabi_dmul+0x2c>
 800134a:	e175      	b.n	8001638 <__aeabi_dmul+0x318>
 800134c:	0f42      	lsrs	r2, r0, #29
 800134e:	00e4      	lsls	r4, r4, #3
 8001350:	4314      	orrs	r4, r2
 8001352:	2280      	movs	r2, #128	; 0x80
 8001354:	0412      	lsls	r2, r2, #16
 8001356:	4314      	orrs	r4, r2
 8001358:	4ad5      	ldr	r2, [pc, #852]	; (80016b0 <__aeabi_dmul+0x390>)
 800135a:	00c5      	lsls	r5, r0, #3
 800135c:	4694      	mov	ip, r2
 800135e:	4463      	add	r3, ip
 8001360:	9300      	str	r3, [sp, #0]
 8001362:	2300      	movs	r3, #0
 8001364:	4699      	mov	r9, r3
 8001366:	469b      	mov	fp, r3
 8001368:	4643      	mov	r3, r8
 800136a:	4642      	mov	r2, r8
 800136c:	031e      	lsls	r6, r3, #12
 800136e:	0fd2      	lsrs	r2, r2, #31
 8001370:	005b      	lsls	r3, r3, #1
 8001372:	4650      	mov	r0, sl
 8001374:	4690      	mov	r8, r2
 8001376:	0b36      	lsrs	r6, r6, #12
 8001378:	0d5b      	lsrs	r3, r3, #21
 800137a:	d100      	bne.n	800137e <__aeabi_dmul+0x5e>
 800137c:	e120      	b.n	80015c0 <__aeabi_dmul+0x2a0>
 800137e:	4acb      	ldr	r2, [pc, #812]	; (80016ac <__aeabi_dmul+0x38c>)
 8001380:	4293      	cmp	r3, r2
 8001382:	d100      	bne.n	8001386 <__aeabi_dmul+0x66>
 8001384:	e162      	b.n	800164c <__aeabi_dmul+0x32c>
 8001386:	49ca      	ldr	r1, [pc, #808]	; (80016b0 <__aeabi_dmul+0x390>)
 8001388:	0f42      	lsrs	r2, r0, #29
 800138a:	468c      	mov	ip, r1
 800138c:	9900      	ldr	r1, [sp, #0]
 800138e:	4463      	add	r3, ip
 8001390:	00f6      	lsls	r6, r6, #3
 8001392:	468c      	mov	ip, r1
 8001394:	4316      	orrs	r6, r2
 8001396:	2280      	movs	r2, #128	; 0x80
 8001398:	449c      	add	ip, r3
 800139a:	0412      	lsls	r2, r2, #16
 800139c:	4663      	mov	r3, ip
 800139e:	4316      	orrs	r6, r2
 80013a0:	00c2      	lsls	r2, r0, #3
 80013a2:	2000      	movs	r0, #0
 80013a4:	9300      	str	r3, [sp, #0]
 80013a6:	9900      	ldr	r1, [sp, #0]
 80013a8:	4643      	mov	r3, r8
 80013aa:	3101      	adds	r1, #1
 80013ac:	468c      	mov	ip, r1
 80013ae:	4649      	mov	r1, r9
 80013b0:	407b      	eors	r3, r7
 80013b2:	9301      	str	r3, [sp, #4]
 80013b4:	290f      	cmp	r1, #15
 80013b6:	d826      	bhi.n	8001406 <__aeabi_dmul+0xe6>
 80013b8:	4bbe      	ldr	r3, [pc, #760]	; (80016b4 <__aeabi_dmul+0x394>)
 80013ba:	0089      	lsls	r1, r1, #2
 80013bc:	5859      	ldr	r1, [r3, r1]
 80013be:	468f      	mov	pc, r1
 80013c0:	4643      	mov	r3, r8
 80013c2:	9301      	str	r3, [sp, #4]
 80013c4:	0034      	movs	r4, r6
 80013c6:	0015      	movs	r5, r2
 80013c8:	4683      	mov	fp, r0
 80013ca:	465b      	mov	r3, fp
 80013cc:	2b02      	cmp	r3, #2
 80013ce:	d016      	beq.n	80013fe <__aeabi_dmul+0xde>
 80013d0:	2b03      	cmp	r3, #3
 80013d2:	d100      	bne.n	80013d6 <__aeabi_dmul+0xb6>
 80013d4:	e203      	b.n	80017de <__aeabi_dmul+0x4be>
 80013d6:	2b01      	cmp	r3, #1
 80013d8:	d000      	beq.n	80013dc <__aeabi_dmul+0xbc>
 80013da:	e0cd      	b.n	8001578 <__aeabi_dmul+0x258>
 80013dc:	2200      	movs	r2, #0
 80013de:	2400      	movs	r4, #0
 80013e0:	2500      	movs	r5, #0
 80013e2:	9b01      	ldr	r3, [sp, #4]
 80013e4:	0512      	lsls	r2, r2, #20
 80013e6:	4322      	orrs	r2, r4
 80013e8:	07db      	lsls	r3, r3, #31
 80013ea:	431a      	orrs	r2, r3
 80013ec:	0028      	movs	r0, r5
 80013ee:	0011      	movs	r1, r2
 80013f0:	b007      	add	sp, #28
 80013f2:	bcf0      	pop	{r4, r5, r6, r7}
 80013f4:	46bb      	mov	fp, r7
 80013f6:	46b2      	mov	sl, r6
 80013f8:	46a9      	mov	r9, r5
 80013fa:	46a0      	mov	r8, r4
 80013fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80013fe:	2400      	movs	r4, #0
 8001400:	2500      	movs	r5, #0
 8001402:	4aaa      	ldr	r2, [pc, #680]	; (80016ac <__aeabi_dmul+0x38c>)
 8001404:	e7ed      	b.n	80013e2 <__aeabi_dmul+0xc2>
 8001406:	0c28      	lsrs	r0, r5, #16
 8001408:	042d      	lsls	r5, r5, #16
 800140a:	0c2d      	lsrs	r5, r5, #16
 800140c:	002b      	movs	r3, r5
 800140e:	0c11      	lsrs	r1, r2, #16
 8001410:	0412      	lsls	r2, r2, #16
 8001412:	0c12      	lsrs	r2, r2, #16
 8001414:	4353      	muls	r3, r2
 8001416:	4698      	mov	r8, r3
 8001418:	0013      	movs	r3, r2
 800141a:	002f      	movs	r7, r5
 800141c:	4343      	muls	r3, r0
 800141e:	4699      	mov	r9, r3
 8001420:	434f      	muls	r7, r1
 8001422:	444f      	add	r7, r9
 8001424:	46bb      	mov	fp, r7
 8001426:	4647      	mov	r7, r8
 8001428:	000b      	movs	r3, r1
 800142a:	0c3f      	lsrs	r7, r7, #16
 800142c:	46ba      	mov	sl, r7
 800142e:	4343      	muls	r3, r0
 8001430:	44da      	add	sl, fp
 8001432:	9302      	str	r3, [sp, #8]
 8001434:	45d1      	cmp	r9, sl
 8001436:	d904      	bls.n	8001442 <__aeabi_dmul+0x122>
 8001438:	2780      	movs	r7, #128	; 0x80
 800143a:	027f      	lsls	r7, r7, #9
 800143c:	46b9      	mov	r9, r7
 800143e:	444b      	add	r3, r9
 8001440:	9302      	str	r3, [sp, #8]
 8001442:	4653      	mov	r3, sl
 8001444:	0c1b      	lsrs	r3, r3, #16
 8001446:	469b      	mov	fp, r3
 8001448:	4653      	mov	r3, sl
 800144a:	041f      	lsls	r7, r3, #16
 800144c:	4643      	mov	r3, r8
 800144e:	041b      	lsls	r3, r3, #16
 8001450:	0c1b      	lsrs	r3, r3, #16
 8001452:	4698      	mov	r8, r3
 8001454:	003b      	movs	r3, r7
 8001456:	4443      	add	r3, r8
 8001458:	9304      	str	r3, [sp, #16]
 800145a:	0c33      	lsrs	r3, r6, #16
 800145c:	0436      	lsls	r6, r6, #16
 800145e:	0c36      	lsrs	r6, r6, #16
 8001460:	4698      	mov	r8, r3
 8001462:	0033      	movs	r3, r6
 8001464:	4343      	muls	r3, r0
 8001466:	4699      	mov	r9, r3
 8001468:	4643      	mov	r3, r8
 800146a:	4343      	muls	r3, r0
 800146c:	002f      	movs	r7, r5
 800146e:	469a      	mov	sl, r3
 8001470:	4643      	mov	r3, r8
 8001472:	4377      	muls	r7, r6
 8001474:	435d      	muls	r5, r3
 8001476:	0c38      	lsrs	r0, r7, #16
 8001478:	444d      	add	r5, r9
 800147a:	1945      	adds	r5, r0, r5
 800147c:	45a9      	cmp	r9, r5
 800147e:	d903      	bls.n	8001488 <__aeabi_dmul+0x168>
 8001480:	2380      	movs	r3, #128	; 0x80
 8001482:	025b      	lsls	r3, r3, #9
 8001484:	4699      	mov	r9, r3
 8001486:	44ca      	add	sl, r9
 8001488:	043f      	lsls	r7, r7, #16
 800148a:	0c28      	lsrs	r0, r5, #16
 800148c:	0c3f      	lsrs	r7, r7, #16
 800148e:	042d      	lsls	r5, r5, #16
 8001490:	19ed      	adds	r5, r5, r7
 8001492:	0c27      	lsrs	r7, r4, #16
 8001494:	0424      	lsls	r4, r4, #16
 8001496:	0c24      	lsrs	r4, r4, #16
 8001498:	0003      	movs	r3, r0
 800149a:	0020      	movs	r0, r4
 800149c:	4350      	muls	r0, r2
 800149e:	437a      	muls	r2, r7
 80014a0:	4691      	mov	r9, r2
 80014a2:	003a      	movs	r2, r7
 80014a4:	4453      	add	r3, sl
 80014a6:	9305      	str	r3, [sp, #20]
 80014a8:	0c03      	lsrs	r3, r0, #16
 80014aa:	469a      	mov	sl, r3
 80014ac:	434a      	muls	r2, r1
 80014ae:	4361      	muls	r1, r4
 80014b0:	4449      	add	r1, r9
 80014b2:	4451      	add	r1, sl
 80014b4:	44ab      	add	fp, r5
 80014b6:	4589      	cmp	r9, r1
 80014b8:	d903      	bls.n	80014c2 <__aeabi_dmul+0x1a2>
 80014ba:	2380      	movs	r3, #128	; 0x80
 80014bc:	025b      	lsls	r3, r3, #9
 80014be:	4699      	mov	r9, r3
 80014c0:	444a      	add	r2, r9
 80014c2:	0400      	lsls	r0, r0, #16
 80014c4:	0c0b      	lsrs	r3, r1, #16
 80014c6:	0c00      	lsrs	r0, r0, #16
 80014c8:	0409      	lsls	r1, r1, #16
 80014ca:	1809      	adds	r1, r1, r0
 80014cc:	0020      	movs	r0, r4
 80014ce:	4699      	mov	r9, r3
 80014d0:	4643      	mov	r3, r8
 80014d2:	4370      	muls	r0, r6
 80014d4:	435c      	muls	r4, r3
 80014d6:	437e      	muls	r6, r7
 80014d8:	435f      	muls	r7, r3
 80014da:	0c03      	lsrs	r3, r0, #16
 80014dc:	4698      	mov	r8, r3
 80014de:	19a4      	adds	r4, r4, r6
 80014e0:	4444      	add	r4, r8
 80014e2:	444a      	add	r2, r9
 80014e4:	9703      	str	r7, [sp, #12]
 80014e6:	42a6      	cmp	r6, r4
 80014e8:	d904      	bls.n	80014f4 <__aeabi_dmul+0x1d4>
 80014ea:	2380      	movs	r3, #128	; 0x80
 80014ec:	025b      	lsls	r3, r3, #9
 80014ee:	4698      	mov	r8, r3
 80014f0:	4447      	add	r7, r8
 80014f2:	9703      	str	r7, [sp, #12]
 80014f4:	0423      	lsls	r3, r4, #16
 80014f6:	9e02      	ldr	r6, [sp, #8]
 80014f8:	469a      	mov	sl, r3
 80014fa:	9b05      	ldr	r3, [sp, #20]
 80014fc:	445e      	add	r6, fp
 80014fe:	4698      	mov	r8, r3
 8001500:	42ae      	cmp	r6, r5
 8001502:	41ad      	sbcs	r5, r5
 8001504:	1876      	adds	r6, r6, r1
 8001506:	428e      	cmp	r6, r1
 8001508:	4189      	sbcs	r1, r1
 800150a:	0400      	lsls	r0, r0, #16
 800150c:	0c00      	lsrs	r0, r0, #16
 800150e:	4450      	add	r0, sl
 8001510:	4440      	add	r0, r8
 8001512:	426d      	negs	r5, r5
 8001514:	1947      	adds	r7, r0, r5
 8001516:	46b8      	mov	r8, r7
 8001518:	4693      	mov	fp, r2
 800151a:	4249      	negs	r1, r1
 800151c:	4689      	mov	r9, r1
 800151e:	44c3      	add	fp, r8
 8001520:	44d9      	add	r9, fp
 8001522:	4298      	cmp	r0, r3
 8001524:	4180      	sbcs	r0, r0
 8001526:	45a8      	cmp	r8, r5
 8001528:	41ad      	sbcs	r5, r5
 800152a:	4593      	cmp	fp, r2
 800152c:	4192      	sbcs	r2, r2
 800152e:	4589      	cmp	r9, r1
 8001530:	4189      	sbcs	r1, r1
 8001532:	426d      	negs	r5, r5
 8001534:	4240      	negs	r0, r0
 8001536:	4328      	orrs	r0, r5
 8001538:	0c24      	lsrs	r4, r4, #16
 800153a:	4252      	negs	r2, r2
 800153c:	4249      	negs	r1, r1
 800153e:	430a      	orrs	r2, r1
 8001540:	9b03      	ldr	r3, [sp, #12]
 8001542:	1900      	adds	r0, r0, r4
 8001544:	1880      	adds	r0, r0, r2
 8001546:	18c7      	adds	r7, r0, r3
 8001548:	464b      	mov	r3, r9
 800154a:	0ddc      	lsrs	r4, r3, #23
 800154c:	9b04      	ldr	r3, [sp, #16]
 800154e:	0275      	lsls	r5, r6, #9
 8001550:	431d      	orrs	r5, r3
 8001552:	1e6a      	subs	r2, r5, #1
 8001554:	4195      	sbcs	r5, r2
 8001556:	464b      	mov	r3, r9
 8001558:	0df6      	lsrs	r6, r6, #23
 800155a:	027f      	lsls	r7, r7, #9
 800155c:	4335      	orrs	r5, r6
 800155e:	025a      	lsls	r2, r3, #9
 8001560:	433c      	orrs	r4, r7
 8001562:	4315      	orrs	r5, r2
 8001564:	01fb      	lsls	r3, r7, #7
 8001566:	d400      	bmi.n	800156a <__aeabi_dmul+0x24a>
 8001568:	e11c      	b.n	80017a4 <__aeabi_dmul+0x484>
 800156a:	2101      	movs	r1, #1
 800156c:	086a      	lsrs	r2, r5, #1
 800156e:	400d      	ands	r5, r1
 8001570:	4315      	orrs	r5, r2
 8001572:	07e2      	lsls	r2, r4, #31
 8001574:	4315      	orrs	r5, r2
 8001576:	0864      	lsrs	r4, r4, #1
 8001578:	494f      	ldr	r1, [pc, #316]	; (80016b8 <__aeabi_dmul+0x398>)
 800157a:	4461      	add	r1, ip
 800157c:	2900      	cmp	r1, #0
 800157e:	dc00      	bgt.n	8001582 <__aeabi_dmul+0x262>
 8001580:	e0b0      	b.n	80016e4 <__aeabi_dmul+0x3c4>
 8001582:	076b      	lsls	r3, r5, #29
 8001584:	d009      	beq.n	800159a <__aeabi_dmul+0x27a>
 8001586:	220f      	movs	r2, #15
 8001588:	402a      	ands	r2, r5
 800158a:	2a04      	cmp	r2, #4
 800158c:	d005      	beq.n	800159a <__aeabi_dmul+0x27a>
 800158e:	1d2a      	adds	r2, r5, #4
 8001590:	42aa      	cmp	r2, r5
 8001592:	41ad      	sbcs	r5, r5
 8001594:	426d      	negs	r5, r5
 8001596:	1964      	adds	r4, r4, r5
 8001598:	0015      	movs	r5, r2
 800159a:	01e3      	lsls	r3, r4, #7
 800159c:	d504      	bpl.n	80015a8 <__aeabi_dmul+0x288>
 800159e:	2180      	movs	r1, #128	; 0x80
 80015a0:	4a46      	ldr	r2, [pc, #280]	; (80016bc <__aeabi_dmul+0x39c>)
 80015a2:	00c9      	lsls	r1, r1, #3
 80015a4:	4014      	ands	r4, r2
 80015a6:	4461      	add	r1, ip
 80015a8:	4a45      	ldr	r2, [pc, #276]	; (80016c0 <__aeabi_dmul+0x3a0>)
 80015aa:	4291      	cmp	r1, r2
 80015ac:	dd00      	ble.n	80015b0 <__aeabi_dmul+0x290>
 80015ae:	e726      	b.n	80013fe <__aeabi_dmul+0xde>
 80015b0:	0762      	lsls	r2, r4, #29
 80015b2:	08ed      	lsrs	r5, r5, #3
 80015b4:	0264      	lsls	r4, r4, #9
 80015b6:	0549      	lsls	r1, r1, #21
 80015b8:	4315      	orrs	r5, r2
 80015ba:	0b24      	lsrs	r4, r4, #12
 80015bc:	0d4a      	lsrs	r2, r1, #21
 80015be:	e710      	b.n	80013e2 <__aeabi_dmul+0xc2>
 80015c0:	4652      	mov	r2, sl
 80015c2:	4332      	orrs	r2, r6
 80015c4:	d100      	bne.n	80015c8 <__aeabi_dmul+0x2a8>
 80015c6:	e07f      	b.n	80016c8 <__aeabi_dmul+0x3a8>
 80015c8:	2e00      	cmp	r6, #0
 80015ca:	d100      	bne.n	80015ce <__aeabi_dmul+0x2ae>
 80015cc:	e0dc      	b.n	8001788 <__aeabi_dmul+0x468>
 80015ce:	0030      	movs	r0, r6
 80015d0:	f000 fd4e 	bl	8002070 <__clzsi2>
 80015d4:	0002      	movs	r2, r0
 80015d6:	3a0b      	subs	r2, #11
 80015d8:	231d      	movs	r3, #29
 80015da:	0001      	movs	r1, r0
 80015dc:	1a9b      	subs	r3, r3, r2
 80015de:	4652      	mov	r2, sl
 80015e0:	3908      	subs	r1, #8
 80015e2:	40da      	lsrs	r2, r3
 80015e4:	408e      	lsls	r6, r1
 80015e6:	4316      	orrs	r6, r2
 80015e8:	4652      	mov	r2, sl
 80015ea:	408a      	lsls	r2, r1
 80015ec:	9b00      	ldr	r3, [sp, #0]
 80015ee:	4935      	ldr	r1, [pc, #212]	; (80016c4 <__aeabi_dmul+0x3a4>)
 80015f0:	1a18      	subs	r0, r3, r0
 80015f2:	0003      	movs	r3, r0
 80015f4:	468c      	mov	ip, r1
 80015f6:	4463      	add	r3, ip
 80015f8:	2000      	movs	r0, #0
 80015fa:	9300      	str	r3, [sp, #0]
 80015fc:	e6d3      	b.n	80013a6 <__aeabi_dmul+0x86>
 80015fe:	0025      	movs	r5, r4
 8001600:	4305      	orrs	r5, r0
 8001602:	d04a      	beq.n	800169a <__aeabi_dmul+0x37a>
 8001604:	2c00      	cmp	r4, #0
 8001606:	d100      	bne.n	800160a <__aeabi_dmul+0x2ea>
 8001608:	e0b0      	b.n	800176c <__aeabi_dmul+0x44c>
 800160a:	0020      	movs	r0, r4
 800160c:	f000 fd30 	bl	8002070 <__clzsi2>
 8001610:	0001      	movs	r1, r0
 8001612:	0002      	movs	r2, r0
 8001614:	390b      	subs	r1, #11
 8001616:	231d      	movs	r3, #29
 8001618:	0010      	movs	r0, r2
 800161a:	1a5b      	subs	r3, r3, r1
 800161c:	0031      	movs	r1, r6
 800161e:	0035      	movs	r5, r6
 8001620:	3808      	subs	r0, #8
 8001622:	4084      	lsls	r4, r0
 8001624:	40d9      	lsrs	r1, r3
 8001626:	4085      	lsls	r5, r0
 8001628:	430c      	orrs	r4, r1
 800162a:	4826      	ldr	r0, [pc, #152]	; (80016c4 <__aeabi_dmul+0x3a4>)
 800162c:	1a83      	subs	r3, r0, r2
 800162e:	9300      	str	r3, [sp, #0]
 8001630:	2300      	movs	r3, #0
 8001632:	4699      	mov	r9, r3
 8001634:	469b      	mov	fp, r3
 8001636:	e697      	b.n	8001368 <__aeabi_dmul+0x48>
 8001638:	0005      	movs	r5, r0
 800163a:	4325      	orrs	r5, r4
 800163c:	d126      	bne.n	800168c <__aeabi_dmul+0x36c>
 800163e:	2208      	movs	r2, #8
 8001640:	9300      	str	r3, [sp, #0]
 8001642:	2302      	movs	r3, #2
 8001644:	2400      	movs	r4, #0
 8001646:	4691      	mov	r9, r2
 8001648:	469b      	mov	fp, r3
 800164a:	e68d      	b.n	8001368 <__aeabi_dmul+0x48>
 800164c:	4652      	mov	r2, sl
 800164e:	9b00      	ldr	r3, [sp, #0]
 8001650:	4332      	orrs	r2, r6
 8001652:	d110      	bne.n	8001676 <__aeabi_dmul+0x356>
 8001654:	4915      	ldr	r1, [pc, #84]	; (80016ac <__aeabi_dmul+0x38c>)
 8001656:	2600      	movs	r6, #0
 8001658:	468c      	mov	ip, r1
 800165a:	4463      	add	r3, ip
 800165c:	4649      	mov	r1, r9
 800165e:	9300      	str	r3, [sp, #0]
 8001660:	2302      	movs	r3, #2
 8001662:	4319      	orrs	r1, r3
 8001664:	4689      	mov	r9, r1
 8001666:	2002      	movs	r0, #2
 8001668:	e69d      	b.n	80013a6 <__aeabi_dmul+0x86>
 800166a:	465b      	mov	r3, fp
 800166c:	9701      	str	r7, [sp, #4]
 800166e:	2b02      	cmp	r3, #2
 8001670:	d000      	beq.n	8001674 <__aeabi_dmul+0x354>
 8001672:	e6ad      	b.n	80013d0 <__aeabi_dmul+0xb0>
 8001674:	e6c3      	b.n	80013fe <__aeabi_dmul+0xde>
 8001676:	4a0d      	ldr	r2, [pc, #52]	; (80016ac <__aeabi_dmul+0x38c>)
 8001678:	2003      	movs	r0, #3
 800167a:	4694      	mov	ip, r2
 800167c:	4463      	add	r3, ip
 800167e:	464a      	mov	r2, r9
 8001680:	9300      	str	r3, [sp, #0]
 8001682:	2303      	movs	r3, #3
 8001684:	431a      	orrs	r2, r3
 8001686:	4691      	mov	r9, r2
 8001688:	4652      	mov	r2, sl
 800168a:	e68c      	b.n	80013a6 <__aeabi_dmul+0x86>
 800168c:	220c      	movs	r2, #12
 800168e:	9300      	str	r3, [sp, #0]
 8001690:	2303      	movs	r3, #3
 8001692:	0005      	movs	r5, r0
 8001694:	4691      	mov	r9, r2
 8001696:	469b      	mov	fp, r3
 8001698:	e666      	b.n	8001368 <__aeabi_dmul+0x48>
 800169a:	2304      	movs	r3, #4
 800169c:	4699      	mov	r9, r3
 800169e:	2300      	movs	r3, #0
 80016a0:	9300      	str	r3, [sp, #0]
 80016a2:	3301      	adds	r3, #1
 80016a4:	2400      	movs	r4, #0
 80016a6:	469b      	mov	fp, r3
 80016a8:	e65e      	b.n	8001368 <__aeabi_dmul+0x48>
 80016aa:	46c0      	nop			; (mov r8, r8)
 80016ac:	000007ff 	.word	0x000007ff
 80016b0:	fffffc01 	.word	0xfffffc01
 80016b4:	08008eb0 	.word	0x08008eb0
 80016b8:	000003ff 	.word	0x000003ff
 80016bc:	feffffff 	.word	0xfeffffff
 80016c0:	000007fe 	.word	0x000007fe
 80016c4:	fffffc0d 	.word	0xfffffc0d
 80016c8:	4649      	mov	r1, r9
 80016ca:	2301      	movs	r3, #1
 80016cc:	4319      	orrs	r1, r3
 80016ce:	4689      	mov	r9, r1
 80016d0:	2600      	movs	r6, #0
 80016d2:	2001      	movs	r0, #1
 80016d4:	e667      	b.n	80013a6 <__aeabi_dmul+0x86>
 80016d6:	2300      	movs	r3, #0
 80016d8:	2480      	movs	r4, #128	; 0x80
 80016da:	2500      	movs	r5, #0
 80016dc:	4a43      	ldr	r2, [pc, #268]	; (80017ec <__aeabi_dmul+0x4cc>)
 80016de:	9301      	str	r3, [sp, #4]
 80016e0:	0324      	lsls	r4, r4, #12
 80016e2:	e67e      	b.n	80013e2 <__aeabi_dmul+0xc2>
 80016e4:	2001      	movs	r0, #1
 80016e6:	1a40      	subs	r0, r0, r1
 80016e8:	2838      	cmp	r0, #56	; 0x38
 80016ea:	dd00      	ble.n	80016ee <__aeabi_dmul+0x3ce>
 80016ec:	e676      	b.n	80013dc <__aeabi_dmul+0xbc>
 80016ee:	281f      	cmp	r0, #31
 80016f0:	dd5b      	ble.n	80017aa <__aeabi_dmul+0x48a>
 80016f2:	221f      	movs	r2, #31
 80016f4:	0023      	movs	r3, r4
 80016f6:	4252      	negs	r2, r2
 80016f8:	1a51      	subs	r1, r2, r1
 80016fa:	40cb      	lsrs	r3, r1
 80016fc:	0019      	movs	r1, r3
 80016fe:	2820      	cmp	r0, #32
 8001700:	d003      	beq.n	800170a <__aeabi_dmul+0x3ea>
 8001702:	4a3b      	ldr	r2, [pc, #236]	; (80017f0 <__aeabi_dmul+0x4d0>)
 8001704:	4462      	add	r2, ip
 8001706:	4094      	lsls	r4, r2
 8001708:	4325      	orrs	r5, r4
 800170a:	1e6a      	subs	r2, r5, #1
 800170c:	4195      	sbcs	r5, r2
 800170e:	002a      	movs	r2, r5
 8001710:	430a      	orrs	r2, r1
 8001712:	2107      	movs	r1, #7
 8001714:	000d      	movs	r5, r1
 8001716:	2400      	movs	r4, #0
 8001718:	4015      	ands	r5, r2
 800171a:	4211      	tst	r1, r2
 800171c:	d05b      	beq.n	80017d6 <__aeabi_dmul+0x4b6>
 800171e:	210f      	movs	r1, #15
 8001720:	2400      	movs	r4, #0
 8001722:	4011      	ands	r1, r2
 8001724:	2904      	cmp	r1, #4
 8001726:	d053      	beq.n	80017d0 <__aeabi_dmul+0x4b0>
 8001728:	1d11      	adds	r1, r2, #4
 800172a:	4291      	cmp	r1, r2
 800172c:	4192      	sbcs	r2, r2
 800172e:	4252      	negs	r2, r2
 8001730:	18a4      	adds	r4, r4, r2
 8001732:	000a      	movs	r2, r1
 8001734:	0223      	lsls	r3, r4, #8
 8001736:	d54b      	bpl.n	80017d0 <__aeabi_dmul+0x4b0>
 8001738:	2201      	movs	r2, #1
 800173a:	2400      	movs	r4, #0
 800173c:	2500      	movs	r5, #0
 800173e:	e650      	b.n	80013e2 <__aeabi_dmul+0xc2>
 8001740:	2380      	movs	r3, #128	; 0x80
 8001742:	031b      	lsls	r3, r3, #12
 8001744:	421c      	tst	r4, r3
 8001746:	d009      	beq.n	800175c <__aeabi_dmul+0x43c>
 8001748:	421e      	tst	r6, r3
 800174a:	d107      	bne.n	800175c <__aeabi_dmul+0x43c>
 800174c:	4333      	orrs	r3, r6
 800174e:	031c      	lsls	r4, r3, #12
 8001750:	4643      	mov	r3, r8
 8001752:	0015      	movs	r5, r2
 8001754:	0b24      	lsrs	r4, r4, #12
 8001756:	4a25      	ldr	r2, [pc, #148]	; (80017ec <__aeabi_dmul+0x4cc>)
 8001758:	9301      	str	r3, [sp, #4]
 800175a:	e642      	b.n	80013e2 <__aeabi_dmul+0xc2>
 800175c:	2280      	movs	r2, #128	; 0x80
 800175e:	0312      	lsls	r2, r2, #12
 8001760:	4314      	orrs	r4, r2
 8001762:	0324      	lsls	r4, r4, #12
 8001764:	4a21      	ldr	r2, [pc, #132]	; (80017ec <__aeabi_dmul+0x4cc>)
 8001766:	0b24      	lsrs	r4, r4, #12
 8001768:	9701      	str	r7, [sp, #4]
 800176a:	e63a      	b.n	80013e2 <__aeabi_dmul+0xc2>
 800176c:	f000 fc80 	bl	8002070 <__clzsi2>
 8001770:	0001      	movs	r1, r0
 8001772:	0002      	movs	r2, r0
 8001774:	3115      	adds	r1, #21
 8001776:	3220      	adds	r2, #32
 8001778:	291c      	cmp	r1, #28
 800177a:	dc00      	bgt.n	800177e <__aeabi_dmul+0x45e>
 800177c:	e74b      	b.n	8001616 <__aeabi_dmul+0x2f6>
 800177e:	0034      	movs	r4, r6
 8001780:	3808      	subs	r0, #8
 8001782:	2500      	movs	r5, #0
 8001784:	4084      	lsls	r4, r0
 8001786:	e750      	b.n	800162a <__aeabi_dmul+0x30a>
 8001788:	f000 fc72 	bl	8002070 <__clzsi2>
 800178c:	0003      	movs	r3, r0
 800178e:	001a      	movs	r2, r3
 8001790:	3215      	adds	r2, #21
 8001792:	3020      	adds	r0, #32
 8001794:	2a1c      	cmp	r2, #28
 8001796:	dc00      	bgt.n	800179a <__aeabi_dmul+0x47a>
 8001798:	e71e      	b.n	80015d8 <__aeabi_dmul+0x2b8>
 800179a:	4656      	mov	r6, sl
 800179c:	3b08      	subs	r3, #8
 800179e:	2200      	movs	r2, #0
 80017a0:	409e      	lsls	r6, r3
 80017a2:	e723      	b.n	80015ec <__aeabi_dmul+0x2cc>
 80017a4:	9b00      	ldr	r3, [sp, #0]
 80017a6:	469c      	mov	ip, r3
 80017a8:	e6e6      	b.n	8001578 <__aeabi_dmul+0x258>
 80017aa:	4912      	ldr	r1, [pc, #72]	; (80017f4 <__aeabi_dmul+0x4d4>)
 80017ac:	0022      	movs	r2, r4
 80017ae:	4461      	add	r1, ip
 80017b0:	002e      	movs	r6, r5
 80017b2:	408d      	lsls	r5, r1
 80017b4:	408a      	lsls	r2, r1
 80017b6:	40c6      	lsrs	r6, r0
 80017b8:	1e69      	subs	r1, r5, #1
 80017ba:	418d      	sbcs	r5, r1
 80017bc:	4332      	orrs	r2, r6
 80017be:	432a      	orrs	r2, r5
 80017c0:	40c4      	lsrs	r4, r0
 80017c2:	0753      	lsls	r3, r2, #29
 80017c4:	d0b6      	beq.n	8001734 <__aeabi_dmul+0x414>
 80017c6:	210f      	movs	r1, #15
 80017c8:	4011      	ands	r1, r2
 80017ca:	2904      	cmp	r1, #4
 80017cc:	d1ac      	bne.n	8001728 <__aeabi_dmul+0x408>
 80017ce:	e7b1      	b.n	8001734 <__aeabi_dmul+0x414>
 80017d0:	0765      	lsls	r5, r4, #29
 80017d2:	0264      	lsls	r4, r4, #9
 80017d4:	0b24      	lsrs	r4, r4, #12
 80017d6:	08d2      	lsrs	r2, r2, #3
 80017d8:	4315      	orrs	r5, r2
 80017da:	2200      	movs	r2, #0
 80017dc:	e601      	b.n	80013e2 <__aeabi_dmul+0xc2>
 80017de:	2280      	movs	r2, #128	; 0x80
 80017e0:	0312      	lsls	r2, r2, #12
 80017e2:	4314      	orrs	r4, r2
 80017e4:	0324      	lsls	r4, r4, #12
 80017e6:	4a01      	ldr	r2, [pc, #4]	; (80017ec <__aeabi_dmul+0x4cc>)
 80017e8:	0b24      	lsrs	r4, r4, #12
 80017ea:	e5fa      	b.n	80013e2 <__aeabi_dmul+0xc2>
 80017ec:	000007ff 	.word	0x000007ff
 80017f0:	0000043e 	.word	0x0000043e
 80017f4:	0000041e 	.word	0x0000041e

080017f8 <__aeabi_dsub>:
 80017f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80017fa:	4657      	mov	r7, sl
 80017fc:	464e      	mov	r6, r9
 80017fe:	4645      	mov	r5, r8
 8001800:	46de      	mov	lr, fp
 8001802:	b5e0      	push	{r5, r6, r7, lr}
 8001804:	001e      	movs	r6, r3
 8001806:	0017      	movs	r7, r2
 8001808:	004a      	lsls	r2, r1, #1
 800180a:	030b      	lsls	r3, r1, #12
 800180c:	0d52      	lsrs	r2, r2, #21
 800180e:	0a5b      	lsrs	r3, r3, #9
 8001810:	4690      	mov	r8, r2
 8001812:	0f42      	lsrs	r2, r0, #29
 8001814:	431a      	orrs	r2, r3
 8001816:	0fcd      	lsrs	r5, r1, #31
 8001818:	4ccd      	ldr	r4, [pc, #820]	; (8001b50 <__aeabi_dsub+0x358>)
 800181a:	0331      	lsls	r1, r6, #12
 800181c:	00c3      	lsls	r3, r0, #3
 800181e:	4694      	mov	ip, r2
 8001820:	0070      	lsls	r0, r6, #1
 8001822:	0f7a      	lsrs	r2, r7, #29
 8001824:	0a49      	lsrs	r1, r1, #9
 8001826:	00ff      	lsls	r7, r7, #3
 8001828:	469a      	mov	sl, r3
 800182a:	46b9      	mov	r9, r7
 800182c:	0d40      	lsrs	r0, r0, #21
 800182e:	0ff6      	lsrs	r6, r6, #31
 8001830:	4311      	orrs	r1, r2
 8001832:	42a0      	cmp	r0, r4
 8001834:	d100      	bne.n	8001838 <__aeabi_dsub+0x40>
 8001836:	e0b1      	b.n	800199c <__aeabi_dsub+0x1a4>
 8001838:	2201      	movs	r2, #1
 800183a:	4056      	eors	r6, r2
 800183c:	46b3      	mov	fp, r6
 800183e:	42b5      	cmp	r5, r6
 8001840:	d100      	bne.n	8001844 <__aeabi_dsub+0x4c>
 8001842:	e088      	b.n	8001956 <__aeabi_dsub+0x15e>
 8001844:	4642      	mov	r2, r8
 8001846:	1a12      	subs	r2, r2, r0
 8001848:	2a00      	cmp	r2, #0
 800184a:	dc00      	bgt.n	800184e <__aeabi_dsub+0x56>
 800184c:	e0ae      	b.n	80019ac <__aeabi_dsub+0x1b4>
 800184e:	2800      	cmp	r0, #0
 8001850:	d100      	bne.n	8001854 <__aeabi_dsub+0x5c>
 8001852:	e0c1      	b.n	80019d8 <__aeabi_dsub+0x1e0>
 8001854:	48be      	ldr	r0, [pc, #760]	; (8001b50 <__aeabi_dsub+0x358>)
 8001856:	4580      	cmp	r8, r0
 8001858:	d100      	bne.n	800185c <__aeabi_dsub+0x64>
 800185a:	e151      	b.n	8001b00 <__aeabi_dsub+0x308>
 800185c:	2080      	movs	r0, #128	; 0x80
 800185e:	0400      	lsls	r0, r0, #16
 8001860:	4301      	orrs	r1, r0
 8001862:	2a38      	cmp	r2, #56	; 0x38
 8001864:	dd00      	ble.n	8001868 <__aeabi_dsub+0x70>
 8001866:	e17b      	b.n	8001b60 <__aeabi_dsub+0x368>
 8001868:	2a1f      	cmp	r2, #31
 800186a:	dd00      	ble.n	800186e <__aeabi_dsub+0x76>
 800186c:	e1ee      	b.n	8001c4c <__aeabi_dsub+0x454>
 800186e:	2020      	movs	r0, #32
 8001870:	003e      	movs	r6, r7
 8001872:	1a80      	subs	r0, r0, r2
 8001874:	000c      	movs	r4, r1
 8001876:	40d6      	lsrs	r6, r2
 8001878:	40d1      	lsrs	r1, r2
 800187a:	4087      	lsls	r7, r0
 800187c:	4662      	mov	r2, ip
 800187e:	4084      	lsls	r4, r0
 8001880:	1a52      	subs	r2, r2, r1
 8001882:	1e78      	subs	r0, r7, #1
 8001884:	4187      	sbcs	r7, r0
 8001886:	4694      	mov	ip, r2
 8001888:	4334      	orrs	r4, r6
 800188a:	4327      	orrs	r7, r4
 800188c:	1bdc      	subs	r4, r3, r7
 800188e:	42a3      	cmp	r3, r4
 8001890:	419b      	sbcs	r3, r3
 8001892:	4662      	mov	r2, ip
 8001894:	425b      	negs	r3, r3
 8001896:	1ad3      	subs	r3, r2, r3
 8001898:	4699      	mov	r9, r3
 800189a:	464b      	mov	r3, r9
 800189c:	021b      	lsls	r3, r3, #8
 800189e:	d400      	bmi.n	80018a2 <__aeabi_dsub+0xaa>
 80018a0:	e118      	b.n	8001ad4 <__aeabi_dsub+0x2dc>
 80018a2:	464b      	mov	r3, r9
 80018a4:	0258      	lsls	r0, r3, #9
 80018a6:	0a43      	lsrs	r3, r0, #9
 80018a8:	4699      	mov	r9, r3
 80018aa:	464b      	mov	r3, r9
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d100      	bne.n	80018b2 <__aeabi_dsub+0xba>
 80018b0:	e137      	b.n	8001b22 <__aeabi_dsub+0x32a>
 80018b2:	4648      	mov	r0, r9
 80018b4:	f000 fbdc 	bl	8002070 <__clzsi2>
 80018b8:	0001      	movs	r1, r0
 80018ba:	3908      	subs	r1, #8
 80018bc:	2320      	movs	r3, #32
 80018be:	0022      	movs	r2, r4
 80018c0:	4648      	mov	r0, r9
 80018c2:	1a5b      	subs	r3, r3, r1
 80018c4:	40da      	lsrs	r2, r3
 80018c6:	4088      	lsls	r0, r1
 80018c8:	408c      	lsls	r4, r1
 80018ca:	4643      	mov	r3, r8
 80018cc:	4310      	orrs	r0, r2
 80018ce:	4588      	cmp	r8, r1
 80018d0:	dd00      	ble.n	80018d4 <__aeabi_dsub+0xdc>
 80018d2:	e136      	b.n	8001b42 <__aeabi_dsub+0x34a>
 80018d4:	1ac9      	subs	r1, r1, r3
 80018d6:	1c4b      	adds	r3, r1, #1
 80018d8:	2b1f      	cmp	r3, #31
 80018da:	dd00      	ble.n	80018de <__aeabi_dsub+0xe6>
 80018dc:	e0ea      	b.n	8001ab4 <__aeabi_dsub+0x2bc>
 80018de:	2220      	movs	r2, #32
 80018e0:	0026      	movs	r6, r4
 80018e2:	1ad2      	subs	r2, r2, r3
 80018e4:	0001      	movs	r1, r0
 80018e6:	4094      	lsls	r4, r2
 80018e8:	40de      	lsrs	r6, r3
 80018ea:	40d8      	lsrs	r0, r3
 80018ec:	2300      	movs	r3, #0
 80018ee:	4091      	lsls	r1, r2
 80018f0:	1e62      	subs	r2, r4, #1
 80018f2:	4194      	sbcs	r4, r2
 80018f4:	4681      	mov	r9, r0
 80018f6:	4698      	mov	r8, r3
 80018f8:	4331      	orrs	r1, r6
 80018fa:	430c      	orrs	r4, r1
 80018fc:	0763      	lsls	r3, r4, #29
 80018fe:	d009      	beq.n	8001914 <__aeabi_dsub+0x11c>
 8001900:	230f      	movs	r3, #15
 8001902:	4023      	ands	r3, r4
 8001904:	2b04      	cmp	r3, #4
 8001906:	d005      	beq.n	8001914 <__aeabi_dsub+0x11c>
 8001908:	1d23      	adds	r3, r4, #4
 800190a:	42a3      	cmp	r3, r4
 800190c:	41a4      	sbcs	r4, r4
 800190e:	4264      	negs	r4, r4
 8001910:	44a1      	add	r9, r4
 8001912:	001c      	movs	r4, r3
 8001914:	464b      	mov	r3, r9
 8001916:	021b      	lsls	r3, r3, #8
 8001918:	d400      	bmi.n	800191c <__aeabi_dsub+0x124>
 800191a:	e0de      	b.n	8001ada <__aeabi_dsub+0x2e2>
 800191c:	4641      	mov	r1, r8
 800191e:	4b8c      	ldr	r3, [pc, #560]	; (8001b50 <__aeabi_dsub+0x358>)
 8001920:	3101      	adds	r1, #1
 8001922:	4299      	cmp	r1, r3
 8001924:	d100      	bne.n	8001928 <__aeabi_dsub+0x130>
 8001926:	e0e7      	b.n	8001af8 <__aeabi_dsub+0x300>
 8001928:	464b      	mov	r3, r9
 800192a:	488a      	ldr	r0, [pc, #552]	; (8001b54 <__aeabi_dsub+0x35c>)
 800192c:	08e4      	lsrs	r4, r4, #3
 800192e:	4003      	ands	r3, r0
 8001930:	0018      	movs	r0, r3
 8001932:	0549      	lsls	r1, r1, #21
 8001934:	075b      	lsls	r3, r3, #29
 8001936:	0240      	lsls	r0, r0, #9
 8001938:	4323      	orrs	r3, r4
 800193a:	0d4a      	lsrs	r2, r1, #21
 800193c:	0b04      	lsrs	r4, r0, #12
 800193e:	0512      	lsls	r2, r2, #20
 8001940:	07ed      	lsls	r5, r5, #31
 8001942:	4322      	orrs	r2, r4
 8001944:	432a      	orrs	r2, r5
 8001946:	0018      	movs	r0, r3
 8001948:	0011      	movs	r1, r2
 800194a:	bcf0      	pop	{r4, r5, r6, r7}
 800194c:	46bb      	mov	fp, r7
 800194e:	46b2      	mov	sl, r6
 8001950:	46a9      	mov	r9, r5
 8001952:	46a0      	mov	r8, r4
 8001954:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001956:	4642      	mov	r2, r8
 8001958:	1a12      	subs	r2, r2, r0
 800195a:	2a00      	cmp	r2, #0
 800195c:	dd52      	ble.n	8001a04 <__aeabi_dsub+0x20c>
 800195e:	2800      	cmp	r0, #0
 8001960:	d100      	bne.n	8001964 <__aeabi_dsub+0x16c>
 8001962:	e09c      	b.n	8001a9e <__aeabi_dsub+0x2a6>
 8001964:	45a0      	cmp	r8, r4
 8001966:	d100      	bne.n	800196a <__aeabi_dsub+0x172>
 8001968:	e0ca      	b.n	8001b00 <__aeabi_dsub+0x308>
 800196a:	2080      	movs	r0, #128	; 0x80
 800196c:	0400      	lsls	r0, r0, #16
 800196e:	4301      	orrs	r1, r0
 8001970:	2a38      	cmp	r2, #56	; 0x38
 8001972:	dd00      	ble.n	8001976 <__aeabi_dsub+0x17e>
 8001974:	e149      	b.n	8001c0a <__aeabi_dsub+0x412>
 8001976:	2a1f      	cmp	r2, #31
 8001978:	dc00      	bgt.n	800197c <__aeabi_dsub+0x184>
 800197a:	e197      	b.n	8001cac <__aeabi_dsub+0x4b4>
 800197c:	0010      	movs	r0, r2
 800197e:	000e      	movs	r6, r1
 8001980:	3820      	subs	r0, #32
 8001982:	40c6      	lsrs	r6, r0
 8001984:	2a20      	cmp	r2, #32
 8001986:	d004      	beq.n	8001992 <__aeabi_dsub+0x19a>
 8001988:	2040      	movs	r0, #64	; 0x40
 800198a:	1a82      	subs	r2, r0, r2
 800198c:	4091      	lsls	r1, r2
 800198e:	430f      	orrs	r7, r1
 8001990:	46b9      	mov	r9, r7
 8001992:	464c      	mov	r4, r9
 8001994:	1e62      	subs	r2, r4, #1
 8001996:	4194      	sbcs	r4, r2
 8001998:	4334      	orrs	r4, r6
 800199a:	e13a      	b.n	8001c12 <__aeabi_dsub+0x41a>
 800199c:	000a      	movs	r2, r1
 800199e:	433a      	orrs	r2, r7
 80019a0:	d028      	beq.n	80019f4 <__aeabi_dsub+0x1fc>
 80019a2:	46b3      	mov	fp, r6
 80019a4:	42b5      	cmp	r5, r6
 80019a6:	d02b      	beq.n	8001a00 <__aeabi_dsub+0x208>
 80019a8:	4a6b      	ldr	r2, [pc, #428]	; (8001b58 <__aeabi_dsub+0x360>)
 80019aa:	4442      	add	r2, r8
 80019ac:	2a00      	cmp	r2, #0
 80019ae:	d05d      	beq.n	8001a6c <__aeabi_dsub+0x274>
 80019b0:	4642      	mov	r2, r8
 80019b2:	4644      	mov	r4, r8
 80019b4:	1a82      	subs	r2, r0, r2
 80019b6:	2c00      	cmp	r4, #0
 80019b8:	d000      	beq.n	80019bc <__aeabi_dsub+0x1c4>
 80019ba:	e0f5      	b.n	8001ba8 <__aeabi_dsub+0x3b0>
 80019bc:	4665      	mov	r5, ip
 80019be:	431d      	orrs	r5, r3
 80019c0:	d100      	bne.n	80019c4 <__aeabi_dsub+0x1cc>
 80019c2:	e19c      	b.n	8001cfe <__aeabi_dsub+0x506>
 80019c4:	1e55      	subs	r5, r2, #1
 80019c6:	2a01      	cmp	r2, #1
 80019c8:	d100      	bne.n	80019cc <__aeabi_dsub+0x1d4>
 80019ca:	e1fb      	b.n	8001dc4 <__aeabi_dsub+0x5cc>
 80019cc:	4c60      	ldr	r4, [pc, #384]	; (8001b50 <__aeabi_dsub+0x358>)
 80019ce:	42a2      	cmp	r2, r4
 80019d0:	d100      	bne.n	80019d4 <__aeabi_dsub+0x1dc>
 80019d2:	e1bd      	b.n	8001d50 <__aeabi_dsub+0x558>
 80019d4:	002a      	movs	r2, r5
 80019d6:	e0f0      	b.n	8001bba <__aeabi_dsub+0x3c2>
 80019d8:	0008      	movs	r0, r1
 80019da:	4338      	orrs	r0, r7
 80019dc:	d100      	bne.n	80019e0 <__aeabi_dsub+0x1e8>
 80019de:	e0c3      	b.n	8001b68 <__aeabi_dsub+0x370>
 80019e0:	1e50      	subs	r0, r2, #1
 80019e2:	2a01      	cmp	r2, #1
 80019e4:	d100      	bne.n	80019e8 <__aeabi_dsub+0x1f0>
 80019e6:	e1a8      	b.n	8001d3a <__aeabi_dsub+0x542>
 80019e8:	4c59      	ldr	r4, [pc, #356]	; (8001b50 <__aeabi_dsub+0x358>)
 80019ea:	42a2      	cmp	r2, r4
 80019ec:	d100      	bne.n	80019f0 <__aeabi_dsub+0x1f8>
 80019ee:	e087      	b.n	8001b00 <__aeabi_dsub+0x308>
 80019f0:	0002      	movs	r2, r0
 80019f2:	e736      	b.n	8001862 <__aeabi_dsub+0x6a>
 80019f4:	2201      	movs	r2, #1
 80019f6:	4056      	eors	r6, r2
 80019f8:	46b3      	mov	fp, r6
 80019fa:	42b5      	cmp	r5, r6
 80019fc:	d000      	beq.n	8001a00 <__aeabi_dsub+0x208>
 80019fe:	e721      	b.n	8001844 <__aeabi_dsub+0x4c>
 8001a00:	4a55      	ldr	r2, [pc, #340]	; (8001b58 <__aeabi_dsub+0x360>)
 8001a02:	4442      	add	r2, r8
 8001a04:	2a00      	cmp	r2, #0
 8001a06:	d100      	bne.n	8001a0a <__aeabi_dsub+0x212>
 8001a08:	e0b5      	b.n	8001b76 <__aeabi_dsub+0x37e>
 8001a0a:	4642      	mov	r2, r8
 8001a0c:	4644      	mov	r4, r8
 8001a0e:	1a82      	subs	r2, r0, r2
 8001a10:	2c00      	cmp	r4, #0
 8001a12:	d100      	bne.n	8001a16 <__aeabi_dsub+0x21e>
 8001a14:	e138      	b.n	8001c88 <__aeabi_dsub+0x490>
 8001a16:	4e4e      	ldr	r6, [pc, #312]	; (8001b50 <__aeabi_dsub+0x358>)
 8001a18:	42b0      	cmp	r0, r6
 8001a1a:	d100      	bne.n	8001a1e <__aeabi_dsub+0x226>
 8001a1c:	e1de      	b.n	8001ddc <__aeabi_dsub+0x5e4>
 8001a1e:	2680      	movs	r6, #128	; 0x80
 8001a20:	4664      	mov	r4, ip
 8001a22:	0436      	lsls	r6, r6, #16
 8001a24:	4334      	orrs	r4, r6
 8001a26:	46a4      	mov	ip, r4
 8001a28:	2a38      	cmp	r2, #56	; 0x38
 8001a2a:	dd00      	ble.n	8001a2e <__aeabi_dsub+0x236>
 8001a2c:	e196      	b.n	8001d5c <__aeabi_dsub+0x564>
 8001a2e:	2a1f      	cmp	r2, #31
 8001a30:	dd00      	ble.n	8001a34 <__aeabi_dsub+0x23c>
 8001a32:	e224      	b.n	8001e7e <__aeabi_dsub+0x686>
 8001a34:	2620      	movs	r6, #32
 8001a36:	1ab4      	subs	r4, r6, r2
 8001a38:	46a2      	mov	sl, r4
 8001a3a:	4664      	mov	r4, ip
 8001a3c:	4656      	mov	r6, sl
 8001a3e:	40b4      	lsls	r4, r6
 8001a40:	46a1      	mov	r9, r4
 8001a42:	001c      	movs	r4, r3
 8001a44:	464e      	mov	r6, r9
 8001a46:	40d4      	lsrs	r4, r2
 8001a48:	4326      	orrs	r6, r4
 8001a4a:	0034      	movs	r4, r6
 8001a4c:	4656      	mov	r6, sl
 8001a4e:	40b3      	lsls	r3, r6
 8001a50:	1e5e      	subs	r6, r3, #1
 8001a52:	41b3      	sbcs	r3, r6
 8001a54:	431c      	orrs	r4, r3
 8001a56:	4663      	mov	r3, ip
 8001a58:	40d3      	lsrs	r3, r2
 8001a5a:	18c9      	adds	r1, r1, r3
 8001a5c:	19e4      	adds	r4, r4, r7
 8001a5e:	42bc      	cmp	r4, r7
 8001a60:	41bf      	sbcs	r7, r7
 8001a62:	427f      	negs	r7, r7
 8001a64:	46b9      	mov	r9, r7
 8001a66:	4680      	mov	r8, r0
 8001a68:	4489      	add	r9, r1
 8001a6a:	e0d8      	b.n	8001c1e <__aeabi_dsub+0x426>
 8001a6c:	4640      	mov	r0, r8
 8001a6e:	4c3b      	ldr	r4, [pc, #236]	; (8001b5c <__aeabi_dsub+0x364>)
 8001a70:	3001      	adds	r0, #1
 8001a72:	4220      	tst	r0, r4
 8001a74:	d000      	beq.n	8001a78 <__aeabi_dsub+0x280>
 8001a76:	e0b4      	b.n	8001be2 <__aeabi_dsub+0x3ea>
 8001a78:	4640      	mov	r0, r8
 8001a7a:	2800      	cmp	r0, #0
 8001a7c:	d000      	beq.n	8001a80 <__aeabi_dsub+0x288>
 8001a7e:	e144      	b.n	8001d0a <__aeabi_dsub+0x512>
 8001a80:	4660      	mov	r0, ip
 8001a82:	4318      	orrs	r0, r3
 8001a84:	d100      	bne.n	8001a88 <__aeabi_dsub+0x290>
 8001a86:	e190      	b.n	8001daa <__aeabi_dsub+0x5b2>
 8001a88:	0008      	movs	r0, r1
 8001a8a:	4338      	orrs	r0, r7
 8001a8c:	d000      	beq.n	8001a90 <__aeabi_dsub+0x298>
 8001a8e:	e1aa      	b.n	8001de6 <__aeabi_dsub+0x5ee>
 8001a90:	4661      	mov	r1, ip
 8001a92:	08db      	lsrs	r3, r3, #3
 8001a94:	0749      	lsls	r1, r1, #29
 8001a96:	430b      	orrs	r3, r1
 8001a98:	4661      	mov	r1, ip
 8001a9a:	08cc      	lsrs	r4, r1, #3
 8001a9c:	e027      	b.n	8001aee <__aeabi_dsub+0x2f6>
 8001a9e:	0008      	movs	r0, r1
 8001aa0:	4338      	orrs	r0, r7
 8001aa2:	d061      	beq.n	8001b68 <__aeabi_dsub+0x370>
 8001aa4:	1e50      	subs	r0, r2, #1
 8001aa6:	2a01      	cmp	r2, #1
 8001aa8:	d100      	bne.n	8001aac <__aeabi_dsub+0x2b4>
 8001aaa:	e139      	b.n	8001d20 <__aeabi_dsub+0x528>
 8001aac:	42a2      	cmp	r2, r4
 8001aae:	d027      	beq.n	8001b00 <__aeabi_dsub+0x308>
 8001ab0:	0002      	movs	r2, r0
 8001ab2:	e75d      	b.n	8001970 <__aeabi_dsub+0x178>
 8001ab4:	0002      	movs	r2, r0
 8001ab6:	391f      	subs	r1, #31
 8001ab8:	40ca      	lsrs	r2, r1
 8001aba:	0011      	movs	r1, r2
 8001abc:	2b20      	cmp	r3, #32
 8001abe:	d003      	beq.n	8001ac8 <__aeabi_dsub+0x2d0>
 8001ac0:	2240      	movs	r2, #64	; 0x40
 8001ac2:	1ad3      	subs	r3, r2, r3
 8001ac4:	4098      	lsls	r0, r3
 8001ac6:	4304      	orrs	r4, r0
 8001ac8:	1e63      	subs	r3, r4, #1
 8001aca:	419c      	sbcs	r4, r3
 8001acc:	2300      	movs	r3, #0
 8001ace:	4699      	mov	r9, r3
 8001ad0:	4698      	mov	r8, r3
 8001ad2:	430c      	orrs	r4, r1
 8001ad4:	0763      	lsls	r3, r4, #29
 8001ad6:	d000      	beq.n	8001ada <__aeabi_dsub+0x2e2>
 8001ad8:	e712      	b.n	8001900 <__aeabi_dsub+0x108>
 8001ada:	464b      	mov	r3, r9
 8001adc:	464a      	mov	r2, r9
 8001ade:	08e4      	lsrs	r4, r4, #3
 8001ae0:	075b      	lsls	r3, r3, #29
 8001ae2:	4323      	orrs	r3, r4
 8001ae4:	08d4      	lsrs	r4, r2, #3
 8001ae6:	4642      	mov	r2, r8
 8001ae8:	4919      	ldr	r1, [pc, #100]	; (8001b50 <__aeabi_dsub+0x358>)
 8001aea:	428a      	cmp	r2, r1
 8001aec:	d00e      	beq.n	8001b0c <__aeabi_dsub+0x314>
 8001aee:	0324      	lsls	r4, r4, #12
 8001af0:	0552      	lsls	r2, r2, #21
 8001af2:	0b24      	lsrs	r4, r4, #12
 8001af4:	0d52      	lsrs	r2, r2, #21
 8001af6:	e722      	b.n	800193e <__aeabi_dsub+0x146>
 8001af8:	000a      	movs	r2, r1
 8001afa:	2400      	movs	r4, #0
 8001afc:	2300      	movs	r3, #0
 8001afe:	e71e      	b.n	800193e <__aeabi_dsub+0x146>
 8001b00:	08db      	lsrs	r3, r3, #3
 8001b02:	4662      	mov	r2, ip
 8001b04:	0752      	lsls	r2, r2, #29
 8001b06:	4313      	orrs	r3, r2
 8001b08:	4662      	mov	r2, ip
 8001b0a:	08d4      	lsrs	r4, r2, #3
 8001b0c:	001a      	movs	r2, r3
 8001b0e:	4322      	orrs	r2, r4
 8001b10:	d100      	bne.n	8001b14 <__aeabi_dsub+0x31c>
 8001b12:	e1fc      	b.n	8001f0e <__aeabi_dsub+0x716>
 8001b14:	2280      	movs	r2, #128	; 0x80
 8001b16:	0312      	lsls	r2, r2, #12
 8001b18:	4314      	orrs	r4, r2
 8001b1a:	0324      	lsls	r4, r4, #12
 8001b1c:	4a0c      	ldr	r2, [pc, #48]	; (8001b50 <__aeabi_dsub+0x358>)
 8001b1e:	0b24      	lsrs	r4, r4, #12
 8001b20:	e70d      	b.n	800193e <__aeabi_dsub+0x146>
 8001b22:	0020      	movs	r0, r4
 8001b24:	f000 faa4 	bl	8002070 <__clzsi2>
 8001b28:	0001      	movs	r1, r0
 8001b2a:	3118      	adds	r1, #24
 8001b2c:	291f      	cmp	r1, #31
 8001b2e:	dc00      	bgt.n	8001b32 <__aeabi_dsub+0x33a>
 8001b30:	e6c4      	b.n	80018bc <__aeabi_dsub+0xc4>
 8001b32:	3808      	subs	r0, #8
 8001b34:	4084      	lsls	r4, r0
 8001b36:	4643      	mov	r3, r8
 8001b38:	0020      	movs	r0, r4
 8001b3a:	2400      	movs	r4, #0
 8001b3c:	4588      	cmp	r8, r1
 8001b3e:	dc00      	bgt.n	8001b42 <__aeabi_dsub+0x34a>
 8001b40:	e6c8      	b.n	80018d4 <__aeabi_dsub+0xdc>
 8001b42:	4a04      	ldr	r2, [pc, #16]	; (8001b54 <__aeabi_dsub+0x35c>)
 8001b44:	1a5b      	subs	r3, r3, r1
 8001b46:	4010      	ands	r0, r2
 8001b48:	4698      	mov	r8, r3
 8001b4a:	4681      	mov	r9, r0
 8001b4c:	e6d6      	b.n	80018fc <__aeabi_dsub+0x104>
 8001b4e:	46c0      	nop			; (mov r8, r8)
 8001b50:	000007ff 	.word	0x000007ff
 8001b54:	ff7fffff 	.word	0xff7fffff
 8001b58:	fffff801 	.word	0xfffff801
 8001b5c:	000007fe 	.word	0x000007fe
 8001b60:	430f      	orrs	r7, r1
 8001b62:	1e7a      	subs	r2, r7, #1
 8001b64:	4197      	sbcs	r7, r2
 8001b66:	e691      	b.n	800188c <__aeabi_dsub+0x94>
 8001b68:	4661      	mov	r1, ip
 8001b6a:	08db      	lsrs	r3, r3, #3
 8001b6c:	0749      	lsls	r1, r1, #29
 8001b6e:	430b      	orrs	r3, r1
 8001b70:	4661      	mov	r1, ip
 8001b72:	08cc      	lsrs	r4, r1, #3
 8001b74:	e7b8      	b.n	8001ae8 <__aeabi_dsub+0x2f0>
 8001b76:	4640      	mov	r0, r8
 8001b78:	4cd3      	ldr	r4, [pc, #844]	; (8001ec8 <__aeabi_dsub+0x6d0>)
 8001b7a:	3001      	adds	r0, #1
 8001b7c:	4220      	tst	r0, r4
 8001b7e:	d000      	beq.n	8001b82 <__aeabi_dsub+0x38a>
 8001b80:	e0a2      	b.n	8001cc8 <__aeabi_dsub+0x4d0>
 8001b82:	4640      	mov	r0, r8
 8001b84:	2800      	cmp	r0, #0
 8001b86:	d000      	beq.n	8001b8a <__aeabi_dsub+0x392>
 8001b88:	e101      	b.n	8001d8e <__aeabi_dsub+0x596>
 8001b8a:	4660      	mov	r0, ip
 8001b8c:	4318      	orrs	r0, r3
 8001b8e:	d100      	bne.n	8001b92 <__aeabi_dsub+0x39a>
 8001b90:	e15e      	b.n	8001e50 <__aeabi_dsub+0x658>
 8001b92:	0008      	movs	r0, r1
 8001b94:	4338      	orrs	r0, r7
 8001b96:	d000      	beq.n	8001b9a <__aeabi_dsub+0x3a2>
 8001b98:	e15f      	b.n	8001e5a <__aeabi_dsub+0x662>
 8001b9a:	4661      	mov	r1, ip
 8001b9c:	08db      	lsrs	r3, r3, #3
 8001b9e:	0749      	lsls	r1, r1, #29
 8001ba0:	430b      	orrs	r3, r1
 8001ba2:	4661      	mov	r1, ip
 8001ba4:	08cc      	lsrs	r4, r1, #3
 8001ba6:	e7a2      	b.n	8001aee <__aeabi_dsub+0x2f6>
 8001ba8:	4dc8      	ldr	r5, [pc, #800]	; (8001ecc <__aeabi_dsub+0x6d4>)
 8001baa:	42a8      	cmp	r0, r5
 8001bac:	d100      	bne.n	8001bb0 <__aeabi_dsub+0x3b8>
 8001bae:	e0cf      	b.n	8001d50 <__aeabi_dsub+0x558>
 8001bb0:	2580      	movs	r5, #128	; 0x80
 8001bb2:	4664      	mov	r4, ip
 8001bb4:	042d      	lsls	r5, r5, #16
 8001bb6:	432c      	orrs	r4, r5
 8001bb8:	46a4      	mov	ip, r4
 8001bba:	2a38      	cmp	r2, #56	; 0x38
 8001bbc:	dc56      	bgt.n	8001c6c <__aeabi_dsub+0x474>
 8001bbe:	2a1f      	cmp	r2, #31
 8001bc0:	dd00      	ble.n	8001bc4 <__aeabi_dsub+0x3cc>
 8001bc2:	e0d1      	b.n	8001d68 <__aeabi_dsub+0x570>
 8001bc4:	2520      	movs	r5, #32
 8001bc6:	001e      	movs	r6, r3
 8001bc8:	1aad      	subs	r5, r5, r2
 8001bca:	4664      	mov	r4, ip
 8001bcc:	40ab      	lsls	r3, r5
 8001bce:	40ac      	lsls	r4, r5
 8001bd0:	40d6      	lsrs	r6, r2
 8001bd2:	1e5d      	subs	r5, r3, #1
 8001bd4:	41ab      	sbcs	r3, r5
 8001bd6:	4334      	orrs	r4, r6
 8001bd8:	4323      	orrs	r3, r4
 8001bda:	4664      	mov	r4, ip
 8001bdc:	40d4      	lsrs	r4, r2
 8001bde:	1b09      	subs	r1, r1, r4
 8001be0:	e049      	b.n	8001c76 <__aeabi_dsub+0x47e>
 8001be2:	4660      	mov	r0, ip
 8001be4:	1bdc      	subs	r4, r3, r7
 8001be6:	1a46      	subs	r6, r0, r1
 8001be8:	42a3      	cmp	r3, r4
 8001bea:	4180      	sbcs	r0, r0
 8001bec:	4240      	negs	r0, r0
 8001bee:	4681      	mov	r9, r0
 8001bf0:	0030      	movs	r0, r6
 8001bf2:	464e      	mov	r6, r9
 8001bf4:	1b80      	subs	r0, r0, r6
 8001bf6:	4681      	mov	r9, r0
 8001bf8:	0200      	lsls	r0, r0, #8
 8001bfa:	d476      	bmi.n	8001cea <__aeabi_dsub+0x4f2>
 8001bfc:	464b      	mov	r3, r9
 8001bfe:	4323      	orrs	r3, r4
 8001c00:	d000      	beq.n	8001c04 <__aeabi_dsub+0x40c>
 8001c02:	e652      	b.n	80018aa <__aeabi_dsub+0xb2>
 8001c04:	2400      	movs	r4, #0
 8001c06:	2500      	movs	r5, #0
 8001c08:	e771      	b.n	8001aee <__aeabi_dsub+0x2f6>
 8001c0a:	4339      	orrs	r1, r7
 8001c0c:	000c      	movs	r4, r1
 8001c0e:	1e62      	subs	r2, r4, #1
 8001c10:	4194      	sbcs	r4, r2
 8001c12:	18e4      	adds	r4, r4, r3
 8001c14:	429c      	cmp	r4, r3
 8001c16:	419b      	sbcs	r3, r3
 8001c18:	425b      	negs	r3, r3
 8001c1a:	4463      	add	r3, ip
 8001c1c:	4699      	mov	r9, r3
 8001c1e:	464b      	mov	r3, r9
 8001c20:	021b      	lsls	r3, r3, #8
 8001c22:	d400      	bmi.n	8001c26 <__aeabi_dsub+0x42e>
 8001c24:	e756      	b.n	8001ad4 <__aeabi_dsub+0x2dc>
 8001c26:	2301      	movs	r3, #1
 8001c28:	469c      	mov	ip, r3
 8001c2a:	4ba8      	ldr	r3, [pc, #672]	; (8001ecc <__aeabi_dsub+0x6d4>)
 8001c2c:	44e0      	add	r8, ip
 8001c2e:	4598      	cmp	r8, r3
 8001c30:	d038      	beq.n	8001ca4 <__aeabi_dsub+0x4ac>
 8001c32:	464b      	mov	r3, r9
 8001c34:	48a6      	ldr	r0, [pc, #664]	; (8001ed0 <__aeabi_dsub+0x6d8>)
 8001c36:	2201      	movs	r2, #1
 8001c38:	4003      	ands	r3, r0
 8001c3a:	0018      	movs	r0, r3
 8001c3c:	0863      	lsrs	r3, r4, #1
 8001c3e:	4014      	ands	r4, r2
 8001c40:	431c      	orrs	r4, r3
 8001c42:	07c3      	lsls	r3, r0, #31
 8001c44:	431c      	orrs	r4, r3
 8001c46:	0843      	lsrs	r3, r0, #1
 8001c48:	4699      	mov	r9, r3
 8001c4a:	e657      	b.n	80018fc <__aeabi_dsub+0x104>
 8001c4c:	0010      	movs	r0, r2
 8001c4e:	000e      	movs	r6, r1
 8001c50:	3820      	subs	r0, #32
 8001c52:	40c6      	lsrs	r6, r0
 8001c54:	2a20      	cmp	r2, #32
 8001c56:	d004      	beq.n	8001c62 <__aeabi_dsub+0x46a>
 8001c58:	2040      	movs	r0, #64	; 0x40
 8001c5a:	1a82      	subs	r2, r0, r2
 8001c5c:	4091      	lsls	r1, r2
 8001c5e:	430f      	orrs	r7, r1
 8001c60:	46b9      	mov	r9, r7
 8001c62:	464f      	mov	r7, r9
 8001c64:	1e7a      	subs	r2, r7, #1
 8001c66:	4197      	sbcs	r7, r2
 8001c68:	4337      	orrs	r7, r6
 8001c6a:	e60f      	b.n	800188c <__aeabi_dsub+0x94>
 8001c6c:	4662      	mov	r2, ip
 8001c6e:	431a      	orrs	r2, r3
 8001c70:	0013      	movs	r3, r2
 8001c72:	1e5a      	subs	r2, r3, #1
 8001c74:	4193      	sbcs	r3, r2
 8001c76:	1afc      	subs	r4, r7, r3
 8001c78:	42a7      	cmp	r7, r4
 8001c7a:	41bf      	sbcs	r7, r7
 8001c7c:	427f      	negs	r7, r7
 8001c7e:	1bcb      	subs	r3, r1, r7
 8001c80:	4699      	mov	r9, r3
 8001c82:	465d      	mov	r5, fp
 8001c84:	4680      	mov	r8, r0
 8001c86:	e608      	b.n	800189a <__aeabi_dsub+0xa2>
 8001c88:	4666      	mov	r6, ip
 8001c8a:	431e      	orrs	r6, r3
 8001c8c:	d100      	bne.n	8001c90 <__aeabi_dsub+0x498>
 8001c8e:	e0be      	b.n	8001e0e <__aeabi_dsub+0x616>
 8001c90:	1e56      	subs	r6, r2, #1
 8001c92:	2a01      	cmp	r2, #1
 8001c94:	d100      	bne.n	8001c98 <__aeabi_dsub+0x4a0>
 8001c96:	e109      	b.n	8001eac <__aeabi_dsub+0x6b4>
 8001c98:	4c8c      	ldr	r4, [pc, #560]	; (8001ecc <__aeabi_dsub+0x6d4>)
 8001c9a:	42a2      	cmp	r2, r4
 8001c9c:	d100      	bne.n	8001ca0 <__aeabi_dsub+0x4a8>
 8001c9e:	e119      	b.n	8001ed4 <__aeabi_dsub+0x6dc>
 8001ca0:	0032      	movs	r2, r6
 8001ca2:	e6c1      	b.n	8001a28 <__aeabi_dsub+0x230>
 8001ca4:	4642      	mov	r2, r8
 8001ca6:	2400      	movs	r4, #0
 8001ca8:	2300      	movs	r3, #0
 8001caa:	e648      	b.n	800193e <__aeabi_dsub+0x146>
 8001cac:	2020      	movs	r0, #32
 8001cae:	000c      	movs	r4, r1
 8001cb0:	1a80      	subs	r0, r0, r2
 8001cb2:	003e      	movs	r6, r7
 8001cb4:	4087      	lsls	r7, r0
 8001cb6:	4084      	lsls	r4, r0
 8001cb8:	40d6      	lsrs	r6, r2
 8001cba:	1e78      	subs	r0, r7, #1
 8001cbc:	4187      	sbcs	r7, r0
 8001cbe:	40d1      	lsrs	r1, r2
 8001cc0:	4334      	orrs	r4, r6
 8001cc2:	433c      	orrs	r4, r7
 8001cc4:	448c      	add	ip, r1
 8001cc6:	e7a4      	b.n	8001c12 <__aeabi_dsub+0x41a>
 8001cc8:	4a80      	ldr	r2, [pc, #512]	; (8001ecc <__aeabi_dsub+0x6d4>)
 8001cca:	4290      	cmp	r0, r2
 8001ccc:	d100      	bne.n	8001cd0 <__aeabi_dsub+0x4d8>
 8001cce:	e0e9      	b.n	8001ea4 <__aeabi_dsub+0x6ac>
 8001cd0:	19df      	adds	r7, r3, r7
 8001cd2:	429f      	cmp	r7, r3
 8001cd4:	419b      	sbcs	r3, r3
 8001cd6:	4461      	add	r1, ip
 8001cd8:	425b      	negs	r3, r3
 8001cda:	18c9      	adds	r1, r1, r3
 8001cdc:	07cc      	lsls	r4, r1, #31
 8001cde:	087f      	lsrs	r7, r7, #1
 8001ce0:	084b      	lsrs	r3, r1, #1
 8001ce2:	4699      	mov	r9, r3
 8001ce4:	4680      	mov	r8, r0
 8001ce6:	433c      	orrs	r4, r7
 8001ce8:	e6f4      	b.n	8001ad4 <__aeabi_dsub+0x2dc>
 8001cea:	1afc      	subs	r4, r7, r3
 8001cec:	42a7      	cmp	r7, r4
 8001cee:	41bf      	sbcs	r7, r7
 8001cf0:	4663      	mov	r3, ip
 8001cf2:	427f      	negs	r7, r7
 8001cf4:	1ac9      	subs	r1, r1, r3
 8001cf6:	1bcb      	subs	r3, r1, r7
 8001cf8:	4699      	mov	r9, r3
 8001cfa:	465d      	mov	r5, fp
 8001cfc:	e5d5      	b.n	80018aa <__aeabi_dsub+0xb2>
 8001cfe:	08ff      	lsrs	r7, r7, #3
 8001d00:	074b      	lsls	r3, r1, #29
 8001d02:	465d      	mov	r5, fp
 8001d04:	433b      	orrs	r3, r7
 8001d06:	08cc      	lsrs	r4, r1, #3
 8001d08:	e6ee      	b.n	8001ae8 <__aeabi_dsub+0x2f0>
 8001d0a:	4662      	mov	r2, ip
 8001d0c:	431a      	orrs	r2, r3
 8001d0e:	d000      	beq.n	8001d12 <__aeabi_dsub+0x51a>
 8001d10:	e082      	b.n	8001e18 <__aeabi_dsub+0x620>
 8001d12:	000b      	movs	r3, r1
 8001d14:	433b      	orrs	r3, r7
 8001d16:	d11b      	bne.n	8001d50 <__aeabi_dsub+0x558>
 8001d18:	2480      	movs	r4, #128	; 0x80
 8001d1a:	2500      	movs	r5, #0
 8001d1c:	0324      	lsls	r4, r4, #12
 8001d1e:	e6f9      	b.n	8001b14 <__aeabi_dsub+0x31c>
 8001d20:	19dc      	adds	r4, r3, r7
 8001d22:	429c      	cmp	r4, r3
 8001d24:	419b      	sbcs	r3, r3
 8001d26:	4461      	add	r1, ip
 8001d28:	4689      	mov	r9, r1
 8001d2a:	425b      	negs	r3, r3
 8001d2c:	4499      	add	r9, r3
 8001d2e:	464b      	mov	r3, r9
 8001d30:	021b      	lsls	r3, r3, #8
 8001d32:	d444      	bmi.n	8001dbe <__aeabi_dsub+0x5c6>
 8001d34:	2301      	movs	r3, #1
 8001d36:	4698      	mov	r8, r3
 8001d38:	e6cc      	b.n	8001ad4 <__aeabi_dsub+0x2dc>
 8001d3a:	1bdc      	subs	r4, r3, r7
 8001d3c:	4662      	mov	r2, ip
 8001d3e:	42a3      	cmp	r3, r4
 8001d40:	419b      	sbcs	r3, r3
 8001d42:	1a51      	subs	r1, r2, r1
 8001d44:	425b      	negs	r3, r3
 8001d46:	1acb      	subs	r3, r1, r3
 8001d48:	4699      	mov	r9, r3
 8001d4a:	2301      	movs	r3, #1
 8001d4c:	4698      	mov	r8, r3
 8001d4e:	e5a4      	b.n	800189a <__aeabi_dsub+0xa2>
 8001d50:	08ff      	lsrs	r7, r7, #3
 8001d52:	074b      	lsls	r3, r1, #29
 8001d54:	465d      	mov	r5, fp
 8001d56:	433b      	orrs	r3, r7
 8001d58:	08cc      	lsrs	r4, r1, #3
 8001d5a:	e6d7      	b.n	8001b0c <__aeabi_dsub+0x314>
 8001d5c:	4662      	mov	r2, ip
 8001d5e:	431a      	orrs	r2, r3
 8001d60:	0014      	movs	r4, r2
 8001d62:	1e63      	subs	r3, r4, #1
 8001d64:	419c      	sbcs	r4, r3
 8001d66:	e679      	b.n	8001a5c <__aeabi_dsub+0x264>
 8001d68:	0015      	movs	r5, r2
 8001d6a:	4664      	mov	r4, ip
 8001d6c:	3d20      	subs	r5, #32
 8001d6e:	40ec      	lsrs	r4, r5
 8001d70:	46a0      	mov	r8, r4
 8001d72:	2a20      	cmp	r2, #32
 8001d74:	d005      	beq.n	8001d82 <__aeabi_dsub+0x58a>
 8001d76:	2540      	movs	r5, #64	; 0x40
 8001d78:	4664      	mov	r4, ip
 8001d7a:	1aaa      	subs	r2, r5, r2
 8001d7c:	4094      	lsls	r4, r2
 8001d7e:	4323      	orrs	r3, r4
 8001d80:	469a      	mov	sl, r3
 8001d82:	4654      	mov	r4, sl
 8001d84:	1e63      	subs	r3, r4, #1
 8001d86:	419c      	sbcs	r4, r3
 8001d88:	4643      	mov	r3, r8
 8001d8a:	4323      	orrs	r3, r4
 8001d8c:	e773      	b.n	8001c76 <__aeabi_dsub+0x47e>
 8001d8e:	4662      	mov	r2, ip
 8001d90:	431a      	orrs	r2, r3
 8001d92:	d023      	beq.n	8001ddc <__aeabi_dsub+0x5e4>
 8001d94:	000a      	movs	r2, r1
 8001d96:	433a      	orrs	r2, r7
 8001d98:	d000      	beq.n	8001d9c <__aeabi_dsub+0x5a4>
 8001d9a:	e0a0      	b.n	8001ede <__aeabi_dsub+0x6e6>
 8001d9c:	4662      	mov	r2, ip
 8001d9e:	08db      	lsrs	r3, r3, #3
 8001da0:	0752      	lsls	r2, r2, #29
 8001da2:	4313      	orrs	r3, r2
 8001da4:	4662      	mov	r2, ip
 8001da6:	08d4      	lsrs	r4, r2, #3
 8001da8:	e6b0      	b.n	8001b0c <__aeabi_dsub+0x314>
 8001daa:	000b      	movs	r3, r1
 8001dac:	433b      	orrs	r3, r7
 8001dae:	d100      	bne.n	8001db2 <__aeabi_dsub+0x5ba>
 8001db0:	e728      	b.n	8001c04 <__aeabi_dsub+0x40c>
 8001db2:	08ff      	lsrs	r7, r7, #3
 8001db4:	074b      	lsls	r3, r1, #29
 8001db6:	465d      	mov	r5, fp
 8001db8:	433b      	orrs	r3, r7
 8001dba:	08cc      	lsrs	r4, r1, #3
 8001dbc:	e697      	b.n	8001aee <__aeabi_dsub+0x2f6>
 8001dbe:	2302      	movs	r3, #2
 8001dc0:	4698      	mov	r8, r3
 8001dc2:	e736      	b.n	8001c32 <__aeabi_dsub+0x43a>
 8001dc4:	1afc      	subs	r4, r7, r3
 8001dc6:	42a7      	cmp	r7, r4
 8001dc8:	41bf      	sbcs	r7, r7
 8001dca:	4663      	mov	r3, ip
 8001dcc:	427f      	negs	r7, r7
 8001dce:	1ac9      	subs	r1, r1, r3
 8001dd0:	1bcb      	subs	r3, r1, r7
 8001dd2:	4699      	mov	r9, r3
 8001dd4:	2301      	movs	r3, #1
 8001dd6:	465d      	mov	r5, fp
 8001dd8:	4698      	mov	r8, r3
 8001dda:	e55e      	b.n	800189a <__aeabi_dsub+0xa2>
 8001ddc:	074b      	lsls	r3, r1, #29
 8001dde:	08ff      	lsrs	r7, r7, #3
 8001de0:	433b      	orrs	r3, r7
 8001de2:	08cc      	lsrs	r4, r1, #3
 8001de4:	e692      	b.n	8001b0c <__aeabi_dsub+0x314>
 8001de6:	1bdc      	subs	r4, r3, r7
 8001de8:	4660      	mov	r0, ip
 8001dea:	42a3      	cmp	r3, r4
 8001dec:	41b6      	sbcs	r6, r6
 8001dee:	1a40      	subs	r0, r0, r1
 8001df0:	4276      	negs	r6, r6
 8001df2:	1b80      	subs	r0, r0, r6
 8001df4:	4681      	mov	r9, r0
 8001df6:	0200      	lsls	r0, r0, #8
 8001df8:	d560      	bpl.n	8001ebc <__aeabi_dsub+0x6c4>
 8001dfa:	1afc      	subs	r4, r7, r3
 8001dfc:	42a7      	cmp	r7, r4
 8001dfe:	41bf      	sbcs	r7, r7
 8001e00:	4663      	mov	r3, ip
 8001e02:	427f      	negs	r7, r7
 8001e04:	1ac9      	subs	r1, r1, r3
 8001e06:	1bcb      	subs	r3, r1, r7
 8001e08:	4699      	mov	r9, r3
 8001e0a:	465d      	mov	r5, fp
 8001e0c:	e576      	b.n	80018fc <__aeabi_dsub+0x104>
 8001e0e:	08ff      	lsrs	r7, r7, #3
 8001e10:	074b      	lsls	r3, r1, #29
 8001e12:	433b      	orrs	r3, r7
 8001e14:	08cc      	lsrs	r4, r1, #3
 8001e16:	e667      	b.n	8001ae8 <__aeabi_dsub+0x2f0>
 8001e18:	000a      	movs	r2, r1
 8001e1a:	08db      	lsrs	r3, r3, #3
 8001e1c:	433a      	orrs	r2, r7
 8001e1e:	d100      	bne.n	8001e22 <__aeabi_dsub+0x62a>
 8001e20:	e66f      	b.n	8001b02 <__aeabi_dsub+0x30a>
 8001e22:	4662      	mov	r2, ip
 8001e24:	0752      	lsls	r2, r2, #29
 8001e26:	4313      	orrs	r3, r2
 8001e28:	4662      	mov	r2, ip
 8001e2a:	08d4      	lsrs	r4, r2, #3
 8001e2c:	2280      	movs	r2, #128	; 0x80
 8001e2e:	0312      	lsls	r2, r2, #12
 8001e30:	4214      	tst	r4, r2
 8001e32:	d007      	beq.n	8001e44 <__aeabi_dsub+0x64c>
 8001e34:	08c8      	lsrs	r0, r1, #3
 8001e36:	4210      	tst	r0, r2
 8001e38:	d104      	bne.n	8001e44 <__aeabi_dsub+0x64c>
 8001e3a:	465d      	mov	r5, fp
 8001e3c:	0004      	movs	r4, r0
 8001e3e:	08fb      	lsrs	r3, r7, #3
 8001e40:	0749      	lsls	r1, r1, #29
 8001e42:	430b      	orrs	r3, r1
 8001e44:	0f5a      	lsrs	r2, r3, #29
 8001e46:	00db      	lsls	r3, r3, #3
 8001e48:	08db      	lsrs	r3, r3, #3
 8001e4a:	0752      	lsls	r2, r2, #29
 8001e4c:	4313      	orrs	r3, r2
 8001e4e:	e65d      	b.n	8001b0c <__aeabi_dsub+0x314>
 8001e50:	074b      	lsls	r3, r1, #29
 8001e52:	08ff      	lsrs	r7, r7, #3
 8001e54:	433b      	orrs	r3, r7
 8001e56:	08cc      	lsrs	r4, r1, #3
 8001e58:	e649      	b.n	8001aee <__aeabi_dsub+0x2f6>
 8001e5a:	19dc      	adds	r4, r3, r7
 8001e5c:	429c      	cmp	r4, r3
 8001e5e:	419b      	sbcs	r3, r3
 8001e60:	4461      	add	r1, ip
 8001e62:	4689      	mov	r9, r1
 8001e64:	425b      	negs	r3, r3
 8001e66:	4499      	add	r9, r3
 8001e68:	464b      	mov	r3, r9
 8001e6a:	021b      	lsls	r3, r3, #8
 8001e6c:	d400      	bmi.n	8001e70 <__aeabi_dsub+0x678>
 8001e6e:	e631      	b.n	8001ad4 <__aeabi_dsub+0x2dc>
 8001e70:	464a      	mov	r2, r9
 8001e72:	4b17      	ldr	r3, [pc, #92]	; (8001ed0 <__aeabi_dsub+0x6d8>)
 8001e74:	401a      	ands	r2, r3
 8001e76:	2301      	movs	r3, #1
 8001e78:	4691      	mov	r9, r2
 8001e7a:	4698      	mov	r8, r3
 8001e7c:	e62a      	b.n	8001ad4 <__aeabi_dsub+0x2dc>
 8001e7e:	0016      	movs	r6, r2
 8001e80:	4664      	mov	r4, ip
 8001e82:	3e20      	subs	r6, #32
 8001e84:	40f4      	lsrs	r4, r6
 8001e86:	46a0      	mov	r8, r4
 8001e88:	2a20      	cmp	r2, #32
 8001e8a:	d005      	beq.n	8001e98 <__aeabi_dsub+0x6a0>
 8001e8c:	2640      	movs	r6, #64	; 0x40
 8001e8e:	4664      	mov	r4, ip
 8001e90:	1ab2      	subs	r2, r6, r2
 8001e92:	4094      	lsls	r4, r2
 8001e94:	4323      	orrs	r3, r4
 8001e96:	469a      	mov	sl, r3
 8001e98:	4654      	mov	r4, sl
 8001e9a:	1e63      	subs	r3, r4, #1
 8001e9c:	419c      	sbcs	r4, r3
 8001e9e:	4643      	mov	r3, r8
 8001ea0:	431c      	orrs	r4, r3
 8001ea2:	e5db      	b.n	8001a5c <__aeabi_dsub+0x264>
 8001ea4:	0002      	movs	r2, r0
 8001ea6:	2400      	movs	r4, #0
 8001ea8:	2300      	movs	r3, #0
 8001eaa:	e548      	b.n	800193e <__aeabi_dsub+0x146>
 8001eac:	19dc      	adds	r4, r3, r7
 8001eae:	42bc      	cmp	r4, r7
 8001eb0:	41bf      	sbcs	r7, r7
 8001eb2:	4461      	add	r1, ip
 8001eb4:	4689      	mov	r9, r1
 8001eb6:	427f      	negs	r7, r7
 8001eb8:	44b9      	add	r9, r7
 8001eba:	e738      	b.n	8001d2e <__aeabi_dsub+0x536>
 8001ebc:	464b      	mov	r3, r9
 8001ebe:	4323      	orrs	r3, r4
 8001ec0:	d100      	bne.n	8001ec4 <__aeabi_dsub+0x6cc>
 8001ec2:	e69f      	b.n	8001c04 <__aeabi_dsub+0x40c>
 8001ec4:	e606      	b.n	8001ad4 <__aeabi_dsub+0x2dc>
 8001ec6:	46c0      	nop			; (mov r8, r8)
 8001ec8:	000007fe 	.word	0x000007fe
 8001ecc:	000007ff 	.word	0x000007ff
 8001ed0:	ff7fffff 	.word	0xff7fffff
 8001ed4:	08ff      	lsrs	r7, r7, #3
 8001ed6:	074b      	lsls	r3, r1, #29
 8001ed8:	433b      	orrs	r3, r7
 8001eda:	08cc      	lsrs	r4, r1, #3
 8001edc:	e616      	b.n	8001b0c <__aeabi_dsub+0x314>
 8001ede:	4662      	mov	r2, ip
 8001ee0:	08db      	lsrs	r3, r3, #3
 8001ee2:	0752      	lsls	r2, r2, #29
 8001ee4:	4313      	orrs	r3, r2
 8001ee6:	4662      	mov	r2, ip
 8001ee8:	08d4      	lsrs	r4, r2, #3
 8001eea:	2280      	movs	r2, #128	; 0x80
 8001eec:	0312      	lsls	r2, r2, #12
 8001eee:	4214      	tst	r4, r2
 8001ef0:	d007      	beq.n	8001f02 <__aeabi_dsub+0x70a>
 8001ef2:	08c8      	lsrs	r0, r1, #3
 8001ef4:	4210      	tst	r0, r2
 8001ef6:	d104      	bne.n	8001f02 <__aeabi_dsub+0x70a>
 8001ef8:	465d      	mov	r5, fp
 8001efa:	0004      	movs	r4, r0
 8001efc:	08fb      	lsrs	r3, r7, #3
 8001efe:	0749      	lsls	r1, r1, #29
 8001f00:	430b      	orrs	r3, r1
 8001f02:	0f5a      	lsrs	r2, r3, #29
 8001f04:	00db      	lsls	r3, r3, #3
 8001f06:	0752      	lsls	r2, r2, #29
 8001f08:	08db      	lsrs	r3, r3, #3
 8001f0a:	4313      	orrs	r3, r2
 8001f0c:	e5fe      	b.n	8001b0c <__aeabi_dsub+0x314>
 8001f0e:	2300      	movs	r3, #0
 8001f10:	4a01      	ldr	r2, [pc, #4]	; (8001f18 <__aeabi_dsub+0x720>)
 8001f12:	001c      	movs	r4, r3
 8001f14:	e513      	b.n	800193e <__aeabi_dsub+0x146>
 8001f16:	46c0      	nop			; (mov r8, r8)
 8001f18:	000007ff 	.word	0x000007ff

08001f1c <__aeabi_dcmpun>:
 8001f1c:	b570      	push	{r4, r5, r6, lr}
 8001f1e:	0005      	movs	r5, r0
 8001f20:	480c      	ldr	r0, [pc, #48]	; (8001f54 <__aeabi_dcmpun+0x38>)
 8001f22:	031c      	lsls	r4, r3, #12
 8001f24:	0016      	movs	r6, r2
 8001f26:	005b      	lsls	r3, r3, #1
 8001f28:	030a      	lsls	r2, r1, #12
 8001f2a:	0049      	lsls	r1, r1, #1
 8001f2c:	0b12      	lsrs	r2, r2, #12
 8001f2e:	0d49      	lsrs	r1, r1, #21
 8001f30:	0b24      	lsrs	r4, r4, #12
 8001f32:	0d5b      	lsrs	r3, r3, #21
 8001f34:	4281      	cmp	r1, r0
 8001f36:	d008      	beq.n	8001f4a <__aeabi_dcmpun+0x2e>
 8001f38:	4a06      	ldr	r2, [pc, #24]	; (8001f54 <__aeabi_dcmpun+0x38>)
 8001f3a:	2000      	movs	r0, #0
 8001f3c:	4293      	cmp	r3, r2
 8001f3e:	d103      	bne.n	8001f48 <__aeabi_dcmpun+0x2c>
 8001f40:	0020      	movs	r0, r4
 8001f42:	4330      	orrs	r0, r6
 8001f44:	1e43      	subs	r3, r0, #1
 8001f46:	4198      	sbcs	r0, r3
 8001f48:	bd70      	pop	{r4, r5, r6, pc}
 8001f4a:	2001      	movs	r0, #1
 8001f4c:	432a      	orrs	r2, r5
 8001f4e:	d1fb      	bne.n	8001f48 <__aeabi_dcmpun+0x2c>
 8001f50:	e7f2      	b.n	8001f38 <__aeabi_dcmpun+0x1c>
 8001f52:	46c0      	nop			; (mov r8, r8)
 8001f54:	000007ff 	.word	0x000007ff

08001f58 <__aeabi_d2iz>:
 8001f58:	000a      	movs	r2, r1
 8001f5a:	b530      	push	{r4, r5, lr}
 8001f5c:	4c13      	ldr	r4, [pc, #76]	; (8001fac <__aeabi_d2iz+0x54>)
 8001f5e:	0053      	lsls	r3, r2, #1
 8001f60:	0309      	lsls	r1, r1, #12
 8001f62:	0005      	movs	r5, r0
 8001f64:	0b09      	lsrs	r1, r1, #12
 8001f66:	2000      	movs	r0, #0
 8001f68:	0d5b      	lsrs	r3, r3, #21
 8001f6a:	0fd2      	lsrs	r2, r2, #31
 8001f6c:	42a3      	cmp	r3, r4
 8001f6e:	dd04      	ble.n	8001f7a <__aeabi_d2iz+0x22>
 8001f70:	480f      	ldr	r0, [pc, #60]	; (8001fb0 <__aeabi_d2iz+0x58>)
 8001f72:	4283      	cmp	r3, r0
 8001f74:	dd02      	ble.n	8001f7c <__aeabi_d2iz+0x24>
 8001f76:	4b0f      	ldr	r3, [pc, #60]	; (8001fb4 <__aeabi_d2iz+0x5c>)
 8001f78:	18d0      	adds	r0, r2, r3
 8001f7a:	bd30      	pop	{r4, r5, pc}
 8001f7c:	2080      	movs	r0, #128	; 0x80
 8001f7e:	0340      	lsls	r0, r0, #13
 8001f80:	4301      	orrs	r1, r0
 8001f82:	480d      	ldr	r0, [pc, #52]	; (8001fb8 <__aeabi_d2iz+0x60>)
 8001f84:	1ac0      	subs	r0, r0, r3
 8001f86:	281f      	cmp	r0, #31
 8001f88:	dd08      	ble.n	8001f9c <__aeabi_d2iz+0x44>
 8001f8a:	480c      	ldr	r0, [pc, #48]	; (8001fbc <__aeabi_d2iz+0x64>)
 8001f8c:	1ac3      	subs	r3, r0, r3
 8001f8e:	40d9      	lsrs	r1, r3
 8001f90:	000b      	movs	r3, r1
 8001f92:	4258      	negs	r0, r3
 8001f94:	2a00      	cmp	r2, #0
 8001f96:	d1f0      	bne.n	8001f7a <__aeabi_d2iz+0x22>
 8001f98:	0018      	movs	r0, r3
 8001f9a:	e7ee      	b.n	8001f7a <__aeabi_d2iz+0x22>
 8001f9c:	4c08      	ldr	r4, [pc, #32]	; (8001fc0 <__aeabi_d2iz+0x68>)
 8001f9e:	40c5      	lsrs	r5, r0
 8001fa0:	46a4      	mov	ip, r4
 8001fa2:	4463      	add	r3, ip
 8001fa4:	4099      	lsls	r1, r3
 8001fa6:	000b      	movs	r3, r1
 8001fa8:	432b      	orrs	r3, r5
 8001faa:	e7f2      	b.n	8001f92 <__aeabi_d2iz+0x3a>
 8001fac:	000003fe 	.word	0x000003fe
 8001fb0:	0000041d 	.word	0x0000041d
 8001fb4:	7fffffff 	.word	0x7fffffff
 8001fb8:	00000433 	.word	0x00000433
 8001fbc:	00000413 	.word	0x00000413
 8001fc0:	fffffbed 	.word	0xfffffbed

08001fc4 <__aeabi_i2d>:
 8001fc4:	b570      	push	{r4, r5, r6, lr}
 8001fc6:	2800      	cmp	r0, #0
 8001fc8:	d016      	beq.n	8001ff8 <__aeabi_i2d+0x34>
 8001fca:	17c3      	asrs	r3, r0, #31
 8001fcc:	18c5      	adds	r5, r0, r3
 8001fce:	405d      	eors	r5, r3
 8001fd0:	0fc4      	lsrs	r4, r0, #31
 8001fd2:	0028      	movs	r0, r5
 8001fd4:	f000 f84c 	bl	8002070 <__clzsi2>
 8001fd8:	4a11      	ldr	r2, [pc, #68]	; (8002020 <__aeabi_i2d+0x5c>)
 8001fda:	1a12      	subs	r2, r2, r0
 8001fdc:	280a      	cmp	r0, #10
 8001fde:	dc16      	bgt.n	800200e <__aeabi_i2d+0x4a>
 8001fe0:	0003      	movs	r3, r0
 8001fe2:	002e      	movs	r6, r5
 8001fe4:	3315      	adds	r3, #21
 8001fe6:	409e      	lsls	r6, r3
 8001fe8:	230b      	movs	r3, #11
 8001fea:	1a18      	subs	r0, r3, r0
 8001fec:	40c5      	lsrs	r5, r0
 8001fee:	0552      	lsls	r2, r2, #21
 8001ff0:	032d      	lsls	r5, r5, #12
 8001ff2:	0b2d      	lsrs	r5, r5, #12
 8001ff4:	0d53      	lsrs	r3, r2, #21
 8001ff6:	e003      	b.n	8002000 <__aeabi_i2d+0x3c>
 8001ff8:	2400      	movs	r4, #0
 8001ffa:	2300      	movs	r3, #0
 8001ffc:	2500      	movs	r5, #0
 8001ffe:	2600      	movs	r6, #0
 8002000:	051b      	lsls	r3, r3, #20
 8002002:	432b      	orrs	r3, r5
 8002004:	07e4      	lsls	r4, r4, #31
 8002006:	4323      	orrs	r3, r4
 8002008:	0030      	movs	r0, r6
 800200a:	0019      	movs	r1, r3
 800200c:	bd70      	pop	{r4, r5, r6, pc}
 800200e:	380b      	subs	r0, #11
 8002010:	4085      	lsls	r5, r0
 8002012:	0552      	lsls	r2, r2, #21
 8002014:	032d      	lsls	r5, r5, #12
 8002016:	2600      	movs	r6, #0
 8002018:	0b2d      	lsrs	r5, r5, #12
 800201a:	0d53      	lsrs	r3, r2, #21
 800201c:	e7f0      	b.n	8002000 <__aeabi_i2d+0x3c>
 800201e:	46c0      	nop			; (mov r8, r8)
 8002020:	0000041e 	.word	0x0000041e

08002024 <__aeabi_ui2d>:
 8002024:	b510      	push	{r4, lr}
 8002026:	1e04      	subs	r4, r0, #0
 8002028:	d010      	beq.n	800204c <__aeabi_ui2d+0x28>
 800202a:	f000 f821 	bl	8002070 <__clzsi2>
 800202e:	4b0f      	ldr	r3, [pc, #60]	; (800206c <__aeabi_ui2d+0x48>)
 8002030:	1a1b      	subs	r3, r3, r0
 8002032:	280a      	cmp	r0, #10
 8002034:	dc11      	bgt.n	800205a <__aeabi_ui2d+0x36>
 8002036:	220b      	movs	r2, #11
 8002038:	0021      	movs	r1, r4
 800203a:	1a12      	subs	r2, r2, r0
 800203c:	40d1      	lsrs	r1, r2
 800203e:	3015      	adds	r0, #21
 8002040:	030a      	lsls	r2, r1, #12
 8002042:	055b      	lsls	r3, r3, #21
 8002044:	4084      	lsls	r4, r0
 8002046:	0b12      	lsrs	r2, r2, #12
 8002048:	0d5b      	lsrs	r3, r3, #21
 800204a:	e001      	b.n	8002050 <__aeabi_ui2d+0x2c>
 800204c:	2300      	movs	r3, #0
 800204e:	2200      	movs	r2, #0
 8002050:	051b      	lsls	r3, r3, #20
 8002052:	4313      	orrs	r3, r2
 8002054:	0020      	movs	r0, r4
 8002056:	0019      	movs	r1, r3
 8002058:	bd10      	pop	{r4, pc}
 800205a:	0022      	movs	r2, r4
 800205c:	380b      	subs	r0, #11
 800205e:	4082      	lsls	r2, r0
 8002060:	055b      	lsls	r3, r3, #21
 8002062:	0312      	lsls	r2, r2, #12
 8002064:	2400      	movs	r4, #0
 8002066:	0b12      	lsrs	r2, r2, #12
 8002068:	0d5b      	lsrs	r3, r3, #21
 800206a:	e7f1      	b.n	8002050 <__aeabi_ui2d+0x2c>
 800206c:	0000041e 	.word	0x0000041e

08002070 <__clzsi2>:
 8002070:	211c      	movs	r1, #28
 8002072:	2301      	movs	r3, #1
 8002074:	041b      	lsls	r3, r3, #16
 8002076:	4298      	cmp	r0, r3
 8002078:	d301      	bcc.n	800207e <__clzsi2+0xe>
 800207a:	0c00      	lsrs	r0, r0, #16
 800207c:	3910      	subs	r1, #16
 800207e:	0a1b      	lsrs	r3, r3, #8
 8002080:	4298      	cmp	r0, r3
 8002082:	d301      	bcc.n	8002088 <__clzsi2+0x18>
 8002084:	0a00      	lsrs	r0, r0, #8
 8002086:	3908      	subs	r1, #8
 8002088:	091b      	lsrs	r3, r3, #4
 800208a:	4298      	cmp	r0, r3
 800208c:	d301      	bcc.n	8002092 <__clzsi2+0x22>
 800208e:	0900      	lsrs	r0, r0, #4
 8002090:	3904      	subs	r1, #4
 8002092:	a202      	add	r2, pc, #8	; (adr r2, 800209c <__clzsi2+0x2c>)
 8002094:	5c10      	ldrb	r0, [r2, r0]
 8002096:	1840      	adds	r0, r0, r1
 8002098:	4770      	bx	lr
 800209a:	46c0      	nop			; (mov r8, r8)
 800209c:	02020304 	.word	0x02020304
 80020a0:	01010101 	.word	0x01010101
	...

080020ac <st7565_write_buffer>:
#define CMD(c)        do { HAL_GPIO_WritePin( SPICD_GPIO_Port, ST7565_A0_PIN, 0 ); st7565_sendbyte( c ); } while (0);
#define DATA(d)       do { HAL_GPIO_WritePin( SPICD_GPIO_Port, ST7565_A0_PIN, 1 ); st7565_sendbyte( d ); } while (0);
#define DELAY(mS)     do { HAL_Delay( mS ); } while(0);

//Renders the buffer contents
void st7565_write_buffer(uint8_t *buffer) {
 80020ac:	b590      	push	{r4, r7, lr}
 80020ae:	b085      	sub	sp, #20
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	6078      	str	r0, [r7, #4]
	uint8_t c, p;
	for (p = 0; p < 8; p++) {
 80020b4:	230e      	movs	r3, #14
 80020b6:	18fb      	adds	r3, r7, r3
 80020b8:	2200      	movs	r2, #0
 80020ba:	701a      	strb	r2, [r3, #0]
 80020bc:	e060      	b.n	8002180 <st7565_write_buffer+0xd4>
		CMD(ST7565_CMD_SET_PAGE | pagemap[p]);
 80020be:	4b35      	ldr	r3, [pc, #212]	; (8002194 <st7565_write_buffer+0xe8>)
 80020c0:	2200      	movs	r2, #0
 80020c2:	2180      	movs	r1, #128	; 0x80
 80020c4:	0018      	movs	r0, r3
 80020c6:	f002 fcee 	bl	8004aa6 <HAL_GPIO_WritePin>
 80020ca:	230e      	movs	r3, #14
 80020cc:	18fb      	adds	r3, r7, r3
 80020ce:	781b      	ldrb	r3, [r3, #0]
 80020d0:	4a31      	ldr	r2, [pc, #196]	; (8002198 <st7565_write_buffer+0xec>)
 80020d2:	5cd3      	ldrb	r3, [r2, r3]
 80020d4:	2250      	movs	r2, #80	; 0x50
 80020d6:	4252      	negs	r2, r2
 80020d8:	4313      	orrs	r3, r2
 80020da:	b2db      	uxtb	r3, r3
 80020dc:	0018      	movs	r0, r3
 80020de:	f000 f85d 	bl	800219c <st7565_sendbyte>
		CMD(ST7565_CMD_SET_COLUMN_LOWER | (0x0 & 0xf));
 80020e2:	4b2c      	ldr	r3, [pc, #176]	; (8002194 <st7565_write_buffer+0xe8>)
 80020e4:	2200      	movs	r2, #0
 80020e6:	2180      	movs	r1, #128	; 0x80
 80020e8:	0018      	movs	r0, r3
 80020ea:	f002 fcdc 	bl	8004aa6 <HAL_GPIO_WritePin>
 80020ee:	2000      	movs	r0, #0
 80020f0:	f000 f854 	bl	800219c <st7565_sendbyte>
		CMD(ST7565_CMD_SET_COLUMN_UPPER | ((0x0 >> 4) & 0xf));
 80020f4:	4b27      	ldr	r3, [pc, #156]	; (8002194 <st7565_write_buffer+0xe8>)
 80020f6:	2200      	movs	r2, #0
 80020f8:	2180      	movs	r1, #128	; 0x80
 80020fa:	0018      	movs	r0, r3
 80020fc:	f002 fcd3 	bl	8004aa6 <HAL_GPIO_WritePin>
 8002100:	2010      	movs	r0, #16
 8002102:	f000 f84b 	bl	800219c <st7565_sendbyte>
		CMD(ST7565_CMD_RMW);
 8002106:	4b23      	ldr	r3, [pc, #140]	; (8002194 <st7565_write_buffer+0xe8>)
 8002108:	2200      	movs	r2, #0
 800210a:	2180      	movs	r1, #128	; 0x80
 800210c:	0018      	movs	r0, r3
 800210e:	f002 fcca 	bl	8004aa6 <HAL_GPIO_WritePin>
 8002112:	20e0      	movs	r0, #224	; 0xe0
 8002114:	f000 f842 	bl	800219c <st7565_sendbyte>
		DATA(0xff);
 8002118:	4b1e      	ldr	r3, [pc, #120]	; (8002194 <st7565_write_buffer+0xe8>)
 800211a:	2201      	movs	r2, #1
 800211c:	2180      	movs	r1, #128	; 0x80
 800211e:	0018      	movs	r0, r3
 8002120:	f002 fcc1 	bl	8004aa6 <HAL_GPIO_WritePin>
 8002124:	20ff      	movs	r0, #255	; 0xff
 8002126:	f000 f839 	bl	800219c <st7565_sendbyte>
		for (c = 0; c < 128; c++) {
 800212a:	230f      	movs	r3, #15
 800212c:	18fb      	adds	r3, r7, r3
 800212e:	2200      	movs	r2, #0
 8002130:	701a      	strb	r2, [r3, #0]
 8002132:	e019      	b.n	8002168 <st7565_write_buffer+0xbc>
			DATA(buffer[(128 * p) + c]);
 8002134:	4b17      	ldr	r3, [pc, #92]	; (8002194 <st7565_write_buffer+0xe8>)
 8002136:	2201      	movs	r2, #1
 8002138:	2180      	movs	r1, #128	; 0x80
 800213a:	0018      	movs	r0, r3
 800213c:	f002 fcb3 	bl	8004aa6 <HAL_GPIO_WritePin>
 8002140:	230e      	movs	r3, #14
 8002142:	18fb      	adds	r3, r7, r3
 8002144:	781b      	ldrb	r3, [r3, #0]
 8002146:	01da      	lsls	r2, r3, #7
 8002148:	240f      	movs	r4, #15
 800214a:	193b      	adds	r3, r7, r4
 800214c:	781b      	ldrb	r3, [r3, #0]
 800214e:	18d3      	adds	r3, r2, r3
 8002150:	001a      	movs	r2, r3
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	189b      	adds	r3, r3, r2
 8002156:	781b      	ldrb	r3, [r3, #0]
 8002158:	0018      	movs	r0, r3
 800215a:	f000 f81f 	bl	800219c <st7565_sendbyte>
		for (c = 0; c < 128; c++) {
 800215e:	193b      	adds	r3, r7, r4
 8002160:	781a      	ldrb	r2, [r3, #0]
 8002162:	193b      	adds	r3, r7, r4
 8002164:	3201      	adds	r2, #1
 8002166:	701a      	strb	r2, [r3, #0]
 8002168:	230f      	movs	r3, #15
 800216a:	18fb      	adds	r3, r7, r3
 800216c:	781b      	ldrb	r3, [r3, #0]
 800216e:	b25b      	sxtb	r3, r3
 8002170:	2b00      	cmp	r3, #0
 8002172:	dadf      	bge.n	8002134 <st7565_write_buffer+0x88>
	for (p = 0; p < 8; p++) {
 8002174:	210e      	movs	r1, #14
 8002176:	187b      	adds	r3, r7, r1
 8002178:	781a      	ldrb	r2, [r3, #0]
 800217a:	187b      	adds	r3, r7, r1
 800217c:	3201      	adds	r2, #1
 800217e:	701a      	strb	r2, [r3, #0]
 8002180:	230e      	movs	r3, #14
 8002182:	18fb      	adds	r3, r7, r3
 8002184:	781b      	ldrb	r3, [r3, #0]
 8002186:	2b07      	cmp	r3, #7
 8002188:	d999      	bls.n	80020be <st7565_write_buffer+0x12>
		}
	}
}
 800218a:	46c0      	nop			; (mov r8, r8)
 800218c:	46c0      	nop			; (mov r8, r8)
 800218e:	46bd      	mov	sp, r7
 8002190:	b005      	add	sp, #20
 8002192:	bd90      	pop	{r4, r7, pc}
 8002194:	48000800 	.word	0x48000800
 8002198:	20000400 	.word	0x20000400

0800219c <st7565_sendbyte>:

// Simulates an SPI write using GPIO
// with byte, The byte to send
void st7565_sendbyte(uint8_t byte) {
 800219c:	b580      	push	{r7, lr}
 800219e:	b082      	sub	sp, #8
 80021a0:	af00      	add	r7, sp, #0
 80021a2:	0002      	movs	r2, r0
 80021a4:	1dfb      	adds	r3, r7, #7
 80021a6:	701a      	strb	r2, [r3, #0]

	HAL_SPI_Transmit(&hspi1, &byte, 1, 100);
 80021a8:	1df9      	adds	r1, r7, #7
 80021aa:	4804      	ldr	r0, [pc, #16]	; (80021bc <st7565_sendbyte+0x20>)
 80021ac:	2364      	movs	r3, #100	; 0x64
 80021ae:	2201      	movs	r2, #1
 80021b0:	f003 fa2e 	bl	8005610 <HAL_SPI_Transmit>
}
 80021b4:	46c0      	nop			; (mov r8, r8)
 80021b6:	46bd      	mov	sp, r7
 80021b8:	b002      	add	sp, #8
 80021ba:	bd80      	pop	{r7, pc}
 80021bc:	20002260 	.word	0x20002260

080021c0 <st7565_init>:

//Initialises the ST7565 LCD display
void st7565_init(void) {
 80021c0:	b580      	push	{r7, lr}
 80021c2:	af00      	add	r7, sp, #0
	// Set clock pin to high
//	HAL_GPIO_WritePin(SPISCLK_GPIO_Port, ST7565_SCLK_PIN, 1);
	// Set data pin to output and high
//	HAL_GPIO_WritePin(SPISDAT_GPIO_Port, ST7565_SDAT_PIN, 1);
	// Configure backlight pin to output and set high (off)
	HAL_GPIO_WritePin(BL_GPIO_Port, ST7565_BL_PIN, 1);
 80021c4:	2380      	movs	r3, #128	; 0x80
 80021c6:	0059      	lsls	r1, r3, #1
 80021c8:	2390      	movs	r3, #144	; 0x90
 80021ca:	05db      	lsls	r3, r3, #23
 80021cc:	2201      	movs	r2, #1
 80021ce:	0018      	movs	r0, r3
 80021d0:	f002 fc69 	bl	8004aa6 <HAL_GPIO_WritePin>

	// Configure A0 pin to output and set high
	HAL_GPIO_WritePin(SPICD_GPIO_Port, ST7565_A0_PIN, 1);
 80021d4:	4b4e      	ldr	r3, [pc, #312]	; (8002310 <st7565_init+0x150>)
 80021d6:	2201      	movs	r2, #1
 80021d8:	2180      	movs	r1, #128	; 0x80
 80021da:	0018      	movs	r0, r3
 80021dc:	f002 fc63 	bl	8004aa6 <HAL_GPIO_WritePin>

	// Configure Reset pin and set high
	HAL_GPIO_WritePin(SPIRST_GPIO_Port, ST7565_RST_PIN, 1);
 80021e0:	2380      	movs	r3, #128	; 0x80
 80021e2:	0099      	lsls	r1, r3, #2
 80021e4:	2390      	movs	r3, #144	; 0x90
 80021e6:	05db      	lsls	r3, r3, #23
 80021e8:	2201      	movs	r2, #1
 80021ea:	0018      	movs	r0, r3
 80021ec:	f002 fc5b 	bl	8004aa6 <HAL_GPIO_WritePin>

	// Configure select pin and set high
	HAL_GPIO_WritePin(SPICS_GPIO_Port, ST7565_CS_PIN, 1);
 80021f0:	4b48      	ldr	r3, [pc, #288]	; (8002314 <st7565_init+0x154>)
 80021f2:	2201      	movs	r2, #1
 80021f4:	2140      	movs	r1, #64	; 0x40
 80021f6:	0018      	movs	r0, r3
 80021f8:	f002 fc55 	bl	8004aa6 <HAL_GPIO_WritePin>

	// Reset
	HAL_GPIO_WritePin(SPICS_GPIO_Port, ST7565_CS_PIN, 0);    // Set CS low
 80021fc:	4b45      	ldr	r3, [pc, #276]	; (8002314 <st7565_init+0x154>)
 80021fe:	2200      	movs	r2, #0
 8002200:	2140      	movs	r1, #64	; 0x40
 8002202:	0018      	movs	r0, r3
 8002204:	f002 fc4f 	bl	8004aa6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SPIRST_GPIO_Port, ST7565_RST_PIN, 0);  // Set reset low
 8002208:	2380      	movs	r3, #128	; 0x80
 800220a:	0099      	lsls	r1, r3, #2
 800220c:	2390      	movs	r3, #144	; 0x90
 800220e:	05db      	lsls	r3, r3, #23
 8002210:	2200      	movs	r2, #0
 8002212:	0018      	movs	r0, r3
 8002214:	f002 fc47 	bl	8004aa6 <HAL_GPIO_WritePin>
	DELAY(500);                                              // Wait 500ms
 8002218:	23fa      	movs	r3, #250	; 0xfa
 800221a:	005b      	lsls	r3, r3, #1
 800221c:	0018      	movs	r0, r3
 800221e:	f001 fd0d 	bl	8003c3c <HAL_Delay>
	HAL_GPIO_WritePin(SPIRST_GPIO_Port, ST7565_RST_PIN, 1);  // Set reset high
 8002222:	2380      	movs	r3, #128	; 0x80
 8002224:	0099      	lsls	r1, r3, #2
 8002226:	2390      	movs	r3, #144	; 0x90
 8002228:	05db      	lsls	r3, r3, #23
 800222a:	2201      	movs	r2, #1
 800222c:	0018      	movs	r0, r3
 800222e:	f002 fc3a 	bl	8004aa6 <HAL_GPIO_WritePin>

	// Configure Display
	CMD(ST7565_CMD_SET_BIAS_7);                      // LCD Bias Select
 8002232:	4b37      	ldr	r3, [pc, #220]	; (8002310 <st7565_init+0x150>)
 8002234:	2200      	movs	r2, #0
 8002236:	2180      	movs	r1, #128	; 0x80
 8002238:	0018      	movs	r0, r3
 800223a:	f002 fc34 	bl	8004aa6 <HAL_GPIO_WritePin>
 800223e:	20a3      	movs	r0, #163	; 0xa3
 8002240:	f7ff ffac 	bl	800219c <st7565_sendbyte>
	CMD(ST7565_CMD_SET_ADC_NORMAL);                  // ADC Select
 8002244:	4b32      	ldr	r3, [pc, #200]	; (8002310 <st7565_init+0x150>)
 8002246:	2200      	movs	r2, #0
 8002248:	2180      	movs	r1, #128	; 0x80
 800224a:	0018      	movs	r0, r3
 800224c:	f002 fc2b 	bl	8004aa6 <HAL_GPIO_WritePin>
 8002250:	20a0      	movs	r0, #160	; 0xa0
 8002252:	f7ff ffa3 	bl	800219c <st7565_sendbyte>
	CMD(ST7565_CMD_SET_COM_NORMAL);                  // SHL Select
 8002256:	4b2e      	ldr	r3, [pc, #184]	; (8002310 <st7565_init+0x150>)
 8002258:	2200      	movs	r2, #0
 800225a:	2180      	movs	r1, #128	; 0x80
 800225c:	0018      	movs	r0, r3
 800225e:	f002 fc22 	bl	8004aa6 <HAL_GPIO_WritePin>
 8002262:	20c0      	movs	r0, #192	; 0xc0
 8002264:	f7ff ff9a 	bl	800219c <st7565_sendbyte>
	CMD(ST7565_CMD_SET_DISP_START_LINE);             // Initial Display Line
 8002268:	4b29      	ldr	r3, [pc, #164]	; (8002310 <st7565_init+0x150>)
 800226a:	2200      	movs	r2, #0
 800226c:	2180      	movs	r1, #128	; 0x80
 800226e:	0018      	movs	r0, r3
 8002270:	f002 fc19 	bl	8004aa6 <HAL_GPIO_WritePin>
 8002274:	2040      	movs	r0, #64	; 0x40
 8002276:	f7ff ff91 	bl	800219c <st7565_sendbyte>
	CMD(ST7565_CMD_SET_POWER_CONTROL | 0x04);        // Turn on voltage converter (VC=1, VR=0, VF=0)
 800227a:	4b25      	ldr	r3, [pc, #148]	; (8002310 <st7565_init+0x150>)
 800227c:	2200      	movs	r2, #0
 800227e:	2180      	movs	r1, #128	; 0x80
 8002280:	0018      	movs	r0, r3
 8002282:	f002 fc10 	bl	8004aa6 <HAL_GPIO_WritePin>
 8002286:	202c      	movs	r0, #44	; 0x2c
 8002288:	f7ff ff88 	bl	800219c <st7565_sendbyte>
	DELAY(50);                						 // Wait 50ms
 800228c:	2032      	movs	r0, #50	; 0x32
 800228e:	f001 fcd5 	bl	8003c3c <HAL_Delay>
	CMD(ST7565_CMD_SET_POWER_CONTROL | 0x06);        // Turn on voltage regulator (VC=1, VR=1, VF=0)
 8002292:	4b1f      	ldr	r3, [pc, #124]	; (8002310 <st7565_init+0x150>)
 8002294:	2200      	movs	r2, #0
 8002296:	2180      	movs	r1, #128	; 0x80
 8002298:	0018      	movs	r0, r3
 800229a:	f002 fc04 	bl	8004aa6 <HAL_GPIO_WritePin>
 800229e:	202e      	movs	r0, #46	; 0x2e
 80022a0:	f7ff ff7c 	bl	800219c <st7565_sendbyte>
	DELAY(50);                                       // Wait 50ms
 80022a4:	2032      	movs	r0, #50	; 0x32
 80022a6:	f001 fcc9 	bl	8003c3c <HAL_Delay>
	CMD(ST7565_CMD_SET_POWER_CONTROL | 0x07);        // Turn on voltage follower
 80022aa:	4b19      	ldr	r3, [pc, #100]	; (8002310 <st7565_init+0x150>)
 80022ac:	2200      	movs	r2, #0
 80022ae:	2180      	movs	r1, #128	; 0x80
 80022b0:	0018      	movs	r0, r3
 80022b2:	f002 fbf8 	bl	8004aa6 <HAL_GPIO_WritePin>
 80022b6:	202f      	movs	r0, #47	; 0x2f
 80022b8:	f7ff ff70 	bl	800219c <st7565_sendbyte>
	DELAY(10);                                       // Wait 10ms
 80022bc:	200a      	movs	r0, #10
 80022be:	f001 fcbd 	bl	8003c3c <HAL_Delay>
	CMD(ST7565_CMD_SET_RESISTOR_RATIO | 0x6);        // Set LCD operating voltage
 80022c2:	4b13      	ldr	r3, [pc, #76]	; (8002310 <st7565_init+0x150>)
 80022c4:	2200      	movs	r2, #0
 80022c6:	2180      	movs	r1, #128	; 0x80
 80022c8:	0018      	movs	r0, r3
 80022ca:	f002 fbec 	bl	8004aa6 <HAL_GPIO_WritePin>
 80022ce:	2026      	movs	r0, #38	; 0x26
 80022d0:	f7ff ff64 	bl	800219c <st7565_sendbyte>

	// Turn display on
	CMD(ST7565_CMD_DISPLAY_ON);
 80022d4:	4b0e      	ldr	r3, [pc, #56]	; (8002310 <st7565_init+0x150>)
 80022d6:	2200      	movs	r2, #0
 80022d8:	2180      	movs	r1, #128	; 0x80
 80022da:	0018      	movs	r0, r3
 80022dc:	f002 fbe3 	bl	8004aa6 <HAL_GPIO_WritePin>
 80022e0:	20af      	movs	r0, #175	; 0xaf
 80022e2:	f7ff ff5b 	bl	800219c <st7565_sendbyte>
	CMD(ST7565_CMD_SET_ALLPTS_NORMAL);
 80022e6:	4b0a      	ldr	r3, [pc, #40]	; (8002310 <st7565_init+0x150>)
 80022e8:	2200      	movs	r2, #0
 80022ea:	2180      	movs	r1, #128	; 0x80
 80022ec:	0018      	movs	r0, r3
 80022ee:	f002 fbda 	bl	8004aa6 <HAL_GPIO_WritePin>
 80022f2:	20a4      	movs	r0, #164	; 0xa4
 80022f4:	f7ff ff52 	bl	800219c <st7565_sendbyte>
	st7565_set_brightness(0x00);   // arduino 0x18
 80022f8:	2000      	movs	r0, #0
 80022fa:	f000 f829 	bl	8002350 <st7565_set_brightness>
 	st7565_clear_screen();
 80022fe:	f000 f84b 	bl	8002398 <st7565_clear_screen>

	//Write the Adafruit-Logo, clear the buffer, wait and fade out
	//st7565_write_buffer(buffer);
	st7565_clear_buffer(buffer);
 8002302:	4b05      	ldr	r3, [pc, #20]	; (8002318 <st7565_init+0x158>)
 8002304:	0018      	movs	r0, r3
 8002306:	f000 f8a3 	bl	8002450 <st7565_clear_buffer>
	//DELAY(800);
	//st7565_fade_out(24);
}
 800230a:	46c0      	nop			; (mov r8, r8)
 800230c:	46bd      	mov	sp, r7
 800230e:	bd80      	pop	{r7, pc}
 8002310:	48000800 	.word	0x48000800
 8002314:	48000400 	.word	0x48000400
 8002318:	20000000 	.word	0x20000000

0800231c <st7565_backlight_enable>:

//Enables the backlight
void st7565_backlight_enable(void) {
 800231c:	b580      	push	{r7, lr}
 800231e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin( BL_GPIO_Port, ST7565_BL_PIN, 1);
 8002320:	2380      	movs	r3, #128	; 0x80
 8002322:	0059      	lsls	r1, r3, #1
 8002324:	2390      	movs	r3, #144	; 0x90
 8002326:	05db      	lsls	r3, r3, #23
 8002328:	2201      	movs	r2, #1
 800232a:	0018      	movs	r0, r3
 800232c:	f002 fbbb 	bl	8004aa6 <HAL_GPIO_WritePin>
}
 8002330:	46c0      	nop			; (mov r8, r8)
 8002332:	46bd      	mov	sp, r7
 8002334:	bd80      	pop	{r7, pc}

08002336 <st7565_backlight_disable>:

///Disables the backlight
void st7565_backlight_disable(void) {
 8002336:	b580      	push	{r7, lr}
 8002338:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin( BL_GPIO_Port, ST7565_BL_PIN, 0);
 800233a:	2380      	movs	r3, #128	; 0x80
 800233c:	0059      	lsls	r1, r3, #1
 800233e:	2390      	movs	r3, #144	; 0x90
 8002340:	05db      	lsls	r3, r3, #23
 8002342:	2200      	movs	r2, #0
 8002344:	0018      	movs	r0, r3
 8002346:	f002 fbae 	bl	8004aa6 <HAL_GPIO_WritePin>
}
 800234a:	46c0      	nop			; (mov r8, r8)
 800234c:	46bd      	mov	sp, r7
 800234e:	bd80      	pop	{r7, pc}

08002350 <st7565_set_brightness>:

//Sets the display brightness
void st7565_set_brightness(uint8_t val) {
 8002350:	b580      	push	{r7, lr}
 8002352:	b082      	sub	sp, #8
 8002354:	af00      	add	r7, sp, #0
 8002356:	0002      	movs	r2, r0
 8002358:	1dfb      	adds	r3, r7, #7
 800235a:	701a      	strb	r2, [r3, #0]
	CMD(ST7565_CMD_SET_VOLUME_FIRST);
 800235c:	4b0d      	ldr	r3, [pc, #52]	; (8002394 <st7565_set_brightness+0x44>)
 800235e:	2200      	movs	r2, #0
 8002360:	2180      	movs	r1, #128	; 0x80
 8002362:	0018      	movs	r0, r3
 8002364:	f002 fb9f 	bl	8004aa6 <HAL_GPIO_WritePin>
 8002368:	2081      	movs	r0, #129	; 0x81
 800236a:	f7ff ff17 	bl	800219c <st7565_sendbyte>
	CMD(ST7565_CMD_SET_VOLUME_SECOND | (val & 0x3f));
 800236e:	4b09      	ldr	r3, [pc, #36]	; (8002394 <st7565_set_brightness+0x44>)
 8002370:	2200      	movs	r2, #0
 8002372:	2180      	movs	r1, #128	; 0x80
 8002374:	0018      	movs	r0, r3
 8002376:	f002 fb96 	bl	8004aa6 <HAL_GPIO_WritePin>
 800237a:	1dfb      	adds	r3, r7, #7
 800237c:	781b      	ldrb	r3, [r3, #0]
 800237e:	223f      	movs	r2, #63	; 0x3f
 8002380:	4013      	ands	r3, r2
 8002382:	b2db      	uxtb	r3, r3
 8002384:	0018      	movs	r0, r3
 8002386:	f7ff ff09 	bl	800219c <st7565_sendbyte>
}
 800238a:	46c0      	nop			; (mov r8, r8)
 800238c:	46bd      	mov	sp, r7
 800238e:	b002      	add	sp, #8
 8002390:	bd80      	pop	{r7, pc}
 8002392:	46c0      	nop			; (mov r8, r8)
 8002394:	48000800 	.word	0x48000800

08002398 <st7565_clear_screen>:
		DELAY(100);
	}
}

//Clears the screen
void st7565_clear_screen(void) {
 8002398:	b580      	push	{r7, lr}
 800239a:	b082      	sub	sp, #8
 800239c:	af00      	add	r7, sp, #0
	uint8_t p, c;
	for (p = 0; p < 8; p++) {
 800239e:	1dfb      	adds	r3, r7, #7
 80023a0:	2200      	movs	r2, #0
 80023a2:	701a      	strb	r2, [r3, #0]
 80023a4:	e049      	b.n	800243a <st7565_clear_screen+0xa2>
		CMD(ST7565_CMD_SET_PAGE | p);
 80023a6:	4b29      	ldr	r3, [pc, #164]	; (800244c <st7565_clear_screen+0xb4>)
 80023a8:	2200      	movs	r2, #0
 80023aa:	2180      	movs	r1, #128	; 0x80
 80023ac:	0018      	movs	r0, r3
 80023ae:	f002 fb7a 	bl	8004aa6 <HAL_GPIO_WritePin>
 80023b2:	1dfb      	adds	r3, r7, #7
 80023b4:	781b      	ldrb	r3, [r3, #0]
 80023b6:	2250      	movs	r2, #80	; 0x50
 80023b8:	4252      	negs	r2, r2
 80023ba:	4313      	orrs	r3, r2
 80023bc:	b2db      	uxtb	r3, r3
 80023be:	0018      	movs	r0, r3
 80023c0:	f7ff feec 	bl	800219c <st7565_sendbyte>
		for (c = 0; c < 129; c++) {
 80023c4:	1dbb      	adds	r3, r7, #6
 80023c6:	2200      	movs	r2, #0
 80023c8:	701a      	strb	r2, [r3, #0]
 80023ca:	e02d      	b.n	8002428 <st7565_clear_screen+0x90>
			CMD(ST7565_CMD_SET_COLUMN_LOWER | (c & 0xf));
 80023cc:	4b1f      	ldr	r3, [pc, #124]	; (800244c <st7565_clear_screen+0xb4>)
 80023ce:	2200      	movs	r2, #0
 80023d0:	2180      	movs	r1, #128	; 0x80
 80023d2:	0018      	movs	r0, r3
 80023d4:	f002 fb67 	bl	8004aa6 <HAL_GPIO_WritePin>
 80023d8:	1dbb      	adds	r3, r7, #6
 80023da:	781b      	ldrb	r3, [r3, #0]
 80023dc:	220f      	movs	r2, #15
 80023de:	4013      	ands	r3, r2
 80023e0:	b2db      	uxtb	r3, r3
 80023e2:	0018      	movs	r0, r3
 80023e4:	f7ff feda 	bl	800219c <st7565_sendbyte>
			CMD(ST7565_CMD_SET_COLUMN_UPPER | ((c >> 4) & 0xf));
 80023e8:	4b18      	ldr	r3, [pc, #96]	; (800244c <st7565_clear_screen+0xb4>)
 80023ea:	2200      	movs	r2, #0
 80023ec:	2180      	movs	r1, #128	; 0x80
 80023ee:	0018      	movs	r0, r3
 80023f0:	f002 fb59 	bl	8004aa6 <HAL_GPIO_WritePin>
 80023f4:	1dbb      	adds	r3, r7, #6
 80023f6:	781b      	ldrb	r3, [r3, #0]
 80023f8:	091b      	lsrs	r3, r3, #4
 80023fa:	b2db      	uxtb	r3, r3
 80023fc:	b25b      	sxtb	r3, r3
 80023fe:	2210      	movs	r2, #16
 8002400:	4313      	orrs	r3, r2
 8002402:	b25b      	sxtb	r3, r3
 8002404:	b2db      	uxtb	r3, r3
 8002406:	0018      	movs	r0, r3
 8002408:	f7ff fec8 	bl	800219c <st7565_sendbyte>
			DATA(0x0);
 800240c:	4b0f      	ldr	r3, [pc, #60]	; (800244c <st7565_clear_screen+0xb4>)
 800240e:	2201      	movs	r2, #1
 8002410:	2180      	movs	r1, #128	; 0x80
 8002412:	0018      	movs	r0, r3
 8002414:	f002 fb47 	bl	8004aa6 <HAL_GPIO_WritePin>
 8002418:	2000      	movs	r0, #0
 800241a:	f7ff febf 	bl	800219c <st7565_sendbyte>
		for (c = 0; c < 129; c++) {
 800241e:	1dbb      	adds	r3, r7, #6
 8002420:	781a      	ldrb	r2, [r3, #0]
 8002422:	1dbb      	adds	r3, r7, #6
 8002424:	3201      	adds	r2, #1
 8002426:	701a      	strb	r2, [r3, #0]
 8002428:	1dbb      	adds	r3, r7, #6
 800242a:	781b      	ldrb	r3, [r3, #0]
 800242c:	2b80      	cmp	r3, #128	; 0x80
 800242e:	d9cd      	bls.n	80023cc <st7565_clear_screen+0x34>
	for (p = 0; p < 8; p++) {
 8002430:	1dfb      	adds	r3, r7, #7
 8002432:	781a      	ldrb	r2, [r3, #0]
 8002434:	1dfb      	adds	r3, r7, #7
 8002436:	3201      	adds	r2, #1
 8002438:	701a      	strb	r2, [r3, #0]
 800243a:	1dfb      	adds	r3, r7, #7
 800243c:	781b      	ldrb	r3, [r3, #0]
 800243e:	2b07      	cmp	r3, #7
 8002440:	d9b1      	bls.n	80023a6 <st7565_clear_screen+0xe>
		}
	}
}
 8002442:	46c0      	nop			; (mov r8, r8)
 8002444:	46c0      	nop			; (mov r8, r8)
 8002446:	46bd      	mov	sp, r7
 8002448:	b002      	add	sp, #8
 800244a:	bd80      	pop	{r7, pc}
 800244c:	48000800 	.word	0x48000800

08002450 <st7565_clear_buffer>:

// clear everything
void st7565_clear_buffer(uint8_t *buff) {
 8002450:	b580      	push	{r7, lr}
 8002452:	b082      	sub	sp, #8
 8002454:	af00      	add	r7, sp, #0
 8002456:	6078      	str	r0, [r7, #4]
	memset(buff, 0, 1024);
 8002458:	2380      	movs	r3, #128	; 0x80
 800245a:	00da      	lsls	r2, r3, #3
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	2100      	movs	r1, #0
 8002460:	0018      	movs	r0, r3
 8002462:	f003 fce7 	bl	8005e34 <memset>
}
 8002466:	46c0      	nop			; (mov r8, r8)
 8002468:	46bd      	mov	sp, r7
 800246a:	b002      	add	sp, #8
 800246c:	bd80      	pop	{r7, pc}

0800246e <st7565_setpixel>:
		}
	}
}

//set *pixel on *x/*y with *color
void st7565_setpixel(uint8_t *buff, uint8_t x, uint8_t y, uint8_t color) {
 800246e:	b590      	push	{r4, r7, lr}
 8002470:	b083      	sub	sp, #12
 8002472:	af00      	add	r7, sp, #0
 8002474:	6078      	str	r0, [r7, #4]
 8002476:	000c      	movs	r4, r1
 8002478:	0010      	movs	r0, r2
 800247a:	0019      	movs	r1, r3
 800247c:	1cfb      	adds	r3, r7, #3
 800247e:	1c22      	adds	r2, r4, #0
 8002480:	701a      	strb	r2, [r3, #0]
 8002482:	1cbb      	adds	r3, r7, #2
 8002484:	1c02      	adds	r2, r0, #0
 8002486:	701a      	strb	r2, [r3, #0]
 8002488:	1c7b      	adds	r3, r7, #1
 800248a:	1c0a      	adds	r2, r1, #0
 800248c:	701a      	strb	r2, [r3, #0]
	if ((x >= LCDWIDTH) || (y >= LCDHEIGHT))
 800248e:	1cfb      	adds	r3, r7, #3
 8002490:	781b      	ldrb	r3, [r3, #0]
 8002492:	b25b      	sxtb	r3, r3
 8002494:	2b00      	cmp	r3, #0
 8002496:	db51      	blt.n	800253c <st7565_setpixel+0xce>
 8002498:	1cbb      	adds	r3, r7, #2
 800249a:	781b      	ldrb	r3, [r3, #0]
 800249c:	2b3f      	cmp	r3, #63	; 0x3f
 800249e:	d84d      	bhi.n	800253c <st7565_setpixel+0xce>
		return;
// x is which column

	if (color)
 80024a0:	1c7b      	adds	r3, r7, #1
 80024a2:	781b      	ldrb	r3, [r3, #0]
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d023      	beq.n	80024f0 <st7565_setpixel+0x82>
		buff[x + (y / 8) * 128] |= (1 << (7 - (y % 8)));
 80024a8:	1cfb      	adds	r3, r7, #3
 80024aa:	781a      	ldrb	r2, [r3, #0]
 80024ac:	1cbb      	adds	r3, r7, #2
 80024ae:	781b      	ldrb	r3, [r3, #0]
 80024b0:	08db      	lsrs	r3, r3, #3
 80024b2:	b2d8      	uxtb	r0, r3
 80024b4:	0003      	movs	r3, r0
 80024b6:	01db      	lsls	r3, r3, #7
 80024b8:	18d3      	adds	r3, r2, r3
 80024ba:	001a      	movs	r2, r3
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	189b      	adds	r3, r3, r2
 80024c0:	781b      	ldrb	r3, [r3, #0]
 80024c2:	b25a      	sxtb	r2, r3
 80024c4:	1cbb      	adds	r3, r7, #2
 80024c6:	781b      	ldrb	r3, [r3, #0]
 80024c8:	43db      	mvns	r3, r3
 80024ca:	2107      	movs	r1, #7
 80024cc:	400b      	ands	r3, r1
 80024ce:	2101      	movs	r1, #1
 80024d0:	4099      	lsls	r1, r3
 80024d2:	000b      	movs	r3, r1
 80024d4:	b25b      	sxtb	r3, r3
 80024d6:	4313      	orrs	r3, r2
 80024d8:	b259      	sxtb	r1, r3
 80024da:	1cfb      	adds	r3, r7, #3
 80024dc:	781a      	ldrb	r2, [r3, #0]
 80024de:	0003      	movs	r3, r0
 80024e0:	01db      	lsls	r3, r3, #7
 80024e2:	18d3      	adds	r3, r2, r3
 80024e4:	001a      	movs	r2, r3
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	189b      	adds	r3, r3, r2
 80024ea:	b2ca      	uxtb	r2, r1
 80024ec:	701a      	strb	r2, [r3, #0]
 80024ee:	e026      	b.n	800253e <st7565_setpixel+0xd0>
	else
		buff[x + (y / 8) * 128] &= ~(1 << (7 - (y % 8)));
 80024f0:	1cfb      	adds	r3, r7, #3
 80024f2:	781a      	ldrb	r2, [r3, #0]
 80024f4:	1cbb      	adds	r3, r7, #2
 80024f6:	781b      	ldrb	r3, [r3, #0]
 80024f8:	08db      	lsrs	r3, r3, #3
 80024fa:	b2d8      	uxtb	r0, r3
 80024fc:	0003      	movs	r3, r0
 80024fe:	01db      	lsls	r3, r3, #7
 8002500:	18d3      	adds	r3, r2, r3
 8002502:	001a      	movs	r2, r3
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	189b      	adds	r3, r3, r2
 8002508:	781b      	ldrb	r3, [r3, #0]
 800250a:	b25b      	sxtb	r3, r3
 800250c:	1cba      	adds	r2, r7, #2
 800250e:	7812      	ldrb	r2, [r2, #0]
 8002510:	43d2      	mvns	r2, r2
 8002512:	2107      	movs	r1, #7
 8002514:	400a      	ands	r2, r1
 8002516:	2101      	movs	r1, #1
 8002518:	4091      	lsls	r1, r2
 800251a:	000a      	movs	r2, r1
 800251c:	b252      	sxtb	r2, r2
 800251e:	43d2      	mvns	r2, r2
 8002520:	b252      	sxtb	r2, r2
 8002522:	4013      	ands	r3, r2
 8002524:	b259      	sxtb	r1, r3
 8002526:	1cfb      	adds	r3, r7, #3
 8002528:	781a      	ldrb	r2, [r3, #0]
 800252a:	0003      	movs	r3, r0
 800252c:	01db      	lsls	r3, r3, #7
 800252e:	18d3      	adds	r3, r2, r3
 8002530:	001a      	movs	r2, r3
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	189b      	adds	r3, r3, r2
 8002536:	b2ca      	uxtb	r2, r1
 8002538:	701a      	strb	r2, [r3, #0]
 800253a:	e000      	b.n	800253e <st7565_setpixel+0xd0>
		return;
 800253c:	46c0      	nop			; (mov r8, r8)
}
 800253e:	46bd      	mov	sp, r7
 8002540:	b003      	add	sp, #12
 8002542:	bd90      	pop	{r4, r7, pc}

08002544 <st7565_drawbitmap>:

//draw pixel at *x/*y from *bitmap
void st7565_drawbitmap(uint8_t *buff, uint8_t x, uint8_t y,
		const uint8_t *bitmap, uint8_t w, uint8_t h, uint8_t color) {
 8002544:	b5b0      	push	{r4, r5, r7, lr}
 8002546:	b086      	sub	sp, #24
 8002548:	af00      	add	r7, sp, #0
 800254a:	60f8      	str	r0, [r7, #12]
 800254c:	0008      	movs	r0, r1
 800254e:	0011      	movs	r1, r2
 8002550:	607b      	str	r3, [r7, #4]
 8002552:	230b      	movs	r3, #11
 8002554:	18fb      	adds	r3, r7, r3
 8002556:	1c02      	adds	r2, r0, #0
 8002558:	701a      	strb	r2, [r3, #0]
 800255a:	230a      	movs	r3, #10
 800255c:	18fb      	adds	r3, r7, r3
 800255e:	1c0a      	adds	r2, r1, #0
 8002560:	701a      	strb	r2, [r3, #0]
	uint8_t j, i;
	for (j = 0; j < h; j++) {
 8002562:	2317      	movs	r3, #23
 8002564:	18fb      	adds	r3, r7, r3
 8002566:	2200      	movs	r2, #0
 8002568:	701a      	strb	r2, [r3, #0]
 800256a:	e04c      	b.n	8002606 <st7565_drawbitmap+0xc2>
		for (i = 0; i < w; i++) {
 800256c:	2316      	movs	r3, #22
 800256e:	18fb      	adds	r3, r7, r3
 8002570:	2200      	movs	r2, #0
 8002572:	701a      	strb	r2, [r3, #0]
 8002574:	e037      	b.n	80025e6 <st7565_drawbitmap+0xa2>
			if (*(bitmap + i + (j / 8) * w) & (1 << (j % 8))) {
 8002576:	2416      	movs	r4, #22
 8002578:	193b      	adds	r3, r7, r4
 800257a:	781a      	ldrb	r2, [r3, #0]
 800257c:	2017      	movs	r0, #23
 800257e:	183b      	adds	r3, r7, r0
 8002580:	781b      	ldrb	r3, [r3, #0]
 8002582:	08db      	lsrs	r3, r3, #3
 8002584:	b2db      	uxtb	r3, r3
 8002586:	0019      	movs	r1, r3
 8002588:	2320      	movs	r3, #32
 800258a:	2508      	movs	r5, #8
 800258c:	195b      	adds	r3, r3, r5
 800258e:	19db      	adds	r3, r3, r7
 8002590:	781b      	ldrb	r3, [r3, #0]
 8002592:	434b      	muls	r3, r1
 8002594:	18d3      	adds	r3, r2, r3
 8002596:	687a      	ldr	r2, [r7, #4]
 8002598:	18d3      	adds	r3, r2, r3
 800259a:	781b      	ldrb	r3, [r3, #0]
 800259c:	0019      	movs	r1, r3
 800259e:	183b      	adds	r3, r7, r0
 80025a0:	781b      	ldrb	r3, [r3, #0]
 80025a2:	2207      	movs	r2, #7
 80025a4:	4013      	ands	r3, r2
 80025a6:	4119      	asrs	r1, r3
 80025a8:	000b      	movs	r3, r1
 80025aa:	2201      	movs	r2, #1
 80025ac:	4013      	ands	r3, r2
 80025ae:	d014      	beq.n	80025da <st7565_drawbitmap+0x96>
				st7565_setpixel(buff, x + i, y + j, color);
 80025b0:	230b      	movs	r3, #11
 80025b2:	18fa      	adds	r2, r7, r3
 80025b4:	193b      	adds	r3, r7, r4
 80025b6:	7812      	ldrb	r2, [r2, #0]
 80025b8:	781b      	ldrb	r3, [r3, #0]
 80025ba:	18d3      	adds	r3, r2, r3
 80025bc:	b2d9      	uxtb	r1, r3
 80025be:	230a      	movs	r3, #10
 80025c0:	18fa      	adds	r2, r7, r3
 80025c2:	183b      	adds	r3, r7, r0
 80025c4:	7812      	ldrb	r2, [r2, #0]
 80025c6:	781b      	ldrb	r3, [r3, #0]
 80025c8:	18d3      	adds	r3, r2, r3
 80025ca:	b2da      	uxtb	r2, r3
 80025cc:	2328      	movs	r3, #40	; 0x28
 80025ce:	195b      	adds	r3, r3, r5
 80025d0:	19db      	adds	r3, r3, r7
 80025d2:	781b      	ldrb	r3, [r3, #0]
 80025d4:	68f8      	ldr	r0, [r7, #12]
 80025d6:	f7ff ff4a 	bl	800246e <st7565_setpixel>
		for (i = 0; i < w; i++) {
 80025da:	2116      	movs	r1, #22
 80025dc:	187b      	adds	r3, r7, r1
 80025de:	781a      	ldrb	r2, [r3, #0]
 80025e0:	187b      	adds	r3, r7, r1
 80025e2:	3201      	adds	r2, #1
 80025e4:	701a      	strb	r2, [r3, #0]
 80025e6:	2316      	movs	r3, #22
 80025e8:	18fa      	adds	r2, r7, r3
 80025ea:	2320      	movs	r3, #32
 80025ec:	2108      	movs	r1, #8
 80025ee:	185b      	adds	r3, r3, r1
 80025f0:	19db      	adds	r3, r3, r7
 80025f2:	7812      	ldrb	r2, [r2, #0]
 80025f4:	781b      	ldrb	r3, [r3, #0]
 80025f6:	429a      	cmp	r2, r3
 80025f8:	d3bd      	bcc.n	8002576 <st7565_drawbitmap+0x32>
	for (j = 0; j < h; j++) {
 80025fa:	2117      	movs	r1, #23
 80025fc:	187b      	adds	r3, r7, r1
 80025fe:	781a      	ldrb	r2, [r3, #0]
 8002600:	187b      	adds	r3, r7, r1
 8002602:	3201      	adds	r2, #1
 8002604:	701a      	strb	r2, [r3, #0]
 8002606:	2317      	movs	r3, #23
 8002608:	18fa      	adds	r2, r7, r3
 800260a:	2324      	movs	r3, #36	; 0x24
 800260c:	2108      	movs	r1, #8
 800260e:	185b      	adds	r3, r3, r1
 8002610:	19db      	adds	r3, r3, r7
 8002612:	7812      	ldrb	r2, [r2, #0]
 8002614:	781b      	ldrb	r3, [r3, #0]
 8002616:	429a      	cmp	r2, r3
 8002618:	d3a8      	bcc.n	800256c <st7565_drawbitmap+0x28>
			}
		}
	}
}
 800261a:	46c0      	nop			; (mov r8, r8)
 800261c:	46c0      	nop			; (mov r8, r8)
 800261e:	46bd      	mov	sp, r7
 8002620:	b006      	add	sp, #24
 8002622:	bdb0      	pop	{r4, r5, r7, pc}

08002624 <st7565_drawstring>:

//draw a sting at *x/*y
void st7565_drawstring(uint8_t *buff, uint8_t x, uint8_t line, uint8_t *c) {
 8002624:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002626:	b085      	sub	sp, #20
 8002628:	af00      	add	r7, sp, #0
 800262a:	60f8      	str	r0, [r7, #12]
 800262c:	0008      	movs	r0, r1
 800262e:	0011      	movs	r1, r2
 8002630:	607b      	str	r3, [r7, #4]
 8002632:	230b      	movs	r3, #11
 8002634:	18fb      	adds	r3, r7, r3
 8002636:	1c02      	adds	r2, r0, #0
 8002638:	701a      	strb	r2, [r3, #0]
 800263a:	230a      	movs	r3, #10
 800263c:	18fb      	adds	r3, r7, r3
 800263e:	1c0a      	adds	r2, r1, #0
 8002640:	701a      	strb	r2, [r3, #0]
	while (c[0] != 0) {
 8002642:	e025      	b.n	8002690 <st7565_drawstring+0x6c>
		st7565_drawchar(buff, x, line, c[0]);
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	781c      	ldrb	r4, [r3, #0]
 8002648:	260a      	movs	r6, #10
 800264a:	19bb      	adds	r3, r7, r6
 800264c:	781a      	ldrb	r2, [r3, #0]
 800264e:	250b      	movs	r5, #11
 8002650:	197b      	adds	r3, r7, r5
 8002652:	7819      	ldrb	r1, [r3, #0]
 8002654:	68f8      	ldr	r0, [r7, #12]
 8002656:	0023      	movs	r3, r4
 8002658:	f000 f824 	bl	80026a4 <st7565_drawchar>
		c++;
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	3301      	adds	r3, #1
 8002660:	607b      	str	r3, [r7, #4]
		x += 6; // 6 pixels wide
 8002662:	0029      	movs	r1, r5
 8002664:	187b      	adds	r3, r7, r1
 8002666:	187a      	adds	r2, r7, r1
 8002668:	7812      	ldrb	r2, [r2, #0]
 800266a:	3206      	adds	r2, #6
 800266c:	701a      	strb	r2, [r3, #0]
		if (x + 6 >= LCDWIDTH) {
 800266e:	187b      	adds	r3, r7, r1
 8002670:	781b      	ldrb	r3, [r3, #0]
 8002672:	2b79      	cmp	r3, #121	; 0x79
 8002674:	d907      	bls.n	8002686 <st7565_drawstring+0x62>
			x = 0; // ran out of this line
 8002676:	187b      	adds	r3, r7, r1
 8002678:	2200      	movs	r2, #0
 800267a:	701a      	strb	r2, [r3, #0]
			line++;
 800267c:	19bb      	adds	r3, r7, r6
 800267e:	781a      	ldrb	r2, [r3, #0]
 8002680:	19bb      	adds	r3, r7, r6
 8002682:	3201      	adds	r2, #1
 8002684:	701a      	strb	r2, [r3, #0]
		}
		if (line >= (LCDHEIGHT / 8))
 8002686:	230a      	movs	r3, #10
 8002688:	18fb      	adds	r3, r7, r3
 800268a:	781b      	ldrb	r3, [r3, #0]
 800268c:	2b07      	cmp	r3, #7
 800268e:	d804      	bhi.n	800269a <st7565_drawstring+0x76>
	while (c[0] != 0) {
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	781b      	ldrb	r3, [r3, #0]
 8002694:	2b00      	cmp	r3, #0
 8002696:	d1d5      	bne.n	8002644 <st7565_drawstring+0x20>
 8002698:	e000      	b.n	800269c <st7565_drawstring+0x78>
			return; // ran out of space :(
 800269a:	46c0      	nop			; (mov r8, r8)
	}
}
 800269c:	46bd      	mov	sp, r7
 800269e:	b005      	add	sp, #20
 80026a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

080026a4 <st7565_drawchar>:

//draw a single character at *x/*y
void st7565_drawchar(uint8_t *buff, uint8_t x, uint8_t line, uint8_t c) {
 80026a4:	b590      	push	{r4, r7, lr}
 80026a6:	b085      	sub	sp, #20
 80026a8:	af00      	add	r7, sp, #0
 80026aa:	6078      	str	r0, [r7, #4]
 80026ac:	000c      	movs	r4, r1
 80026ae:	0010      	movs	r0, r2
 80026b0:	0019      	movs	r1, r3
 80026b2:	1cfb      	adds	r3, r7, #3
 80026b4:	1c22      	adds	r2, r4, #0
 80026b6:	701a      	strb	r2, [r3, #0]
 80026b8:	1cbb      	adds	r3, r7, #2
 80026ba:	1c02      	adds	r2, r0, #0
 80026bc:	701a      	strb	r2, [r3, #0]
 80026be:	1c7b      	adds	r3, r7, #1
 80026c0:	1c0a      	adds	r2, r1, #0
 80026c2:	701a      	strb	r2, [r3, #0]
	uint8_t i;
	for (i = 0; i < 5; i++) {
 80026c4:	230f      	movs	r3, #15
 80026c6:	18fb      	adds	r3, r7, r3
 80026c8:	2200      	movs	r2, #0
 80026ca:	701a      	strb	r2, [r3, #0]
 80026cc:	e020      	b.n	8002710 <st7565_drawchar+0x6c>
		buff[x + (line * 128)] = *(lcdfont5x7 + (c * 5) + i);
 80026ce:	1c7b      	adds	r3, r7, #1
 80026d0:	781a      	ldrb	r2, [r3, #0]
 80026d2:	0013      	movs	r3, r2
 80026d4:	009b      	lsls	r3, r3, #2
 80026d6:	189b      	adds	r3, r3, r2
 80026d8:	001a      	movs	r2, r3
 80026da:	200f      	movs	r0, #15
 80026dc:	183b      	adds	r3, r7, r0
 80026de:	781b      	ldrb	r3, [r3, #0]
 80026e0:	18d2      	adds	r2, r2, r3
 80026e2:	4b10      	ldr	r3, [pc, #64]	; (8002724 <st7565_drawchar+0x80>)
 80026e4:	18d2      	adds	r2, r2, r3
 80026e6:	1cfb      	adds	r3, r7, #3
 80026e8:	7819      	ldrb	r1, [r3, #0]
 80026ea:	1cbb      	adds	r3, r7, #2
 80026ec:	781b      	ldrb	r3, [r3, #0]
 80026ee:	01db      	lsls	r3, r3, #7
 80026f0:	18cb      	adds	r3, r1, r3
 80026f2:	0019      	movs	r1, r3
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	185b      	adds	r3, r3, r1
 80026f8:	7812      	ldrb	r2, [r2, #0]
 80026fa:	701a      	strb	r2, [r3, #0]
		x++;
 80026fc:	1cfb      	adds	r3, r7, #3
 80026fe:	781a      	ldrb	r2, [r3, #0]
 8002700:	1cfb      	adds	r3, r7, #3
 8002702:	3201      	adds	r2, #1
 8002704:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < 5; i++) {
 8002706:	183b      	adds	r3, r7, r0
 8002708:	781a      	ldrb	r2, [r3, #0]
 800270a:	183b      	adds	r3, r7, r0
 800270c:	3201      	adds	r2, #1
 800270e:	701a      	strb	r2, [r3, #0]
 8002710:	230f      	movs	r3, #15
 8002712:	18fb      	adds	r3, r7, r3
 8002714:	781b      	ldrb	r3, [r3, #0]
 8002716:	2b04      	cmp	r3, #4
 8002718:	d9d9      	bls.n	80026ce <st7565_drawchar+0x2a>
	}
}
 800271a:	46c0      	nop			; (mov r8, r8)
 800271c:	46c0      	nop			; (mov r8, r8)
 800271e:	46bd      	mov	sp, r7
 8002720:	b005      	add	sp, #20
 8002722:	bd90      	pop	{r4, r7, pc}
 8002724:	08008ef0 	.word	0x08008ef0

08002728 <st7565_drawline>:
	buff[x + (y / 8) * 128] &= ~(1 << (7 - (y % 8)));
}

// Draw a line, based on bresenham's algorithm
void st7565_drawline(uint8_t *buff, uint8_t x0, uint8_t y0, uint8_t x1,
		uint8_t y1, uint8_t color) {
 8002728:	b590      	push	{r4, r7, lr}
 800272a:	b085      	sub	sp, #20
 800272c:	af00      	add	r7, sp, #0
 800272e:	6078      	str	r0, [r7, #4]
 8002730:	000c      	movs	r4, r1
 8002732:	0010      	movs	r0, r2
 8002734:	0019      	movs	r1, r3
 8002736:	1cfb      	adds	r3, r7, #3
 8002738:	1c22      	adds	r2, r4, #0
 800273a:	701a      	strb	r2, [r3, #0]
 800273c:	1cbb      	adds	r3, r7, #2
 800273e:	1c02      	adds	r2, r0, #0
 8002740:	701a      	strb	r2, [r3, #0]
 8002742:	1c7b      	adds	r3, r7, #1
 8002744:	1c0a      	adds	r2, r1, #0
 8002746:	701a      	strb	r2, [r3, #0]
	uint8_t tmp, swap = 0;
 8002748:	230f      	movs	r3, #15
 800274a:	18fb      	adds	r3, r7, r3
 800274c:	2200      	movs	r2, #0
 800274e:	701a      	strb	r2, [r3, #0]
	uint8_t x, y;
	uint8_t dx, dy;
	int8_t ystep, err;

	if (x0 > x1)
 8002750:	1cfa      	adds	r2, r7, #3
 8002752:	1c7b      	adds	r3, r7, #1
 8002754:	7812      	ldrb	r2, [r2, #0]
 8002756:	781b      	ldrb	r3, [r3, #0]
 8002758:	429a      	cmp	r2, r3
 800275a:	d908      	bls.n	800276e <st7565_drawline+0x46>
		dx = x0 - x1;
 800275c:	230c      	movs	r3, #12
 800275e:	18fb      	adds	r3, r7, r3
 8002760:	1cf9      	adds	r1, r7, #3
 8002762:	1c7a      	adds	r2, r7, #1
 8002764:	7809      	ldrb	r1, [r1, #0]
 8002766:	7812      	ldrb	r2, [r2, #0]
 8002768:	1a8a      	subs	r2, r1, r2
 800276a:	701a      	strb	r2, [r3, #0]
 800276c:	e007      	b.n	800277e <st7565_drawline+0x56>
	else
		dx = x1 - x0;
 800276e:	230c      	movs	r3, #12
 8002770:	18fb      	adds	r3, r7, r3
 8002772:	1c79      	adds	r1, r7, #1
 8002774:	1cfa      	adds	r2, r7, #3
 8002776:	7809      	ldrb	r1, [r1, #0]
 8002778:	7812      	ldrb	r2, [r2, #0]
 800277a:	1a8a      	subs	r2, r1, r2
 800277c:	701a      	strb	r2, [r3, #0]
	if (y0 > y1)
 800277e:	1cba      	adds	r2, r7, #2
 8002780:	2020      	movs	r0, #32
 8002782:	183b      	adds	r3, r7, r0
 8002784:	7812      	ldrb	r2, [r2, #0]
 8002786:	781b      	ldrb	r3, [r3, #0]
 8002788:	429a      	cmp	r2, r3
 800278a:	d908      	bls.n	800279e <st7565_drawline+0x76>
		dy = y0 - y1;
 800278c:	230b      	movs	r3, #11
 800278e:	18fa      	adds	r2, r7, r3
 8002790:	1cb9      	adds	r1, r7, #2
 8002792:	183b      	adds	r3, r7, r0
 8002794:	7809      	ldrb	r1, [r1, #0]
 8002796:	781b      	ldrb	r3, [r3, #0]
 8002798:	1acb      	subs	r3, r1, r3
 800279a:	7013      	strb	r3, [r2, #0]
 800279c:	e008      	b.n	80027b0 <st7565_drawline+0x88>
	else
		dy = y1 - y0;
 800279e:	230b      	movs	r3, #11
 80027a0:	18fa      	adds	r2, r7, r3
 80027a2:	2320      	movs	r3, #32
 80027a4:	18fb      	adds	r3, r7, r3
 80027a6:	1cb8      	adds	r0, r7, #2
 80027a8:	7819      	ldrb	r1, [r3, #0]
 80027aa:	7803      	ldrb	r3, [r0, #0]
 80027ac:	1acb      	subs	r3, r1, r3
 80027ae:	7013      	strb	r3, [r2, #0]

	if (dy > dx) {
 80027b0:	200b      	movs	r0, #11
 80027b2:	183a      	adds	r2, r7, r0
 80027b4:	240c      	movs	r4, #12
 80027b6:	193b      	adds	r3, r7, r4
 80027b8:	7812      	ldrb	r2, [r2, #0]
 80027ba:	781b      	ldrb	r3, [r3, #0]
 80027bc:	429a      	cmp	r2, r3
 80027be:	d929      	bls.n	8002814 <st7565_drawline+0xec>
		swap = 1;
 80027c0:	230f      	movs	r3, #15
 80027c2:	18fb      	adds	r3, r7, r3
 80027c4:	2201      	movs	r2, #1
 80027c6:	701a      	strb	r2, [r3, #0]
		tmp = dx;
 80027c8:	2108      	movs	r1, #8
 80027ca:	187b      	adds	r3, r7, r1
 80027cc:	193a      	adds	r2, r7, r4
 80027ce:	7812      	ldrb	r2, [r2, #0]
 80027d0:	701a      	strb	r2, [r3, #0]
		dx = dy;
 80027d2:	193b      	adds	r3, r7, r4
 80027d4:	183a      	adds	r2, r7, r0
 80027d6:	7812      	ldrb	r2, [r2, #0]
 80027d8:	701a      	strb	r2, [r3, #0]
		dy = tmp;
 80027da:	183b      	adds	r3, r7, r0
 80027dc:	187a      	adds	r2, r7, r1
 80027de:	7812      	ldrb	r2, [r2, #0]
 80027e0:	701a      	strb	r2, [r3, #0]
		tmp = x0;
 80027e2:	187b      	adds	r3, r7, r1
 80027e4:	1cfa      	adds	r2, r7, #3
 80027e6:	7812      	ldrb	r2, [r2, #0]
 80027e8:	701a      	strb	r2, [r3, #0]
		x0 = y0;
 80027ea:	1cfb      	adds	r3, r7, #3
 80027ec:	1cba      	adds	r2, r7, #2
 80027ee:	7812      	ldrb	r2, [r2, #0]
 80027f0:	701a      	strb	r2, [r3, #0]
		y0 = tmp;
 80027f2:	1cbb      	adds	r3, r7, #2
 80027f4:	187a      	adds	r2, r7, r1
 80027f6:	7812      	ldrb	r2, [r2, #0]
 80027f8:	701a      	strb	r2, [r3, #0]
		tmp = x1;
 80027fa:	187b      	adds	r3, r7, r1
 80027fc:	1c7a      	adds	r2, r7, #1
 80027fe:	7812      	ldrb	r2, [r2, #0]
 8002800:	701a      	strb	r2, [r3, #0]
		x1 = y1;
 8002802:	1c7a      	adds	r2, r7, #1
 8002804:	2020      	movs	r0, #32
 8002806:	183b      	adds	r3, r7, r0
 8002808:	781b      	ldrb	r3, [r3, #0]
 800280a:	7013      	strb	r3, [r2, #0]
		y1 = tmp;
 800280c:	183b      	adds	r3, r7, r0
 800280e:	187a      	adds	r2, r7, r1
 8002810:	7812      	ldrb	r2, [r2, #0]
 8002812:	701a      	strb	r2, [r3, #0]
	}
	if (x0 > x1) {
 8002814:	1cfa      	adds	r2, r7, #3
 8002816:	1c7b      	adds	r3, r7, #1
 8002818:	7812      	ldrb	r2, [r2, #0]
 800281a:	781b      	ldrb	r3, [r3, #0]
 800281c:	429a      	cmp	r2, r3
 800281e:	d919      	bls.n	8002854 <st7565_drawline+0x12c>
		tmp = x0;
 8002820:	2108      	movs	r1, #8
 8002822:	187b      	adds	r3, r7, r1
 8002824:	1cfa      	adds	r2, r7, #3
 8002826:	7812      	ldrb	r2, [r2, #0]
 8002828:	701a      	strb	r2, [r3, #0]
		x0 = x1;
 800282a:	1cfb      	adds	r3, r7, #3
 800282c:	1c7a      	adds	r2, r7, #1
 800282e:	7812      	ldrb	r2, [r2, #0]
 8002830:	701a      	strb	r2, [r3, #0]
		x1 = tmp;
 8002832:	1c7b      	adds	r3, r7, #1
 8002834:	187a      	adds	r2, r7, r1
 8002836:	7812      	ldrb	r2, [r2, #0]
 8002838:	701a      	strb	r2, [r3, #0]
		tmp = y0;
 800283a:	187b      	adds	r3, r7, r1
 800283c:	1cba      	adds	r2, r7, #2
 800283e:	7812      	ldrb	r2, [r2, #0]
 8002840:	701a      	strb	r2, [r3, #0]
		y0 = y1;
 8002842:	1cba      	adds	r2, r7, #2
 8002844:	2020      	movs	r0, #32
 8002846:	183b      	adds	r3, r7, r0
 8002848:	781b      	ldrb	r3, [r3, #0]
 800284a:	7013      	strb	r3, [r2, #0]
		y1 = tmp;
 800284c:	183b      	adds	r3, r7, r0
 800284e:	187a      	adds	r2, r7, r1
 8002850:	7812      	ldrb	r2, [r2, #0]
 8002852:	701a      	strb	r2, [r3, #0]
	}

	err = dx >> 1;
 8002854:	230c      	movs	r3, #12
 8002856:	18fb      	adds	r3, r7, r3
 8002858:	781b      	ldrb	r3, [r3, #0]
 800285a:	085b      	lsrs	r3, r3, #1
 800285c:	b2da      	uxtb	r2, r3
 800285e:	2309      	movs	r3, #9
 8002860:	18fb      	adds	r3, r7, r3
 8002862:	701a      	strb	r2, [r3, #0]
	if (y1 > y0)
 8002864:	2320      	movs	r3, #32
 8002866:	18fb      	adds	r3, r7, r3
 8002868:	1cb9      	adds	r1, r7, #2
 800286a:	781a      	ldrb	r2, [r3, #0]
 800286c:	780b      	ldrb	r3, [r1, #0]
 800286e:	429a      	cmp	r2, r3
 8002870:	d904      	bls.n	800287c <st7565_drawline+0x154>
		ystep = 1;
 8002872:	230a      	movs	r3, #10
 8002874:	18fb      	adds	r3, r7, r3
 8002876:	2201      	movs	r2, #1
 8002878:	701a      	strb	r2, [r3, #0]
 800287a:	e003      	b.n	8002884 <st7565_drawline+0x15c>
	else
		ystep = -1;
 800287c:	230a      	movs	r3, #10
 800287e:	18fb      	adds	r3, r7, r3
 8002880:	22ff      	movs	r2, #255	; 0xff
 8002882:	701a      	strb	r2, [r3, #0]
	y = y0;
 8002884:	230d      	movs	r3, #13
 8002886:	18fb      	adds	r3, r7, r3
 8002888:	1cba      	adds	r2, r7, #2
 800288a:	7812      	ldrb	r2, [r2, #0]
 800288c:	701a      	strb	r2, [r3, #0]
	for (x = x0; x <= x1; x++) {
 800288e:	230e      	movs	r3, #14
 8002890:	18fb      	adds	r3, r7, r3
 8002892:	1cfa      	adds	r2, r7, #3
 8002894:	7812      	ldrb	r2, [r2, #0]
 8002896:	701a      	strb	r2, [r3, #0]
 8002898:	e045      	b.n	8002926 <st7565_drawline+0x1fe>
		if (swap == 0)
 800289a:	230f      	movs	r3, #15
 800289c:	18fb      	adds	r3, r7, r3
 800289e:	781b      	ldrb	r3, [r3, #0]
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d10d      	bne.n	80028c0 <st7565_drawline+0x198>
			st7565_setpixel(buff, x, y, color);
 80028a4:	2324      	movs	r3, #36	; 0x24
 80028a6:	18fb      	adds	r3, r7, r3
 80028a8:	781c      	ldrb	r4, [r3, #0]
 80028aa:	230d      	movs	r3, #13
 80028ac:	18fb      	adds	r3, r7, r3
 80028ae:	781a      	ldrb	r2, [r3, #0]
 80028b0:	230e      	movs	r3, #14
 80028b2:	18fb      	adds	r3, r7, r3
 80028b4:	7819      	ldrb	r1, [r3, #0]
 80028b6:	6878      	ldr	r0, [r7, #4]
 80028b8:	0023      	movs	r3, r4
 80028ba:	f7ff fdd8 	bl	800246e <st7565_setpixel>
 80028be:	e00c      	b.n	80028da <st7565_drawline+0x1b2>
		else
			st7565_setpixel(buff, y, x, color);
 80028c0:	2324      	movs	r3, #36	; 0x24
 80028c2:	18fb      	adds	r3, r7, r3
 80028c4:	781c      	ldrb	r4, [r3, #0]
 80028c6:	230e      	movs	r3, #14
 80028c8:	18fb      	adds	r3, r7, r3
 80028ca:	781a      	ldrb	r2, [r3, #0]
 80028cc:	230d      	movs	r3, #13
 80028ce:	18fb      	adds	r3, r7, r3
 80028d0:	7819      	ldrb	r1, [r3, #0]
 80028d2:	6878      	ldr	r0, [r7, #4]
 80028d4:	0023      	movs	r3, r4
 80028d6:	f7ff fdca 	bl	800246e <st7565_setpixel>
		err -= (uint8_t) dy;
 80028da:	2009      	movs	r0, #9
 80028dc:	183b      	adds	r3, r7, r0
 80028de:	781a      	ldrb	r2, [r3, #0]
 80028e0:	230b      	movs	r3, #11
 80028e2:	18fb      	adds	r3, r7, r3
 80028e4:	781b      	ldrb	r3, [r3, #0]
 80028e6:	1ad3      	subs	r3, r2, r3
 80028e8:	b2da      	uxtb	r2, r3
 80028ea:	183b      	adds	r3, r7, r0
 80028ec:	701a      	strb	r2, [r3, #0]
		if (err < 0) {
 80028ee:	183b      	adds	r3, r7, r0
 80028f0:	781b      	ldrb	r3, [r3, #0]
 80028f2:	2b7f      	cmp	r3, #127	; 0x7f
 80028f4:	d911      	bls.n	800291a <st7565_drawline+0x1f2>
			y += (uint8_t) ystep;
 80028f6:	230a      	movs	r3, #10
 80028f8:	18fb      	adds	r3, r7, r3
 80028fa:	7819      	ldrb	r1, [r3, #0]
 80028fc:	220d      	movs	r2, #13
 80028fe:	18bb      	adds	r3, r7, r2
 8002900:	18ba      	adds	r2, r7, r2
 8002902:	7812      	ldrb	r2, [r2, #0]
 8002904:	188a      	adds	r2, r1, r2
 8002906:	701a      	strb	r2, [r3, #0]
			err += (uint8_t) dx;
 8002908:	183b      	adds	r3, r7, r0
 800290a:	781a      	ldrb	r2, [r3, #0]
 800290c:	230c      	movs	r3, #12
 800290e:	18fb      	adds	r3, r7, r3
 8002910:	781b      	ldrb	r3, [r3, #0]
 8002912:	18d3      	adds	r3, r2, r3
 8002914:	b2da      	uxtb	r2, r3
 8002916:	183b      	adds	r3, r7, r0
 8002918:	701a      	strb	r2, [r3, #0]
	for (x = x0; x <= x1; x++) {
 800291a:	210e      	movs	r1, #14
 800291c:	187b      	adds	r3, r7, r1
 800291e:	781a      	ldrb	r2, [r3, #0]
 8002920:	187b      	adds	r3, r7, r1
 8002922:	3201      	adds	r2, #1
 8002924:	701a      	strb	r2, [r3, #0]
 8002926:	230e      	movs	r3, #14
 8002928:	18fa      	adds	r2, r7, r3
 800292a:	1c7b      	adds	r3, r7, #1
 800292c:	7812      	ldrb	r2, [r2, #0]
 800292e:	781b      	ldrb	r3, [r3, #0]
 8002930:	429a      	cmp	r2, r3
 8002932:	d9b2      	bls.n	800289a <st7565_drawline+0x172>
		}
	}
}
 8002934:	46c0      	nop			; (mov r8, r8)
 8002936:	46c0      	nop			; (mov r8, r8)
 8002938:	46bd      	mov	sp, r7
 800293a:	b005      	add	sp, #20
 800293c:	bd90      	pop	{r4, r7, pc}
	...

08002940 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002940:	b590      	push	{r4, r7, lr}
 8002942:	b09d      	sub	sp, #116	; 0x74
 8002944:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002946:	f001 f915 	bl	8003b74 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800294a:	f000 fc99 	bl	8003280 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800294e:	f000 fe01 	bl	8003554 <MX_GPIO_Init>
  MX_TIM16_Init();
 8002952:	f000 fdd5 	bl	8003500 <MX_TIM16_Init>
  MX_ADC_Init();
 8002956:	f000 fcd7 	bl	8003308 <MX_ADC_Init>
  MX_SPI1_Init();
 800295a:	f000 fd93 	bl	8003484 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
	uint16_t adcValue = 0;
 800295e:	2352      	movs	r3, #82	; 0x52
 8002960:	18fb      	adds	r3, r7, r3
 8002962:	2200      	movs	r2, #0
 8002964:	801a      	strh	r2, [r3, #0]
	double Voltage_mV = 0;
 8002966:	2200      	movs	r2, #0
 8002968:	2300      	movs	r3, #0
 800296a:	64ba      	str	r2, [r7, #72]	; 0x48
 800296c:	64fb      	str	r3, [r7, #76]	; 0x4c
	double Voltage_V = 0;
 800296e:	2200      	movs	r2, #0
 8002970:	2300      	movs	r3, #0
 8002972:	643a      	str	r2, [r7, #64]	; 0x40
 8002974:	647b      	str	r3, [r7, #68]	; 0x44
	//Start timer used for displaying a char on the bottom left corner each second
	HAL_TIM_Base_Start(&htim16);
 8002976:	4be0      	ldr	r3, [pc, #896]	; (8002cf8 <main+0x3b8>)
 8002978:	0018      	movs	r0, r3
 800297a:	f003 f967 	bl	8005c4c <HAL_TIM_Base_Start>

	// initialize LCD
	st7565_init();
 800297e:	f7ff fc1f 	bl	80021c0 <st7565_init>
	st7565_backlight_enable();
 8002982:	f7ff fccb 	bl	800231c <st7565_backlight_enable>
		st7565_drawline(buffer, 0, 0, i, 63, 1);
		HAL_Delay(50);
		st7565_write_buffer(buffer);
	}*/
	//HAL_Delay(2000);
	st7565_clear_buffer(buffer);
 8002986:	4bdd      	ldr	r3, [pc, #884]	; (8002cfc <main+0x3bc>)
 8002988:	0018      	movs	r0, r3
 800298a:	f7ff fd61 	bl	8002450 <st7565_clear_buffer>
	//HAL_Delay(500);

		uint8_t poza = 0;
 800298e:	235f      	movs	r3, #95	; 0x5f
 8002990:	18fb      	adds	r3, r7, r3
 8002992:	2200      	movs	r2, #0
 8002994:	701a      	strb	r2, [r3, #0]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */


	 uint8_t minim = 0;
 8002996:	233f      	movs	r3, #63	; 0x3f
 8002998:	18fb      	adds	r3, r7, r3
 800299a:	2200      	movs	r2, #0
 800299c:	701a      	strb	r2, [r3, #0]
	 uint8_t maxim= 5;
 800299e:	233e      	movs	r3, #62	; 0x3e
 80029a0:	18fb      	adds	r3, r7, r3
 80029a2:	2205      	movs	r2, #5
 80029a4:	701a      	strb	r2, [r3, #0]

	 int currentValue = 1 - checkLCD();
 80029a6:	f000 fe91 	bl	80036cc <checkLCD>
 80029aa:	0003      	movs	r3, r0
 80029ac:	2201      	movs	r2, #1
 80029ae:	1ad3      	subs	r3, r2, r3
 80029b0:	65bb      	str	r3, [r7, #88]	; 0x58
	 int nextValue;
	 int buton = 0;
 80029b2:	2300      	movs	r3, #0
 80029b4:	63bb      	str	r3, [r7, #56]	; 0x38
	 int8_t adcstate = 0;
 80029b6:	2337      	movs	r3, #55	; 0x37
 80029b8:	18fb      	adds	r3, r7, r3
 80029ba:	2200      	movs	r2, #0
 80029bc:	701a      	strb	r2, [r3, #0]
	 int8_t indexmeniu = 0;
 80029be:	2357      	movs	r3, #87	; 0x57
 80029c0:	18fb      	adds	r3, r7, r3
 80029c2:	2200      	movs	r2, #0
 80029c4:	701a      	strb	r2, [r3, #0]
	 int8_t indexcase1 = 0;
 80029c6:	2356      	movs	r3, #86	; 0x56
 80029c8:	18fb      	adds	r3, r7, r3
 80029ca:	2200      	movs	r2, #0
 80029cc:	701a      	strb	r2, [r3, #0]

	while (1)
	{
		HAL_ADC_Stop(&hadc);
 80029ce:	4bcc      	ldr	r3, [pc, #816]	; (8002d00 <main+0x3c0>)
 80029d0:	0018      	movs	r0, r3
 80029d2:	f001 faeb 	bl	8003fac <HAL_ADC_Stop>
		HAL_ADC_Start(&hadc);
 80029d6:	4bca      	ldr	r3, [pc, #808]	; (8002d00 <main+0x3c0>)
 80029d8:	0018      	movs	r0, r3
 80029da:	f001 fa93 	bl	8003f04 <HAL_ADC_Start>
		nextValue = checkLCD();
 80029de:	f000 fe75 	bl	80036cc <checkLCD>
 80029e2:	0003      	movs	r3, r0
 80029e4:	633b      	str	r3, [r7, #48]	; 0x30
		st7565_clear_buffer(buffer);
 80029e6:	4bc5      	ldr	r3, [pc, #788]	; (8002cfc <main+0x3bc>)
 80029e8:	0018      	movs	r0, r3
 80029ea:	f7ff fd31 	bl	8002450 <st7565_clear_buffer>

		if (nextValue == 0 && currentValue != nextValue)//dezactivare display si activare bec
 80029ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d110      	bne.n	8002a16 <main+0xd6>
 80029f4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80029f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029f8:	429a      	cmp	r2, r3
 80029fa:	d00c      	beq.n	8002a16 <main+0xd6>
		{
			st7565_clear_screen();
 80029fc:	f7ff fccc 	bl	8002398 <st7565_clear_screen>
			st7565_backlight_disable();
 8002a00:	f7ff fc99 	bl	8002336 <st7565_backlight_disable>
			initA5GPIO();
 8002a04:	f000 fe74 	bl	80036f0 <initA5GPIO>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, 1);
 8002a08:	2390      	movs	r3, #144	; 0x90
 8002a0a:	05db      	lsls	r3, r3, #23
 8002a0c:	2201      	movs	r2, #1
 8002a0e:	2120      	movs	r1, #32
 8002a10:	0018      	movs	r0, r3
 8002a12:	f002 f848 	bl	8004aa6 <HAL_GPIO_WritePin>
		}

		if (nextValue == 1 && currentValue != nextValue) //dezactivare bec si reinitializare SPI
 8002a16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a18:	2b01      	cmp	r3, #1
 8002a1a:	d112      	bne.n	8002a42 <main+0x102>
 8002a1c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002a1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a20:	429a      	cmp	r2, r3
 8002a22:	d00e      	beq.n	8002a42 <main+0x102>
		{
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, 0);
 8002a24:	2390      	movs	r3, #144	; 0x90
 8002a26:	05db      	lsls	r3, r3, #23
 8002a28:	2200      	movs	r2, #0
 8002a2a:	2120      	movs	r1, #32
 8002a2c:	0018      	movs	r0, r3
 8002a2e:	f002 f83a 	bl	8004aa6 <HAL_GPIO_WritePin>
			initA5SPI();
 8002a32:	f000 fe7e 	bl	8003732 <initA5SPI>
			MX_SPI1_Init();
 8002a36:	f000 fd25 	bl	8003484 <MX_SPI1_Init>
			st7565_init();
 8002a3a:	f7ff fbc1 	bl	80021c0 <st7565_init>
			st7565_backlight_enable();
 8002a3e:	f7ff fc6d 	bl	800231c <st7565_backlight_enable>
		}
		currentValue = nextValue;
 8002a42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a44:	65bb      	str	r3, [r7, #88]	; 0x58
		ADC_Select_CH0(1);
 8002a46:	2001      	movs	r0, #1
 8002a48:	f000 fccc 	bl	80033e4 <ADC_Select_CH0>

		HAL_ADC_Start(&hadc);
 8002a4c:	4bac      	ldr	r3, [pc, #688]	; (8002d00 <main+0x3c0>)
 8002a4e:	0018      	movs	r0, r3
 8002a50:	f001 fa58 	bl	8003f04 <HAL_ADC_Start>
						HAL_ADC_PollForConversion(&hadc, HAL_MAX_DELAY);
 8002a54:	2301      	movs	r3, #1
 8002a56:	425a      	negs	r2, r3
 8002a58:	4ba9      	ldr	r3, [pc, #676]	; (8002d00 <main+0x3c0>)
 8002a5a:	0011      	movs	r1, r2
 8002a5c:	0018      	movs	r0, r3
 8002a5e:	f001 fae5 	bl	800402c <HAL_ADC_PollForConversion>
						uint16_t joystickinpudt = HAL_ADC_GetValue(&hadc);
 8002a62:	4ba7      	ldr	r3, [pc, #668]	; (8002d00 <main+0x3c0>)
 8002a64:	0018      	movs	r0, r3
 8002a66:	f001 fb79 	bl	800415c <HAL_ADC_GetValue>
 8002a6a:	0002      	movs	r2, r0
 8002a6c:	232e      	movs	r3, #46	; 0x2e
 8002a6e:	18fb      	adds	r3, r7, r3
 8002a70:	801a      	strh	r2, [r3, #0]
						ADC_Select_CH0(ADC_RANK_NONE);
 8002a72:	4ba4      	ldr	r3, [pc, #656]	; (8002d04 <main+0x3c4>)
 8002a74:	0018      	movs	r0, r3
 8002a76:	f000 fcb5 	bl	80033e4 <ADC_Select_CH0>

		switch(indexmeniu)
 8002a7a:	2357      	movs	r3, #87	; 0x57
 8002a7c:	18fb      	adds	r3, r7, r3
 8002a7e:	781b      	ldrb	r3, [r3, #0]
 8002a80:	b25b      	sxtb	r3, r3
 8002a82:	2b05      	cmp	r3, #5
 8002a84:	d901      	bls.n	8002a8a <main+0x14a>
 8002a86:	f000 fbca 	bl	800321e <main+0x8de>
 8002a8a:	009a      	lsls	r2, r3, #2
 8002a8c:	4b9e      	ldr	r3, [pc, #632]	; (8002d08 <main+0x3c8>)
 8002a8e:	18d3      	adds	r3, r2, r3
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	469f      	mov	pc, r3
		{
			case 0:
			{

				ADC_Select_CH0(1);
 8002a94:	2001      	movs	r0, #1
 8002a96:	f000 fca5 	bl	80033e4 <ADC_Select_CH0>
				HAL_ADC_Start(&hadc);
 8002a9a:	4b99      	ldr	r3, [pc, #612]	; (8002d00 <main+0x3c0>)
 8002a9c:	0018      	movs	r0, r3
 8002a9e:	f001 fa31 	bl	8003f04 <HAL_ADC_Start>
				HAL_ADC_PollForConversion(&hadc, HAL_MAX_DELAY);
 8002aa2:	2301      	movs	r3, #1
 8002aa4:	425a      	negs	r2, r3
 8002aa6:	4b96      	ldr	r3, [pc, #600]	; (8002d00 <main+0x3c0>)
 8002aa8:	0011      	movs	r1, r2
 8002aaa:	0018      	movs	r0, r3
 8002aac:	f001 fabe 	bl	800402c <HAL_ADC_PollForConversion>
				uint16_t joystickinput = HAL_ADC_GetValue(&hadc);
 8002ab0:	4b93      	ldr	r3, [pc, #588]	; (8002d00 <main+0x3c0>)
 8002ab2:	0018      	movs	r0, r3
 8002ab4:	f001 fb52 	bl	800415c <HAL_ADC_GetValue>
 8002ab8:	0002      	movs	r2, r0
 8002aba:	231e      	movs	r3, #30
 8002abc:	18fb      	adds	r3, r7, r3
 8002abe:	801a      	strh	r2, [r3, #0]

				for(uint8_t i = 0; i < ItemiMeniu; i++ )
 8002ac0:	2355      	movs	r3, #85	; 0x55
 8002ac2:	18fb      	adds	r3, r7, r3
 8002ac4:	2200      	movs	r2, #0
 8002ac6:	701a      	strb	r2, [r3, #0]
 8002ac8:	e013      	b.n	8002af2 <main+0x1b2>
					{
					st7565_drawstring(buffer, 12, i,DenumiriMeniu[i]);
 8002aca:	2055      	movs	r0, #85	; 0x55
 8002acc:	183b      	adds	r3, r7, r0
 8002ace:	781a      	ldrb	r2, [r3, #0]
 8002ad0:	4b8e      	ldr	r3, [pc, #568]	; (8002d0c <main+0x3cc>)
 8002ad2:	0092      	lsls	r2, r2, #2
 8002ad4:	58d1      	ldr	r1, [r2, r3]
 8002ad6:	0004      	movs	r4, r0
 8002ad8:	183b      	adds	r3, r7, r0
 8002ada:	781a      	ldrb	r2, [r3, #0]
 8002adc:	4887      	ldr	r0, [pc, #540]	; (8002cfc <main+0x3bc>)
 8002ade:	000b      	movs	r3, r1
 8002ae0:	210c      	movs	r1, #12
 8002ae2:	f7ff fd9f 	bl	8002624 <st7565_drawstring>
				for(uint8_t i = 0; i < ItemiMeniu; i++ )
 8002ae6:	0020      	movs	r0, r4
 8002ae8:	183b      	adds	r3, r7, r0
 8002aea:	781a      	ldrb	r2, [r3, #0]
 8002aec:	183b      	adds	r3, r7, r0
 8002aee:	3201      	adds	r2, #1
 8002af0:	701a      	strb	r2, [r3, #0]
 8002af2:	2355      	movs	r3, #85	; 0x55
 8002af4:	18fb      	adds	r3, r7, r3
 8002af6:	781b      	ldrb	r3, [r3, #0]
 8002af8:	2b04      	cmp	r3, #4
 8002afa:	d9e6      	bls.n	8002aca <main+0x18a>
					}
				st7565_drawstring(buffer, 113, indexcase1,"<-");
 8002afc:	2456      	movs	r4, #86	; 0x56
 8002afe:	193b      	adds	r3, r7, r4
 8002b00:	781a      	ldrb	r2, [r3, #0]
 8002b02:	4b83      	ldr	r3, [pc, #524]	; (8002d10 <main+0x3d0>)
 8002b04:	487d      	ldr	r0, [pc, #500]	; (8002cfc <main+0x3bc>)
 8002b06:	2171      	movs	r1, #113	; 0x71
 8002b08:	f7ff fd8c 	bl	8002624 <st7565_drawstring>
				st7565_drawstring(buffer, 0, indexcase1,"->");
 8002b0c:	193b      	adds	r3, r7, r4
 8002b0e:	781a      	ldrb	r2, [r3, #0]
 8002b10:	4b80      	ldr	r3, [pc, #512]	; (8002d14 <main+0x3d4>)
 8002b12:	487a      	ldr	r0, [pc, #488]	; (8002cfc <main+0x3bc>)
 8002b14:	2100      	movs	r1, #0
 8002b16:	f7ff fd85 	bl	8002624 <st7565_drawstring>
				st7565_write_buffer(buffer);
 8002b1a:	4b78      	ldr	r3, [pc, #480]	; (8002cfc <main+0x3bc>)
 8002b1c:	0018      	movs	r0, r3
 8002b1e:	f7ff fac5 	bl	80020ac <st7565_write_buffer>

				if(joystickinput>300 && joystickinput<600)
 8002b22:	211e      	movs	r1, #30
 8002b24:	187b      	adds	r3, r7, r1
 8002b26:	881a      	ldrh	r2, [r3, #0]
 8002b28:	2396      	movs	r3, #150	; 0x96
 8002b2a:	005b      	lsls	r3, r3, #1
 8002b2c:	429a      	cmp	r2, r3
 8002b2e:	d929      	bls.n	8002b84 <main+0x244>
 8002b30:	187b      	adds	r3, r7, r1
 8002b32:	881a      	ldrh	r2, [r3, #0]
 8002b34:	2396      	movs	r3, #150	; 0x96
 8002b36:	009b      	lsls	r3, r3, #2
 8002b38:	429a      	cmp	r2, r3
 8002b3a:	d223      	bcs.n	8002b84 <main+0x244>
				{
					if(indexcase1==4)
 8002b3c:	193b      	adds	r3, r7, r4
 8002b3e:	781b      	ldrb	r3, [r3, #0]
 8002b40:	b25b      	sxtb	r3, r3
 8002b42:	2b04      	cmp	r3, #4
 8002b44:	d102      	bne.n	8002b4c <main+0x20c>
						indexcase1 = -1;
 8002b46:	193b      	adds	r3, r7, r4
 8002b48:	22ff      	movs	r2, #255	; 0xff
 8002b4a:	701a      	strb	r2, [r3, #0]
					indexcase1++;
 8002b4c:	2156      	movs	r1, #86	; 0x56
 8002b4e:	187b      	adds	r3, r7, r1
 8002b50:	781b      	ldrb	r3, [r3, #0]
 8002b52:	b25b      	sxtb	r3, r3
 8002b54:	b2db      	uxtb	r3, r3
 8002b56:	3301      	adds	r3, #1
 8002b58:	b2da      	uxtb	r2, r3
 8002b5a:	187b      	adds	r3, r7, r1
 8002b5c:	701a      	strb	r2, [r3, #0]
					st7565_drawstring(buffer, 113, indexcase1,"<-");
 8002b5e:	000c      	movs	r4, r1
 8002b60:	187b      	adds	r3, r7, r1
 8002b62:	781a      	ldrb	r2, [r3, #0]
 8002b64:	4b6a      	ldr	r3, [pc, #424]	; (8002d10 <main+0x3d0>)
 8002b66:	4865      	ldr	r0, [pc, #404]	; (8002cfc <main+0x3bc>)
 8002b68:	2171      	movs	r1, #113	; 0x71
 8002b6a:	f7ff fd5b 	bl	8002624 <st7565_drawstring>
					st7565_drawstring(buffer, 0, indexcase1,"->");
 8002b6e:	193b      	adds	r3, r7, r4
 8002b70:	781a      	ldrb	r2, [r3, #0]
 8002b72:	4b68      	ldr	r3, [pc, #416]	; (8002d14 <main+0x3d4>)
 8002b74:	4861      	ldr	r0, [pc, #388]	; (8002cfc <main+0x3bc>)
 8002b76:	2100      	movs	r1, #0
 8002b78:	f7ff fd54 	bl	8002624 <st7565_drawstring>
					st7565_write_buffer(buffer);
 8002b7c:	4b5f      	ldr	r3, [pc, #380]	; (8002cfc <main+0x3bc>)
 8002b7e:	0018      	movs	r0, r3
 8002b80:	f7ff fa94 	bl	80020ac <st7565_write_buffer>

				}
				if (joystickinput>100&&joystickinput<300)
 8002b84:	221e      	movs	r2, #30
 8002b86:	18bb      	adds	r3, r7, r2
 8002b88:	881b      	ldrh	r3, [r3, #0]
 8002b8a:	2b64      	cmp	r3, #100	; 0x64
 8002b8c:	d94c      	bls.n	8002c28 <main+0x2e8>
 8002b8e:	18bb      	adds	r3, r7, r2
 8002b90:	881a      	ldrh	r2, [r3, #0]
 8002b92:	2396      	movs	r3, #150	; 0x96
 8002b94:	005b      	lsls	r3, r3, #1
 8002b96:	429a      	cmp	r2, r3
 8002b98:	d246      	bcs.n	8002c28 <main+0x2e8>
					{//indexmeniu++;
						if(indexcase1 == 0)
 8002b9a:	2356      	movs	r3, #86	; 0x56
 8002b9c:	18fb      	adds	r3, r7, r3
 8002b9e:	781b      	ldrb	r3, [r3, #0]
 8002ba0:	b25b      	sxtb	r3, r3
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d109      	bne.n	8002bba <main+0x27a>
							indexmeniu++;
 8002ba6:	2157      	movs	r1, #87	; 0x57
 8002ba8:	187b      	adds	r3, r7, r1
 8002baa:	781b      	ldrb	r3, [r3, #0]
 8002bac:	b25b      	sxtb	r3, r3
 8002bae:	b2db      	uxtb	r3, r3
 8002bb0:	3301      	adds	r3, #1
 8002bb2:	b2da      	uxtb	r2, r3
 8002bb4:	187b      	adds	r3, r7, r1
 8002bb6:	701a      	strb	r2, [r3, #0]
 8002bb8:	e036      	b.n	8002c28 <main+0x2e8>
						else if (indexcase1 == 1)
 8002bba:	2356      	movs	r3, #86	; 0x56
 8002bbc:	18fb      	adds	r3, r7, r3
 8002bbe:	781b      	ldrb	r3, [r3, #0]
 8002bc0:	b25b      	sxtb	r3, r3
 8002bc2:	2b01      	cmp	r3, #1
 8002bc4:	d107      	bne.n	8002bd6 <main+0x296>
							indexmeniu+=2;
 8002bc6:	2157      	movs	r1, #87	; 0x57
 8002bc8:	187b      	adds	r3, r7, r1
 8002bca:	781b      	ldrb	r3, [r3, #0]
 8002bcc:	3302      	adds	r3, #2
 8002bce:	b2da      	uxtb	r2, r3
 8002bd0:	187b      	adds	r3, r7, r1
 8002bd2:	701a      	strb	r2, [r3, #0]
 8002bd4:	e028      	b.n	8002c28 <main+0x2e8>
						else if (indexcase1 == 2)
 8002bd6:	2356      	movs	r3, #86	; 0x56
 8002bd8:	18fb      	adds	r3, r7, r3
 8002bda:	781b      	ldrb	r3, [r3, #0]
 8002bdc:	b25b      	sxtb	r3, r3
 8002bde:	2b02      	cmp	r3, #2
 8002be0:	d107      	bne.n	8002bf2 <main+0x2b2>
							indexmeniu+=3;
 8002be2:	2157      	movs	r1, #87	; 0x57
 8002be4:	187b      	adds	r3, r7, r1
 8002be6:	781b      	ldrb	r3, [r3, #0]
 8002be8:	3303      	adds	r3, #3
 8002bea:	b2da      	uxtb	r2, r3
 8002bec:	187b      	adds	r3, r7, r1
 8002bee:	701a      	strb	r2, [r3, #0]
 8002bf0:	e01a      	b.n	8002c28 <main+0x2e8>
						else if (indexcase1 == 3)
 8002bf2:	2356      	movs	r3, #86	; 0x56
 8002bf4:	18fb      	adds	r3, r7, r3
 8002bf6:	781b      	ldrb	r3, [r3, #0]
 8002bf8:	b25b      	sxtb	r3, r3
 8002bfa:	2b03      	cmp	r3, #3
 8002bfc:	d107      	bne.n	8002c0e <main+0x2ce>
							indexmeniu+=4;
 8002bfe:	2157      	movs	r1, #87	; 0x57
 8002c00:	187b      	adds	r3, r7, r1
 8002c02:	781b      	ldrb	r3, [r3, #0]
 8002c04:	3304      	adds	r3, #4
 8002c06:	b2da      	uxtb	r2, r3
 8002c08:	187b      	adds	r3, r7, r1
 8002c0a:	701a      	strb	r2, [r3, #0]
 8002c0c:	e00c      	b.n	8002c28 <main+0x2e8>
						else if (indexcase1 == 4)
 8002c0e:	2356      	movs	r3, #86	; 0x56
 8002c10:	18fb      	adds	r3, r7, r3
 8002c12:	781b      	ldrb	r3, [r3, #0]
 8002c14:	b25b      	sxtb	r3, r3
 8002c16:	2b04      	cmp	r3, #4
 8002c18:	d106      	bne.n	8002c28 <main+0x2e8>
							indexmeniu+=5;
 8002c1a:	2157      	movs	r1, #87	; 0x57
 8002c1c:	187b      	adds	r3, r7, r1
 8002c1e:	781b      	ldrb	r3, [r3, #0]
 8002c20:	3305      	adds	r3, #5
 8002c22:	b2da      	uxtb	r2, r3
 8002c24:	187b      	adds	r3, r7, r1
 8002c26:	701a      	strb	r2, [r3, #0]

				}
				HAL_Delay(200);
 8002c28:	20c8      	movs	r0, #200	; 0xc8
 8002c2a:	f001 f807 	bl	8003c3c <HAL_Delay>
				break;
 8002c2e:	e2f6      	b.n	800321e <main+0x8de>
			}
			case 1:	//digital
			{
				ADC_Select_CH0(ADC_RANK_NONE);
 8002c30:	4b34      	ldr	r3, [pc, #208]	; (8002d04 <main+0x3c4>)
 8002c32:	0018      	movs	r0, r3
 8002c34:	f000 fbd6 	bl	80033e4 <ADC_Select_CH0>
				ADC_Select_CH13(1);
 8002c38:	2001      	movs	r0, #1
 8002c3a:	f000 fbab 	bl	8003394 <ADC_Select_CH13>
				HAL_ADC_Start(&hadc);
 8002c3e:	4b30      	ldr	r3, [pc, #192]	; (8002d00 <main+0x3c0>)
 8002c40:	0018      	movs	r0, r3
 8002c42:	f001 f95f 	bl	8003f04 <HAL_ADC_Start>
				HAL_ADC_PollForConversion(&hadc, HAL_MAX_DELAY);
 8002c46:	2301      	movs	r3, #1
 8002c48:	425a      	negs	r2, r3
 8002c4a:	4b2d      	ldr	r3, [pc, #180]	; (8002d00 <main+0x3c0>)
 8002c4c:	0011      	movs	r1, r2
 8002c4e:	0018      	movs	r0, r3
 8002c50:	f001 f9ec 	bl	800402c <HAL_ADC_PollForConversion>

				adcValue = HAL_ADC_GetValue(&hadc);
 8002c54:	4b2a      	ldr	r3, [pc, #168]	; (8002d00 <main+0x3c0>)
 8002c56:	0018      	movs	r0, r3
 8002c58:	f001 fa80 	bl	800415c <HAL_ADC_GetValue>
 8002c5c:	0002      	movs	r2, r0
 8002c5e:	2152      	movs	r1, #82	; 0x52
 8002c60:	187b      	adds	r3, r7, r1
 8002c62:	801a      	strh	r2, [r3, #0]

				Voltage_mV = adcValue *3.22;
 8002c64:	187b      	adds	r3, r7, r1
 8002c66:	881b      	ldrh	r3, [r3, #0]
 8002c68:	0018      	movs	r0, r3
 8002c6a:	f7ff f9ab 	bl	8001fc4 <__aeabi_i2d>
 8002c6e:	4a2a      	ldr	r2, [pc, #168]	; (8002d18 <main+0x3d8>)
 8002c70:	4b2a      	ldr	r3, [pc, #168]	; (8002d1c <main+0x3dc>)
 8002c72:	f7fe fb55 	bl	8001320 <__aeabi_dmul>
 8002c76:	0002      	movs	r2, r0
 8002c78:	000b      	movs	r3, r1
 8002c7a:	64ba      	str	r2, [r7, #72]	; 0x48
 8002c7c:	64fb      	str	r3, [r7, #76]	; 0x4c
				Voltage_V = (Voltage_mV / 1000);
 8002c7e:	2200      	movs	r2, #0
 8002c80:	4b27      	ldr	r3, [pc, #156]	; (8002d20 <main+0x3e0>)
 8002c82:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8002c84:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8002c86:	f7fd ff49 	bl	8000b1c <__aeabi_ddiv>
 8002c8a:	0002      	movs	r2, r0
 8002c8c:	000b      	movs	r3, r1
 8002c8e:	643a      	str	r2, [r7, #64]	; 0x40
 8002c90:	647b      	str	r3, [r7, #68]	; 0x44

				if (Voltage_V <= minim) poza = 0;
 8002c92:	233f      	movs	r3, #63	; 0x3f
 8002c94:	18fb      	adds	r3, r7, r3
 8002c96:	781b      	ldrb	r3, [r3, #0]
 8002c98:	0018      	movs	r0, r3
 8002c9a:	f7ff f993 	bl	8001fc4 <__aeabi_i2d>
 8002c9e:	0002      	movs	r2, r0
 8002ca0:	000b      	movs	r3, r1
 8002ca2:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8002ca4:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8002ca6:	f7fd fbdf 	bl	8000468 <__aeabi_dcmple>
 8002caa:	1e03      	subs	r3, r0, #0
 8002cac:	d004      	beq.n	8002cb8 <main+0x378>
 8002cae:	235f      	movs	r3, #95	; 0x5f
 8002cb0:	18fb      	adds	r3, r7, r3
 8002cb2:	2200      	movs	r2, #0
 8002cb4:	701a      	strb	r2, [r3, #0]
 8002cb6:	e0a1      	b.n	8002dfc <main+0x4bc>
				else if (Voltage_V > maxim) poza = 7;
 8002cb8:	233e      	movs	r3, #62	; 0x3e
 8002cba:	18fb      	adds	r3, r7, r3
 8002cbc:	781b      	ldrb	r3, [r3, #0]
 8002cbe:	0018      	movs	r0, r3
 8002cc0:	f7ff f980 	bl	8001fc4 <__aeabi_i2d>
 8002cc4:	0002      	movs	r2, r0
 8002cc6:	000b      	movs	r3, r1
 8002cc8:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8002cca:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8002ccc:	f7fd fbd6 	bl	800047c <__aeabi_dcmpgt>
 8002cd0:	1e03      	subs	r3, r0, #0
 8002cd2:	d004      	beq.n	8002cde <main+0x39e>
 8002cd4:	235f      	movs	r3, #95	; 0x5f
 8002cd6:	18fb      	adds	r3, r7, r3
 8002cd8:	2207      	movs	r2, #7
 8002cda:	701a      	strb	r2, [r3, #0]
 8002cdc:	e08e      	b.n	8002dfc <main+0x4bc>
				else if (Voltage_V < 1) poza = 1;
 8002cde:	2200      	movs	r2, #0
 8002ce0:	4b10      	ldr	r3, [pc, #64]	; (8002d24 <main+0x3e4>)
 8002ce2:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8002ce4:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8002ce6:	f7fd fbb5 	bl	8000454 <__aeabi_dcmplt>
 8002cea:	1e03      	subs	r3, r0, #0
 8002cec:	d01c      	beq.n	8002d28 <main+0x3e8>
 8002cee:	235f      	movs	r3, #95	; 0x5f
 8002cf0:	18fb      	adds	r3, r7, r3
 8002cf2:	2201      	movs	r2, #1
 8002cf4:	701a      	strb	r2, [r3, #0]
 8002cf6:	e081      	b.n	8002dfc <main+0x4bc>
 8002cf8:	200022c4 	.word	0x200022c4
 8002cfc:	20000000 	.word	0x20000000
 8002d00:	20002220 	.word	0x20002220
 8002d04:	00001001 	.word	0x00001001
 8002d08:	080093ec 	.word	0x080093ec
 8002d0c:	20002008 	.word	0x20002008
 8002d10:	08008de0 	.word	0x08008de0
 8002d14:	08008de4 	.word	0x08008de4
 8002d18:	5c28f5c3 	.word	0x5c28f5c3
 8002d1c:	4009c28f 	.word	0x4009c28f
 8002d20:	408f4000 	.word	0x408f4000
 8002d24:	3ff00000 	.word	0x3ff00000
				else if (Voltage_V < 2 && Voltage_V >= 1) poza = 2;
 8002d28:	2200      	movs	r2, #0
 8002d2a:	2380      	movs	r3, #128	; 0x80
 8002d2c:	05db      	lsls	r3, r3, #23
 8002d2e:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8002d30:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8002d32:	f7fd fb8f 	bl	8000454 <__aeabi_dcmplt>
 8002d36:	1e03      	subs	r3, r0, #0
 8002d38:	d00c      	beq.n	8002d54 <main+0x414>
 8002d3a:	2200      	movs	r2, #0
 8002d3c:	4b9d      	ldr	r3, [pc, #628]	; (8002fb4 <main+0x674>)
 8002d3e:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8002d40:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8002d42:	f7fd fba5 	bl	8000490 <__aeabi_dcmpge>
 8002d46:	1e03      	subs	r3, r0, #0
 8002d48:	d004      	beq.n	8002d54 <main+0x414>
 8002d4a:	235f      	movs	r3, #95	; 0x5f
 8002d4c:	18fb      	adds	r3, r7, r3
 8002d4e:	2202      	movs	r2, #2
 8002d50:	701a      	strb	r2, [r3, #0]
 8002d52:	e053      	b.n	8002dfc <main+0x4bc>
				else if (Voltage_V < 3 && Voltage_V >= 2) poza = 3;
 8002d54:	2200      	movs	r2, #0
 8002d56:	4b98      	ldr	r3, [pc, #608]	; (8002fb8 <main+0x678>)
 8002d58:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8002d5a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8002d5c:	f7fd fb7a 	bl	8000454 <__aeabi_dcmplt>
 8002d60:	1e03      	subs	r3, r0, #0
 8002d62:	d00d      	beq.n	8002d80 <main+0x440>
 8002d64:	2200      	movs	r2, #0
 8002d66:	2380      	movs	r3, #128	; 0x80
 8002d68:	05db      	lsls	r3, r3, #23
 8002d6a:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8002d6c:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8002d6e:	f7fd fb8f 	bl	8000490 <__aeabi_dcmpge>
 8002d72:	1e03      	subs	r3, r0, #0
 8002d74:	d004      	beq.n	8002d80 <main+0x440>
 8002d76:	235f      	movs	r3, #95	; 0x5f
 8002d78:	18fb      	adds	r3, r7, r3
 8002d7a:	2203      	movs	r2, #3
 8002d7c:	701a      	strb	r2, [r3, #0]
 8002d7e:	e03d      	b.n	8002dfc <main+0x4bc>
				else if (Voltage_V < 4 && Voltage_V >= 3) poza = 4;
 8002d80:	2200      	movs	r2, #0
 8002d82:	4b8e      	ldr	r3, [pc, #568]	; (8002fbc <main+0x67c>)
 8002d84:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8002d86:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8002d88:	f7fd fb64 	bl	8000454 <__aeabi_dcmplt>
 8002d8c:	1e03      	subs	r3, r0, #0
 8002d8e:	d00c      	beq.n	8002daa <main+0x46a>
 8002d90:	2200      	movs	r2, #0
 8002d92:	4b89      	ldr	r3, [pc, #548]	; (8002fb8 <main+0x678>)
 8002d94:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8002d96:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8002d98:	f7fd fb7a 	bl	8000490 <__aeabi_dcmpge>
 8002d9c:	1e03      	subs	r3, r0, #0
 8002d9e:	d004      	beq.n	8002daa <main+0x46a>
 8002da0:	235f      	movs	r3, #95	; 0x5f
 8002da2:	18fb      	adds	r3, r7, r3
 8002da4:	2204      	movs	r2, #4
 8002da6:	701a      	strb	r2, [r3, #0]
 8002da8:	e028      	b.n	8002dfc <main+0x4bc>
				else if (Voltage_V < 4.5 && Voltage_V >= 4) poza = 5;
 8002daa:	2200      	movs	r2, #0
 8002dac:	4b84      	ldr	r3, [pc, #528]	; (8002fc0 <main+0x680>)
 8002dae:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8002db0:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8002db2:	f7fd fb4f 	bl	8000454 <__aeabi_dcmplt>
 8002db6:	1e03      	subs	r3, r0, #0
 8002db8:	d00c      	beq.n	8002dd4 <main+0x494>
 8002dba:	2200      	movs	r2, #0
 8002dbc:	4b7f      	ldr	r3, [pc, #508]	; (8002fbc <main+0x67c>)
 8002dbe:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8002dc0:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8002dc2:	f7fd fb65 	bl	8000490 <__aeabi_dcmpge>
 8002dc6:	1e03      	subs	r3, r0, #0
 8002dc8:	d004      	beq.n	8002dd4 <main+0x494>
 8002dca:	235f      	movs	r3, #95	; 0x5f
 8002dcc:	18fb      	adds	r3, r7, r3
 8002dce:	2205      	movs	r2, #5
 8002dd0:	701a      	strb	r2, [r3, #0]
 8002dd2:	e013      	b.n	8002dfc <main+0x4bc>
				else if (Voltage_V <= 5 && Voltage_V >= 4.5) poza = 6;
 8002dd4:	2200      	movs	r2, #0
 8002dd6:	4b7b      	ldr	r3, [pc, #492]	; (8002fc4 <main+0x684>)
 8002dd8:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8002dda:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8002ddc:	f7fd fb44 	bl	8000468 <__aeabi_dcmple>
 8002de0:	1e03      	subs	r3, r0, #0
 8002de2:	d00b      	beq.n	8002dfc <main+0x4bc>
 8002de4:	2200      	movs	r2, #0
 8002de6:	4b76      	ldr	r3, [pc, #472]	; (8002fc0 <main+0x680>)
 8002de8:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8002dea:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8002dec:	f7fd fb50 	bl	8000490 <__aeabi_dcmpge>
 8002df0:	1e03      	subs	r3, r0, #0
 8002df2:	d003      	beq.n	8002dfc <main+0x4bc>
 8002df4:	235f      	movs	r3, #95	; 0x5f
 8002df6:	18fb      	adds	r3, r7, r3
 8002df8:	2206      	movs	r2, #6
 8002dfa:	701a      	strb	r2, [r3, #0]
				switch (poza)
 8002dfc:	235f      	movs	r3, #95	; 0x5f
 8002dfe:	18fb      	adds	r3, r7, r3
 8002e00:	781b      	ldrb	r3, [r3, #0]
 8002e02:	2b07      	cmp	r3, #7
 8002e04:	d900      	bls.n	8002e08 <main+0x4c8>
 8002e06:	e087      	b.n	8002f18 <main+0x5d8>
 8002e08:	009a      	lsls	r2, r3, #2
 8002e0a:	4b6f      	ldr	r3, [pc, #444]	; (8002fc8 <main+0x688>)
 8002e0c:	18d3      	adds	r3, r2, r3
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	469f      	mov	pc, r3
					{
						case 0:
							{
								st7565_clear_screen();
 8002e12:	f7ff fac1 	bl	8002398 <st7565_clear_screen>
								st7565_backlight_disable();
 8002e16:	f7ff fa8e 	bl	8002336 <st7565_backlight_disable>
								break;
 8002e1a:	e07d      	b.n	8002f18 <main+0x5d8>
							}

						case 1:
							{
								st7565_drawbitmap(buffer, 0, 0, ptData, 128, 64, 1);
 8002e1c:	4b6b      	ldr	r3, [pc, #428]	; (8002fcc <main+0x68c>)
 8002e1e:	486c      	ldr	r0, [pc, #432]	; (8002fd0 <main+0x690>)
 8002e20:	2201      	movs	r2, #1
 8002e22:	9202      	str	r2, [sp, #8]
 8002e24:	2240      	movs	r2, #64	; 0x40
 8002e26:	9201      	str	r2, [sp, #4]
 8002e28:	2280      	movs	r2, #128	; 0x80
 8002e2a:	9200      	str	r2, [sp, #0]
 8002e2c:	2200      	movs	r2, #0
 8002e2e:	2100      	movs	r1, #0
 8002e30:	f7ff fb88 	bl	8002544 <st7565_drawbitmap>
								st7565_write_buffer(buffer);
 8002e34:	4b66      	ldr	r3, [pc, #408]	; (8002fd0 <main+0x690>)
 8002e36:	0018      	movs	r0, r3
 8002e38:	f7ff f938 	bl	80020ac <st7565_write_buffer>
								break;
 8002e3c:	e06c      	b.n	8002f18 <main+0x5d8>
							}

						case 2:
							{
								st7565_drawbitmap(buffer, 0, 0, ptData1, 128, 64, 1);
 8002e3e:	4b65      	ldr	r3, [pc, #404]	; (8002fd4 <main+0x694>)
 8002e40:	4863      	ldr	r0, [pc, #396]	; (8002fd0 <main+0x690>)
 8002e42:	2201      	movs	r2, #1
 8002e44:	9202      	str	r2, [sp, #8]
 8002e46:	2240      	movs	r2, #64	; 0x40
 8002e48:	9201      	str	r2, [sp, #4]
 8002e4a:	2280      	movs	r2, #128	; 0x80
 8002e4c:	9200      	str	r2, [sp, #0]
 8002e4e:	2200      	movs	r2, #0
 8002e50:	2100      	movs	r1, #0
 8002e52:	f7ff fb77 	bl	8002544 <st7565_drawbitmap>
								st7565_write_buffer(buffer);
 8002e56:	4b5e      	ldr	r3, [pc, #376]	; (8002fd0 <main+0x690>)
 8002e58:	0018      	movs	r0, r3
 8002e5a:	f7ff f927 	bl	80020ac <st7565_write_buffer>
								break;
 8002e5e:	e05b      	b.n	8002f18 <main+0x5d8>
							}

						case 3:
							{
								st7565_drawbitmap(buffer, 0, 0, ptData2, 128, 64, 1);
 8002e60:	4b5d      	ldr	r3, [pc, #372]	; (8002fd8 <main+0x698>)
 8002e62:	485b      	ldr	r0, [pc, #364]	; (8002fd0 <main+0x690>)
 8002e64:	2201      	movs	r2, #1
 8002e66:	9202      	str	r2, [sp, #8]
 8002e68:	2240      	movs	r2, #64	; 0x40
 8002e6a:	9201      	str	r2, [sp, #4]
 8002e6c:	2280      	movs	r2, #128	; 0x80
 8002e6e:	9200      	str	r2, [sp, #0]
 8002e70:	2200      	movs	r2, #0
 8002e72:	2100      	movs	r1, #0
 8002e74:	f7ff fb66 	bl	8002544 <st7565_drawbitmap>
								st7565_write_buffer(buffer);
 8002e78:	4b55      	ldr	r3, [pc, #340]	; (8002fd0 <main+0x690>)
 8002e7a:	0018      	movs	r0, r3
 8002e7c:	f7ff f916 	bl	80020ac <st7565_write_buffer>
								break;
 8002e80:	e04a      	b.n	8002f18 <main+0x5d8>
							}

						case 4:
							{
								st7565_drawbitmap(buffer, 0, 0, ptData3, 128, 64, 1);
 8002e82:	4b56      	ldr	r3, [pc, #344]	; (8002fdc <main+0x69c>)
 8002e84:	4852      	ldr	r0, [pc, #328]	; (8002fd0 <main+0x690>)
 8002e86:	2201      	movs	r2, #1
 8002e88:	9202      	str	r2, [sp, #8]
 8002e8a:	2240      	movs	r2, #64	; 0x40
 8002e8c:	9201      	str	r2, [sp, #4]
 8002e8e:	2280      	movs	r2, #128	; 0x80
 8002e90:	9200      	str	r2, [sp, #0]
 8002e92:	2200      	movs	r2, #0
 8002e94:	2100      	movs	r1, #0
 8002e96:	f7ff fb55 	bl	8002544 <st7565_drawbitmap>
								st7565_write_buffer(buffer);
 8002e9a:	4b4d      	ldr	r3, [pc, #308]	; (8002fd0 <main+0x690>)
 8002e9c:	0018      	movs	r0, r3
 8002e9e:	f7ff f905 	bl	80020ac <st7565_write_buffer>
								break;
 8002ea2:	e039      	b.n	8002f18 <main+0x5d8>
							}

						case 5:
							{
								st7565_drawbitmap(buffer, 0, 0, ptData4, 128, 64, 1);
 8002ea4:	4b4e      	ldr	r3, [pc, #312]	; (8002fe0 <main+0x6a0>)
 8002ea6:	484a      	ldr	r0, [pc, #296]	; (8002fd0 <main+0x690>)
 8002ea8:	2201      	movs	r2, #1
 8002eaa:	9202      	str	r2, [sp, #8]
 8002eac:	2240      	movs	r2, #64	; 0x40
 8002eae:	9201      	str	r2, [sp, #4]
 8002eb0:	2280      	movs	r2, #128	; 0x80
 8002eb2:	9200      	str	r2, [sp, #0]
 8002eb4:	2200      	movs	r2, #0
 8002eb6:	2100      	movs	r1, #0
 8002eb8:	f7ff fb44 	bl	8002544 <st7565_drawbitmap>
								st7565_write_buffer(buffer);
 8002ebc:	4b44      	ldr	r3, [pc, #272]	; (8002fd0 <main+0x690>)
 8002ebe:	0018      	movs	r0, r3
 8002ec0:	f7ff f8f4 	bl	80020ac <st7565_write_buffer>
								break;
 8002ec4:	e028      	b.n	8002f18 <main+0x5d8>
							}

						case 6:
							{
								st7565_drawbitmap(buffer, 0, 0, ptData5, 128, 64, 1);
 8002ec6:	4b47      	ldr	r3, [pc, #284]	; (8002fe4 <main+0x6a4>)
 8002ec8:	4841      	ldr	r0, [pc, #260]	; (8002fd0 <main+0x690>)
 8002eca:	2201      	movs	r2, #1
 8002ecc:	9202      	str	r2, [sp, #8]
 8002ece:	2240      	movs	r2, #64	; 0x40
 8002ed0:	9201      	str	r2, [sp, #4]
 8002ed2:	2280      	movs	r2, #128	; 0x80
 8002ed4:	9200      	str	r2, [sp, #0]
 8002ed6:	2200      	movs	r2, #0
 8002ed8:	2100      	movs	r1, #0
 8002eda:	f7ff fb33 	bl	8002544 <st7565_drawbitmap>
								st7565_write_buffer(buffer);
 8002ede:	4b3c      	ldr	r3, [pc, #240]	; (8002fd0 <main+0x690>)
 8002ee0:	0018      	movs	r0, r3
 8002ee2:	f7ff f8e3 	bl	80020ac <st7565_write_buffer>
								break;
 8002ee6:	e017      	b.n	8002f18 <main+0x5d8>

						case 7:
							{
								while (Voltage_V > maxim)
								{
									st7565_backlight_disable();
 8002ee8:	f7ff fa25 	bl	8002336 <st7565_backlight_disable>
									HAL_Delay(2000);
 8002eec:	23fa      	movs	r3, #250	; 0xfa
 8002eee:	00db      	lsls	r3, r3, #3
 8002ef0:	0018      	movs	r0, r3
 8002ef2:	f000 fea3 	bl	8003c3c <HAL_Delay>
									st7565_backlight_enable();
 8002ef6:	f7ff fa11 	bl	800231c <st7565_backlight_enable>
								while (Voltage_V > maxim)
 8002efa:	233e      	movs	r3, #62	; 0x3e
 8002efc:	18fb      	adds	r3, r7, r3
 8002efe:	781b      	ldrb	r3, [r3, #0]
 8002f00:	0018      	movs	r0, r3
 8002f02:	f7ff f85f 	bl	8001fc4 <__aeabi_i2d>
 8002f06:	0002      	movs	r2, r0
 8002f08:	000b      	movs	r3, r1
 8002f0a:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8002f0c:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8002f0e:	f7fd fab5 	bl	800047c <__aeabi_dcmpgt>
 8002f12:	1e03      	subs	r3, r0, #0
 8002f14:	d1e8      	bne.n	8002ee8 <main+0x5a8>
								}

								break;
 8002f16:	46c0      	nop			; (mov r8, r8)
							}

					}
				if(Voltage_V>minim)
 8002f18:	233f      	movs	r3, #63	; 0x3f
 8002f1a:	18fb      	adds	r3, r7, r3
 8002f1c:	781b      	ldrb	r3, [r3, #0]
 8002f1e:	0018      	movs	r0, r3
 8002f20:	f7ff f850 	bl	8001fc4 <__aeabi_i2d>
 8002f24:	0002      	movs	r2, r0
 8002f26:	000b      	movs	r3, r1
 8002f28:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8002f2a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8002f2c:	f7fd faa6 	bl	800047c <__aeabi_dcmpgt>
 8002f30:	1e03      	subs	r3, r0, #0
 8002f32:	d035      	beq.n	8002fa0 <main+0x660>
							{
					//	st7565_backlight_enable();
							uint8_t* text = (unsigned char *)("Volti: ");
 8002f34:	4b2c      	ldr	r3, [pc, #176]	; (8002fe8 <main+0x6a8>)
 8002f36:	623b      	str	r3, [r7, #32]
							//uint8_t v = (double)(Voltage_V);
							st7565_drawstring(buffer, 0, 0, text);
 8002f38:	6a3b      	ldr	r3, [r7, #32]
 8002f3a:	4825      	ldr	r0, [pc, #148]	; (8002fd0 <main+0x690>)
 8002f3c:	2200      	movs	r2, #0
 8002f3e:	2100      	movs	r1, #0
 8002f40:	f7ff fb70 	bl	8002624 <st7565_drawstring>
							char c[11]="";
 8002f44:	2410      	movs	r4, #16
 8002f46:	193b      	adds	r3, r7, r4
 8002f48:	2200      	movs	r2, #0
 8002f4a:	601a      	str	r2, [r3, #0]
 8002f4c:	3304      	adds	r3, #4
 8002f4e:	2207      	movs	r2, #7
 8002f50:	2100      	movs	r1, #0
 8002f52:	0018      	movs	r0, r3
 8002f54:	f002 ff6e 	bl	8005e34 <memset>
							sprintf(c,"%.1f",Voltage_V);
 8002f58:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002f5a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002f5c:	4923      	ldr	r1, [pc, #140]	; (8002fec <main+0x6ac>)
 8002f5e:	1938      	adds	r0, r7, r4
 8002f60:	f003 fbde 	bl	8006720 <siprintf>
							st7565_drawstring(buffer, 35, 0, c);
 8002f64:	193b      	adds	r3, r7, r4
 8002f66:	481a      	ldr	r0, [pc, #104]	; (8002fd0 <main+0x690>)
 8002f68:	2200      	movs	r2, #0
 8002f6a:	2123      	movs	r1, #35	; 0x23
 8002f6c:	f7ff fb5a 	bl	8002624 <st7565_drawstring>
							text = (unsigned char *)("Milivolti: ");
 8002f70:	4b1f      	ldr	r3, [pc, #124]	; (8002ff0 <main+0x6b0>)
 8002f72:	623b      	str	r3, [r7, #32]
							c[11]="";
 8002f74:	4b1f      	ldr	r3, [pc, #124]	; (8002ff4 <main+0x6b4>)
 8002f76:	b2da      	uxtb	r2, r3
 8002f78:	193b      	adds	r3, r7, r4
 8002f7a:	72da      	strb	r2, [r3, #11]
							st7565_drawstring(buffer, 0, 1, text);
 8002f7c:	6a3b      	ldr	r3, [r7, #32]
 8002f7e:	4814      	ldr	r0, [pc, #80]	; (8002fd0 <main+0x690>)
 8002f80:	2201      	movs	r2, #1
 8002f82:	2100      	movs	r1, #0
 8002f84:	f7ff fb4e 	bl	8002624 <st7565_drawstring>
										sprintf(c,"%.1f",Voltage_mV);
 8002f88:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002f8a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002f8c:	4917      	ldr	r1, [pc, #92]	; (8002fec <main+0x6ac>)
 8002f8e:	1938      	adds	r0, r7, r4
 8002f90:	f003 fbc6 	bl	8006720 <siprintf>
										st7565_drawstring(buffer, 60, 1, c);
 8002f94:	193b      	adds	r3, r7, r4
 8002f96:	480e      	ldr	r0, [pc, #56]	; (8002fd0 <main+0x690>)
 8002f98:	2201      	movs	r2, #1
 8002f9a:	213c      	movs	r1, #60	; 0x3c
 8002f9c:	f7ff fb42 	bl	8002624 <st7565_drawstring>


						//	st7565_drawchar(buffer, 0, 7, 0x30 );

							/* Send buffer to LCD */
							st7565_write_buffer(buffer);
 8002fa0:	4b0b      	ldr	r3, [pc, #44]	; (8002fd0 <main+0x690>)
 8002fa2:	0018      	movs	r0, r3
 8002fa4:	f7ff f882 	bl	80020ac <st7565_write_buffer>

							HAL_Delay(1000);
 8002fa8:	23fa      	movs	r3, #250	; 0xfa
 8002faa:	009b      	lsls	r3, r3, #2
 8002fac:	0018      	movs	r0, r3
 8002fae:	f000 fe45 	bl	8003c3c <HAL_Delay>
							//if(HAL_GPIO_ReadPin(GPIOC, 13) == 0);
							//ADC_Select_CH0();

				break;
 8002fb2:	e134      	b.n	800321e <main+0x8de>
 8002fb4:	3ff00000 	.word	0x3ff00000
 8002fb8:	40080000 	.word	0x40080000
 8002fbc:	40100000 	.word	0x40100000
 8002fc0:	40120000 	.word	0x40120000
 8002fc4:	40140000 	.word	0x40140000
 8002fc8:	08009404 	.word	0x08009404
 8002fcc:	20000408 	.word	0x20000408
 8002fd0:	20000000 	.word	0x20000000
 8002fd4:	20000808 	.word	0x20000808
 8002fd8:	20000c08 	.word	0x20000c08
 8002fdc:	20001008 	.word	0x20001008
 8002fe0:	20001408 	.word	0x20001408
 8002fe4:	20001808 	.word	0x20001808
 8002fe8:	08008de8 	.word	0x08008de8
 8002fec:	08008df0 	.word	0x08008df0
 8002ff0:	08008df8 	.word	0x08008df8
 8002ff4:	08008e04 	.word	0x08008e04
				break;

			}
			case 3://temperatura
			{
				st7565_clear_buffer(buffer);
 8002ff8:	4b93      	ldr	r3, [pc, #588]	; (8003248 <main+0x908>)
 8002ffa:	0018      	movs	r0, r3
 8002ffc:	f7ff fa28 	bl	8002450 <st7565_clear_buffer>
				st7565_drawbitmap(buffer, 0, 0, termometrupoza, 128, 64, 1);
 8003000:	4b92      	ldr	r3, [pc, #584]	; (800324c <main+0x90c>)
 8003002:	4891      	ldr	r0, [pc, #580]	; (8003248 <main+0x908>)
 8003004:	2201      	movs	r2, #1
 8003006:	9202      	str	r2, [sp, #8]
 8003008:	2240      	movs	r2, #64	; 0x40
 800300a:	9201      	str	r2, [sp, #4]
 800300c:	2280      	movs	r2, #128	; 0x80
 800300e:	9200      	str	r2, [sp, #0]
 8003010:	2200      	movs	r2, #0
 8003012:	2100      	movs	r1, #0
 8003014:	f7ff fa96 	bl	8002544 <st7565_drawbitmap>
				ADC_Select_CH0(ADC_RANK_NONE);
 8003018:	4b8d      	ldr	r3, [pc, #564]	; (8003250 <main+0x910>)
 800301a:	0018      	movs	r0, r3
 800301c:	f000 f9e2 	bl	80033e4 <ADC_Select_CH0>
				 ADC_Select_CHTemp(1);
 8003020:	2001      	movs	r0, #1
 8003022:	f000 fa07 	bl	8003434 <ADC_Select_CHTemp>
				 HAL_ADC_Start(&hadc);
 8003026:	4b8b      	ldr	r3, [pc, #556]	; (8003254 <main+0x914>)
 8003028:	0018      	movs	r0, r3
 800302a:	f000 ff6b 	bl	8003f04 <HAL_ADC_Start>
				 HAL_ADC_PollForConversion(&hadc, HAL_MAX_DELAY);
 800302e:	2301      	movs	r3, #1
 8003030:	425a      	negs	r2, r3
 8003032:	4b88      	ldr	r3, [pc, #544]	; (8003254 <main+0x914>)
 8003034:	0011      	movs	r1, r2
 8003036:	0018      	movs	r0, r3
 8003038:	f000 fff8 	bl	800402c <HAL_ADC_PollForConversion>
				// Temp = ((3.3*HAL_ADC_GetValue(&hadc)/1023 - V25)/Avg_Slope)+25;
				 Temp= ((HAL_ADC_GetValue(&hadc)*3300/1024 -500)/10-32)*5/9;
 800303c:	4b85      	ldr	r3, [pc, #532]	; (8003254 <main+0x914>)
 800303e:	0018      	movs	r0, r3
 8003040:	f001 f88c 	bl	800415c <HAL_ADC_GetValue>
 8003044:	0003      	movs	r3, r0
 8003046:	4a84      	ldr	r2, [pc, #528]	; (8003258 <main+0x918>)
 8003048:	4353      	muls	r3, r2
 800304a:	0a9b      	lsrs	r3, r3, #10
 800304c:	3bf5      	subs	r3, #245	; 0xf5
 800304e:	3bff      	subs	r3, #255	; 0xff
 8003050:	210a      	movs	r1, #10
 8003052:	0018      	movs	r0, r3
 8003054:	f7fd f872 	bl	800013c <__udivsi3>
 8003058:	0003      	movs	r3, r0
 800305a:	001a      	movs	r2, r3
 800305c:	0013      	movs	r3, r2
 800305e:	009b      	lsls	r3, r3, #2
 8003060:	189b      	adds	r3, r3, r2
 8003062:	3ba0      	subs	r3, #160	; 0xa0
 8003064:	2109      	movs	r1, #9
 8003066:	0018      	movs	r0, r3
 8003068:	f7fd f868 	bl	800013c <__udivsi3>
 800306c:	0003      	movs	r3, r0
 800306e:	0018      	movs	r0, r3
 8003070:	f7fe ffd8 	bl	8002024 <__aeabi_ui2d>
 8003074:	0002      	movs	r2, r0
 8003076:	000b      	movs	r3, r1
 8003078:	4978      	ldr	r1, [pc, #480]	; (800325c <main+0x91c>)
 800307a:	600a      	str	r2, [r1, #0]
 800307c:	604b      	str	r3, [r1, #4]
				 uint8_t* text = (unsigned char *)("Temperatura: ");
 800307e:	4b78      	ldr	r3, [pc, #480]	; (8003260 <main+0x920>)
 8003080:	627b      	str	r3, [r7, #36]	; 0x24
				 st7565_drawstring(buffer, 0, 4, text);
 8003082:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003084:	4870      	ldr	r0, [pc, #448]	; (8003248 <main+0x908>)
 8003086:	2204      	movs	r2, #4
 8003088:	2100      	movs	r1, #0
 800308a:	f7ff facb 	bl	8002624 <st7565_drawstring>
				 char c[11]="";
 800308e:	1d3b      	adds	r3, r7, #4
 8003090:	2200      	movs	r2, #0
 8003092:	601a      	str	r2, [r3, #0]
 8003094:	3304      	adds	r3, #4
 8003096:	2207      	movs	r2, #7
 8003098:	2100      	movs	r1, #0
 800309a:	0018      	movs	r0, r3
 800309c:	f002 feca 	bl	8005e34 <memset>
				 sprintf(c,"%.1f",Temp);
 80030a0:	4b6e      	ldr	r3, [pc, #440]	; (800325c <main+0x91c>)
 80030a2:	681a      	ldr	r2, [r3, #0]
 80030a4:	685b      	ldr	r3, [r3, #4]
 80030a6:	496f      	ldr	r1, [pc, #444]	; (8003264 <main+0x924>)
 80030a8:	1d38      	adds	r0, r7, #4
 80030aa:	f003 fb39 	bl	8006720 <siprintf>

				 st7565_drawstring(buffer, 70, 4, c);
 80030ae:	1d3b      	adds	r3, r7, #4
 80030b0:	4865      	ldr	r0, [pc, #404]	; (8003248 <main+0x908>)
 80030b2:	2204      	movs	r2, #4
 80030b4:	2146      	movs	r1, #70	; 0x46
 80030b6:	f7ff fab5 	bl	8002624 <st7565_drawstring>
				 if(Temp<25)
 80030ba:	4b68      	ldr	r3, [pc, #416]	; (800325c <main+0x91c>)
 80030bc:	6818      	ldr	r0, [r3, #0]
 80030be:	6859      	ldr	r1, [r3, #4]
 80030c0:	2200      	movs	r2, #0
 80030c2:	4b69      	ldr	r3, [pc, #420]	; (8003268 <main+0x928>)
 80030c4:	f7fd f9c6 	bl	8000454 <__aeabi_dcmplt>
 80030c8:	1e03      	subs	r3, r0, #0
 80030ca:	d01e      	beq.n	800310a <main+0x7ca>
				 {
					 st7565_drawline(buffer, 115, 50, 115, 40, 255);
 80030cc:	485e      	ldr	r0, [pc, #376]	; (8003248 <main+0x908>)
 80030ce:	23ff      	movs	r3, #255	; 0xff
 80030d0:	9301      	str	r3, [sp, #4]
 80030d2:	2328      	movs	r3, #40	; 0x28
 80030d4:	9300      	str	r3, [sp, #0]
 80030d6:	2373      	movs	r3, #115	; 0x73
 80030d8:	2232      	movs	r2, #50	; 0x32
 80030da:	2173      	movs	r1, #115	; 0x73
 80030dc:	f7ff fb24 	bl	8002728 <st7565_drawline>
					 st7565_drawline(buffer, 114, 50, 114, 40, 255);
 80030e0:	4859      	ldr	r0, [pc, #356]	; (8003248 <main+0x908>)
 80030e2:	23ff      	movs	r3, #255	; 0xff
 80030e4:	9301      	str	r3, [sp, #4]
 80030e6:	2328      	movs	r3, #40	; 0x28
 80030e8:	9300      	str	r3, [sp, #0]
 80030ea:	2372      	movs	r3, #114	; 0x72
 80030ec:	2232      	movs	r2, #50	; 0x32
 80030ee:	2172      	movs	r1, #114	; 0x72
 80030f0:	f7ff fb1a 	bl	8002728 <st7565_drawline>
					 st7565_drawline(buffer, 116, 50, 116, 40, 255);
 80030f4:	4854      	ldr	r0, [pc, #336]	; (8003248 <main+0x908>)
 80030f6:	23ff      	movs	r3, #255	; 0xff
 80030f8:	9301      	str	r3, [sp, #4]
 80030fa:	2328      	movs	r3, #40	; 0x28
 80030fc:	9300      	str	r3, [sp, #0]
 80030fe:	2374      	movs	r3, #116	; 0x74
 8003100:	2232      	movs	r2, #50	; 0x32
 8003102:	2174      	movs	r1, #116	; 0x74
 8003104:	f7ff fb10 	bl	8002728 <st7565_drawline>
 8003108:	e076      	b.n	80031f8 <main+0x8b8>
				 }
				 else if (Temp<30)
 800310a:	4b54      	ldr	r3, [pc, #336]	; (800325c <main+0x91c>)
 800310c:	6818      	ldr	r0, [r3, #0]
 800310e:	6859      	ldr	r1, [r3, #4]
 8003110:	2200      	movs	r2, #0
 8003112:	4b56      	ldr	r3, [pc, #344]	; (800326c <main+0x92c>)
 8003114:	f7fd f99e 	bl	8000454 <__aeabi_dcmplt>
 8003118:	1e03      	subs	r3, r0, #0
 800311a:	d01e      	beq.n	800315a <main+0x81a>
				 {
					st7565_drawline(buffer, 115, 50, 115, 30, 255);
 800311c:	484a      	ldr	r0, [pc, #296]	; (8003248 <main+0x908>)
 800311e:	23ff      	movs	r3, #255	; 0xff
 8003120:	9301      	str	r3, [sp, #4]
 8003122:	231e      	movs	r3, #30
 8003124:	9300      	str	r3, [sp, #0]
 8003126:	2373      	movs	r3, #115	; 0x73
 8003128:	2232      	movs	r2, #50	; 0x32
 800312a:	2173      	movs	r1, #115	; 0x73
 800312c:	f7ff fafc 	bl	8002728 <st7565_drawline>
					st7565_drawline(buffer, 114, 50, 114, 30, 255);
 8003130:	4845      	ldr	r0, [pc, #276]	; (8003248 <main+0x908>)
 8003132:	23ff      	movs	r3, #255	; 0xff
 8003134:	9301      	str	r3, [sp, #4]
 8003136:	231e      	movs	r3, #30
 8003138:	9300      	str	r3, [sp, #0]
 800313a:	2372      	movs	r3, #114	; 0x72
 800313c:	2232      	movs	r2, #50	; 0x32
 800313e:	2172      	movs	r1, #114	; 0x72
 8003140:	f7ff faf2 	bl	8002728 <st7565_drawline>
					st7565_drawline(buffer, 116, 50, 116, 30, 255);
 8003144:	4840      	ldr	r0, [pc, #256]	; (8003248 <main+0x908>)
 8003146:	23ff      	movs	r3, #255	; 0xff
 8003148:	9301      	str	r3, [sp, #4]
 800314a:	231e      	movs	r3, #30
 800314c:	9300      	str	r3, [sp, #0]
 800314e:	2374      	movs	r3, #116	; 0x74
 8003150:	2232      	movs	r2, #50	; 0x32
 8003152:	2174      	movs	r1, #116	; 0x74
 8003154:	f7ff fae8 	bl	8002728 <st7565_drawline>
 8003158:	e04e      	b.n	80031f8 <main+0x8b8>
				 }
				 else if (Temp<35)
 800315a:	4b40      	ldr	r3, [pc, #256]	; (800325c <main+0x91c>)
 800315c:	6818      	ldr	r0, [r3, #0]
 800315e:	6859      	ldr	r1, [r3, #4]
 8003160:	2200      	movs	r2, #0
 8003162:	4b43      	ldr	r3, [pc, #268]	; (8003270 <main+0x930>)
 8003164:	f7fd f976 	bl	8000454 <__aeabi_dcmplt>
 8003168:	1e03      	subs	r3, r0, #0
 800316a:	d01e      	beq.n	80031aa <main+0x86a>
				 {
					st7565_drawline(buffer, 115, 50, 115, 20, 255);
 800316c:	4836      	ldr	r0, [pc, #216]	; (8003248 <main+0x908>)
 800316e:	23ff      	movs	r3, #255	; 0xff
 8003170:	9301      	str	r3, [sp, #4]
 8003172:	2314      	movs	r3, #20
 8003174:	9300      	str	r3, [sp, #0]
 8003176:	2373      	movs	r3, #115	; 0x73
 8003178:	2232      	movs	r2, #50	; 0x32
 800317a:	2173      	movs	r1, #115	; 0x73
 800317c:	f7ff fad4 	bl	8002728 <st7565_drawline>
					st7565_drawline(buffer, 114, 50, 114, 20, 255);
 8003180:	4831      	ldr	r0, [pc, #196]	; (8003248 <main+0x908>)
 8003182:	23ff      	movs	r3, #255	; 0xff
 8003184:	9301      	str	r3, [sp, #4]
 8003186:	2314      	movs	r3, #20
 8003188:	9300      	str	r3, [sp, #0]
 800318a:	2372      	movs	r3, #114	; 0x72
 800318c:	2232      	movs	r2, #50	; 0x32
 800318e:	2172      	movs	r1, #114	; 0x72
 8003190:	f7ff faca 	bl	8002728 <st7565_drawline>
					st7565_drawline(buffer, 116, 50, 116, 20, 255);
 8003194:	482c      	ldr	r0, [pc, #176]	; (8003248 <main+0x908>)
 8003196:	23ff      	movs	r3, #255	; 0xff
 8003198:	9301      	str	r3, [sp, #4]
 800319a:	2314      	movs	r3, #20
 800319c:	9300      	str	r3, [sp, #0]
 800319e:	2374      	movs	r3, #116	; 0x74
 80031a0:	2232      	movs	r2, #50	; 0x32
 80031a2:	2174      	movs	r1, #116	; 0x74
 80031a4:	f7ff fac0 	bl	8002728 <st7565_drawline>
 80031a8:	e026      	b.n	80031f8 <main+0x8b8>
				 }
				 else if (Temp>=35)
 80031aa:	4b2c      	ldr	r3, [pc, #176]	; (800325c <main+0x91c>)
 80031ac:	6818      	ldr	r0, [r3, #0]
 80031ae:	6859      	ldr	r1, [r3, #4]
 80031b0:	2200      	movs	r2, #0
 80031b2:	4b2f      	ldr	r3, [pc, #188]	; (8003270 <main+0x930>)
 80031b4:	f7fd f96c 	bl	8000490 <__aeabi_dcmpge>
 80031b8:	1e03      	subs	r3, r0, #0
 80031ba:	d01d      	beq.n	80031f8 <main+0x8b8>
				 {
					st7565_drawline(buffer, 115, 50, 115, 10, 255);
 80031bc:	4822      	ldr	r0, [pc, #136]	; (8003248 <main+0x908>)
 80031be:	23ff      	movs	r3, #255	; 0xff
 80031c0:	9301      	str	r3, [sp, #4]
 80031c2:	230a      	movs	r3, #10
 80031c4:	9300      	str	r3, [sp, #0]
 80031c6:	2373      	movs	r3, #115	; 0x73
 80031c8:	2232      	movs	r2, #50	; 0x32
 80031ca:	2173      	movs	r1, #115	; 0x73
 80031cc:	f7ff faac 	bl	8002728 <st7565_drawline>
					st7565_drawline(buffer, 114, 50, 114, 10, 255);
 80031d0:	481d      	ldr	r0, [pc, #116]	; (8003248 <main+0x908>)
 80031d2:	23ff      	movs	r3, #255	; 0xff
 80031d4:	9301      	str	r3, [sp, #4]
 80031d6:	230a      	movs	r3, #10
 80031d8:	9300      	str	r3, [sp, #0]
 80031da:	2372      	movs	r3, #114	; 0x72
 80031dc:	2232      	movs	r2, #50	; 0x32
 80031de:	2172      	movs	r1, #114	; 0x72
 80031e0:	f7ff faa2 	bl	8002728 <st7565_drawline>
					st7565_drawline(buffer, 116, 50, 116, 10, 255);
 80031e4:	4818      	ldr	r0, [pc, #96]	; (8003248 <main+0x908>)
 80031e6:	23ff      	movs	r3, #255	; 0xff
 80031e8:	9301      	str	r3, [sp, #4]
 80031ea:	230a      	movs	r3, #10
 80031ec:	9300      	str	r3, [sp, #0]
 80031ee:	2374      	movs	r3, #116	; 0x74
 80031f0:	2232      	movs	r2, #50	; 0x32
 80031f2:	2174      	movs	r1, #116	; 0x74
 80031f4:	f7ff fa98 	bl	8002728 <st7565_drawline>
				 }
				 st7565_write_buffer(buffer);
 80031f8:	4b13      	ldr	r3, [pc, #76]	; (8003248 <main+0x908>)
 80031fa:	0018      	movs	r0, r3
 80031fc:	f7fe ff56 	bl	80020ac <st7565_write_buffer>


				break;
 8003200:	e00d      	b.n	800321e <main+0x8de>

				break;
			}
			case 5://prezentare
			{
				int32_t text = (unsigned char *)("Sovaiala Alexandru     PREH WORKSHOP            2022 ");
 8003202:	4b1c      	ldr	r3, [pc, #112]	; (8003274 <main+0x934>)
 8003204:	62bb      	str	r3, [r7, #40]	; 0x28
				st7565_drawstring(buffer, 10, 2, text);
 8003206:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003208:	480f      	ldr	r0, [pc, #60]	; (8003248 <main+0x908>)
 800320a:	2202      	movs	r2, #2
 800320c:	210a      	movs	r1, #10
 800320e:	f7ff fa09 	bl	8002624 <st7565_drawstring>
				st7565_write_buffer(buffer);
 8003212:	4b0d      	ldr	r3, [pc, #52]	; (8003248 <main+0x908>)
 8003214:	0018      	movs	r0, r3
 8003216:	f7fe ff49 	bl	80020ac <st7565_write_buffer>

				break;
 800321a:	e000      	b.n	800321e <main+0x8de>
				break;
 800321c:	46c0      	nop			; (mov r8, r8)
			}
		}
		if(HAL_GPIO_ReadPin(GPIOC, 13) == 0)
 800321e:	4b16      	ldr	r3, [pc, #88]	; (8003278 <main+0x938>)
 8003220:	210d      	movs	r1, #13
 8003222:	0018      	movs	r0, r3
 8003224:	f001 fc22 	bl	8004a6c <HAL_GPIO_ReadPin>

		}


		/* Check if timer had overflow */
		if(__HAL_TIM_GET_FLAG(&htim16,TIM_FLAG_CC1) != 0)
 8003228:	4b14      	ldr	r3, [pc, #80]	; (800327c <main+0x93c>)
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	691b      	ldr	r3, [r3, #16]
 800322e:	2202      	movs	r2, #2
 8003230:	4013      	ands	r3, r2
 8003232:	2b02      	cmp	r3, #2
 8003234:	d001      	beq.n	800323a <main+0x8fa>
 8003236:	f7ff fbca 	bl	80029ce <main+0x8e>
		{
			/* Clear overflow flag */
			__HAL_TIM_CLEAR_FLAG(&htim16,TIM_FLAG_CC1);
 800323a:	4b10      	ldr	r3, [pc, #64]	; (800327c <main+0x93c>)
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	2203      	movs	r2, #3
 8003240:	4252      	negs	r2, r2
 8003242:	611a      	str	r2, [r3, #16]
	{
 8003244:	f7ff fbc3 	bl	80029ce <main+0x8e>
 8003248:	20000000 	.word	0x20000000
 800324c:	20001c08 	.word	0x20001c08
 8003250:	00001001 	.word	0x00001001
 8003254:	20002220 	.word	0x20002220
 8003258:	00000ce4 	.word	0x00000ce4
 800325c:	20002218 	.word	0x20002218
 8003260:	08008e08 	.word	0x08008e08
 8003264:	08008df0 	.word	0x08008df0
 8003268:	40390000 	.word	0x40390000
 800326c:	403e0000 	.word	0x403e0000
 8003270:	40418000 	.word	0x40418000
 8003274:	08008e18 	.word	0x08008e18
 8003278:	48000800 	.word	0x48000800
 800327c:	200022c4 	.word	0x200022c4

08003280 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003280:	b590      	push	{r4, r7, lr}
 8003282:	b093      	sub	sp, #76	; 0x4c
 8003284:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003286:	2414      	movs	r4, #20
 8003288:	193b      	adds	r3, r7, r4
 800328a:	0018      	movs	r0, r3
 800328c:	2334      	movs	r3, #52	; 0x34
 800328e:	001a      	movs	r2, r3
 8003290:	2100      	movs	r1, #0
 8003292:	f002 fdcf 	bl	8005e34 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003296:	1d3b      	adds	r3, r7, #4
 8003298:	0018      	movs	r0, r3
 800329a:	2310      	movs	r3, #16
 800329c:	001a      	movs	r2, r3
 800329e:	2100      	movs	r1, #0
 80032a0:	f002 fdc8 	bl	8005e34 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI14|RCC_OSCILLATORTYPE_HSI48;
 80032a4:	0021      	movs	r1, r4
 80032a6:	187b      	adds	r3, r7, r1
 80032a8:	2230      	movs	r2, #48	; 0x30
 80032aa:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80032ac:	187b      	adds	r3, r7, r1
 80032ae:	2201      	movs	r2, #1
 80032b0:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.HSI14State = RCC_HSI14_ON;
 80032b2:	187b      	adds	r3, r7, r1
 80032b4:	2201      	movs	r2, #1
 80032b6:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.HSI14CalibrationValue = 16;
 80032b8:	187b      	adds	r3, r7, r1
 80032ba:	2210      	movs	r2, #16
 80032bc:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80032be:	187b      	adds	r3, r7, r1
 80032c0:	2200      	movs	r2, #0
 80032c2:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80032c4:	187b      	adds	r3, r7, r1
 80032c6:	0018      	movs	r0, r3
 80032c8:	f001 fc0a 	bl	8004ae0 <HAL_RCC_OscConfig>
 80032cc:	1e03      	subs	r3, r0, #0
 80032ce:	d001      	beq.n	80032d4 <SystemClock_Config+0x54>
  {
    Error_Handler();
 80032d0:	f000 fa50 	bl	8003774 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80032d4:	1d3b      	adds	r3, r7, #4
 80032d6:	2207      	movs	r2, #7
 80032d8:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI48;
 80032da:	1d3b      	adds	r3, r7, #4
 80032dc:	2203      	movs	r2, #3
 80032de:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80032e0:	1d3b      	adds	r3, r7, #4
 80032e2:	2200      	movs	r2, #0
 80032e4:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80032e6:	1d3b      	adds	r3, r7, #4
 80032e8:	2200      	movs	r2, #0
 80032ea:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80032ec:	1d3b      	adds	r3, r7, #4
 80032ee:	2101      	movs	r1, #1
 80032f0:	0018      	movs	r0, r3
 80032f2:	f001 ff7b 	bl	80051ec <HAL_RCC_ClockConfig>
 80032f6:	1e03      	subs	r3, r0, #0
 80032f8:	d001      	beq.n	80032fe <SystemClock_Config+0x7e>
  {
    Error_Handler();
 80032fa:	f000 fa3b 	bl	8003774 <Error_Handler>
  }
}
 80032fe:	46c0      	nop			; (mov r8, r8)
 8003300:	46bd      	mov	sp, r7
 8003302:	b013      	add	sp, #76	; 0x4c
 8003304:	bd90      	pop	{r4, r7, pc}
	...

08003308 <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 8003308:	b580      	push	{r7, lr}
 800330a:	b084      	sub	sp, #16
 800330c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800330e:	1d3b      	adds	r3, r7, #4
 8003310:	0018      	movs	r0, r3
 8003312:	230c      	movs	r3, #12
 8003314:	001a      	movs	r2, r3
 8003316:	2100      	movs	r1, #0
 8003318:	f002 fd8c 	bl	8005e34 <memset>
  /* USER CODE BEGIN ADC_Init 1 */

  /* USER CODE END ADC_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 800331c:	4b1b      	ldr	r3, [pc, #108]	; (800338c <MX_ADC_Init+0x84>)
 800331e:	4a1c      	ldr	r2, [pc, #112]	; (8003390 <MX_ADC_Init+0x88>)
 8003320:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8003322:	4b1a      	ldr	r3, [pc, #104]	; (800338c <MX_ADC_Init+0x84>)
 8003324:	2200      	movs	r2, #0
 8003326:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_10B;
 8003328:	4b18      	ldr	r3, [pc, #96]	; (800338c <MX_ADC_Init+0x84>)
 800332a:	2208      	movs	r2, #8
 800332c:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800332e:	4b17      	ldr	r3, [pc, #92]	; (800338c <MX_ADC_Init+0x84>)
 8003330:	2200      	movs	r2, #0
 8003332:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 8003334:	4b15      	ldr	r3, [pc, #84]	; (800338c <MX_ADC_Init+0x84>)
 8003336:	2201      	movs	r2, #1
 8003338:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800333a:	4b14      	ldr	r3, [pc, #80]	; (800338c <MX_ADC_Init+0x84>)
 800333c:	2204      	movs	r2, #4
 800333e:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = DISABLE;
 8003340:	4b12      	ldr	r3, [pc, #72]	; (800338c <MX_ADC_Init+0x84>)
 8003342:	2200      	movs	r2, #0
 8003344:	761a      	strb	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 8003346:	4b11      	ldr	r3, [pc, #68]	; (800338c <MX_ADC_Init+0x84>)
 8003348:	2200      	movs	r2, #0
 800334a:	765a      	strb	r2, [r3, #25]
  hadc.Init.ContinuousConvMode = DISABLE;
 800334c:	4b0f      	ldr	r3, [pc, #60]	; (800338c <MX_ADC_Init+0x84>)
 800334e:	2200      	movs	r2, #0
 8003350:	769a      	strb	r2, [r3, #26]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 8003352:	4b0e      	ldr	r3, [pc, #56]	; (800338c <MX_ADC_Init+0x84>)
 8003354:	2200      	movs	r2, #0
 8003356:	76da      	strb	r2, [r3, #27]
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8003358:	4b0c      	ldr	r3, [pc, #48]	; (800338c <MX_ADC_Init+0x84>)
 800335a:	22c2      	movs	r2, #194	; 0xc2
 800335c:	32ff      	adds	r2, #255	; 0xff
 800335e:	61da      	str	r2, [r3, #28]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8003360:	4b0a      	ldr	r3, [pc, #40]	; (800338c <MX_ADC_Init+0x84>)
 8003362:	2200      	movs	r2, #0
 8003364:	621a      	str	r2, [r3, #32]
  hadc.Init.DMAContinuousRequests = DISABLE;
 8003366:	4b09      	ldr	r3, [pc, #36]	; (800338c <MX_ADC_Init+0x84>)
 8003368:	2224      	movs	r2, #36	; 0x24
 800336a:	2100      	movs	r1, #0
 800336c:	5499      	strb	r1, [r3, r2]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800336e:	4b07      	ldr	r3, [pc, #28]	; (800338c <MX_ADC_Init+0x84>)
 8003370:	2201      	movs	r2, #1
 8003372:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8003374:	4b05      	ldr	r3, [pc, #20]	; (800338c <MX_ADC_Init+0x84>)
 8003376:	0018      	movs	r0, r3
 8003378:	f000 fc84 	bl	8003c84 <HAL_ADC_Init>
 800337c:	1e03      	subs	r3, r0, #0
 800337e:	d001      	beq.n	8003384 <MX_ADC_Init+0x7c>
  {
    Error_Handler();
 8003380:	f000 f9f8 	bl	8003774 <Error_Handler>
//  }
//  /* USER CODE BEGIN ADC_Init 2 */
//
//  /* USER CODE END ADC_Init 2 */

}
 8003384:	46c0      	nop			; (mov r8, r8)
 8003386:	46bd      	mov	sp, r7
 8003388:	b004      	add	sp, #16
 800338a:	bd80      	pop	{r7, pc}
 800338c:	20002220 	.word	0x20002220
 8003390:	40012400 	.word	0x40012400

08003394 <ADC_Select_CH13>:

void ADC_Select_CH13 (int rang)
  {
 8003394:	b590      	push	{r4, r7, lr}
 8003396:	b087      	sub	sp, #28
 8003398:	af00      	add	r7, sp, #0
 800339a:	6078      	str	r0, [r7, #4]
    	ADC_ChannelConfTypeDef sConfig = {0};
 800339c:	240c      	movs	r4, #12
 800339e:	193b      	adds	r3, r7, r4
 80033a0:	0018      	movs	r0, r3
 80033a2:	230c      	movs	r3, #12
 80033a4:	001a      	movs	r2, r3
 80033a6:	2100      	movs	r1, #0
 80033a8:	f002 fd44 	bl	8005e34 <memset>
  	  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  	  */
  	  sConfig.Channel = ADC_CHANNEL_13;
 80033ac:	0021      	movs	r1, r4
 80033ae:	187b      	adds	r3, r7, r1
 80033b0:	220d      	movs	r2, #13
 80033b2:	601a      	str	r2, [r3, #0]
  	  sConfig.Rank = rang;
 80033b4:	687a      	ldr	r2, [r7, #4]
 80033b6:	187b      	adds	r3, r7, r1
 80033b8:	605a      	str	r2, [r3, #4]
  	  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80033ba:	187b      	adds	r3, r7, r1
 80033bc:	2280      	movs	r2, #128	; 0x80
 80033be:	0552      	lsls	r2, r2, #21
 80033c0:	609a      	str	r2, [r3, #8]
  	  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80033c2:	187a      	adds	r2, r7, r1
 80033c4:	4b06      	ldr	r3, [pc, #24]	; (80033e0 <ADC_Select_CH13+0x4c>)
 80033c6:	0011      	movs	r1, r2
 80033c8:	0018      	movs	r0, r3
 80033ca:	f000 fed3 	bl	8004174 <HAL_ADC_ConfigChannel>
 80033ce:	1e03      	subs	r3, r0, #0
 80033d0:	d001      	beq.n	80033d6 <ADC_Select_CH13+0x42>
  	  {
  	    Error_Handler();
 80033d2:	f000 f9cf 	bl	8003774 <Error_Handler>
  	  }
  }
 80033d6:	46c0      	nop			; (mov r8, r8)
 80033d8:	46bd      	mov	sp, r7
 80033da:	b007      	add	sp, #28
 80033dc:	bd90      	pop	{r4, r7, pc}
 80033de:	46c0      	nop			; (mov r8, r8)
 80033e0:	20002220 	.word	0x20002220

080033e4 <ADC_Select_CH0>:
	sConfig.Rank= ADC_RANK_NONE;
	sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
}

  void ADC_Select_CH0 (int rang)
   {
 80033e4:	b590      	push	{r4, r7, lr}
 80033e6:	b087      	sub	sp, #28
 80033e8:	af00      	add	r7, sp, #0
 80033ea:	6078      	str	r0, [r7, #4]
   	ADC_ChannelConfTypeDef sConfig = {0};
 80033ec:	240c      	movs	r4, #12
 80033ee:	193b      	adds	r3, r7, r4
 80033f0:	0018      	movs	r0, r3
 80033f2:	230c      	movs	r3, #12
 80033f4:	001a      	movs	r2, r3
 80033f6:	2100      	movs	r1, #0
 80033f8:	f002 fd1c 	bl	8005e34 <memset>
   	  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
   	  */
   	  sConfig.Channel = ADC_CHANNEL_0;
 80033fc:	0021      	movs	r1, r4
 80033fe:	187b      	adds	r3, r7, r1
 8003400:	2200      	movs	r2, #0
 8003402:	601a      	str	r2, [r3, #0]
   	  sConfig.Rank = rang;
 8003404:	687a      	ldr	r2, [r7, #4]
 8003406:	187b      	adds	r3, r7, r1
 8003408:	605a      	str	r2, [r3, #4]
   	  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800340a:	187b      	adds	r3, r7, r1
 800340c:	2280      	movs	r2, #128	; 0x80
 800340e:	0552      	lsls	r2, r2, #21
 8003410:	609a      	str	r2, [r3, #8]
   	  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8003412:	187a      	adds	r2, r7, r1
 8003414:	4b06      	ldr	r3, [pc, #24]	; (8003430 <ADC_Select_CH0+0x4c>)
 8003416:	0011      	movs	r1, r2
 8003418:	0018      	movs	r0, r3
 800341a:	f000 feab 	bl	8004174 <HAL_ADC_ConfigChannel>
 800341e:	1e03      	subs	r3, r0, #0
 8003420:	d001      	beq.n	8003426 <ADC_Select_CH0+0x42>
   	  {
   	    Error_Handler();
 8003422:	f000 f9a7 	bl	8003774 <Error_Handler>
   	  }
   }
 8003426:	46c0      	nop			; (mov r8, r8)
 8003428:	46bd      	mov	sp, r7
 800342a:	b007      	add	sp, #28
 800342c:	bd90      	pop	{r4, r7, pc}
 800342e:	46c0      	nop			; (mov r8, r8)
 8003430:	20002220 	.word	0x20002220

08003434 <ADC_Select_CHTemp>:
  	sConfig.Channel = ADC_CHANNEL_0;
  	sConfig.Rank= ADC_RANK_NONE;
  	sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
  }
  void ADC_Select_CHTemp (int rang)
  {
 8003434:	b590      	push	{r4, r7, lr}
 8003436:	b087      	sub	sp, #28
 8003438:	af00      	add	r7, sp, #0
 800343a:	6078      	str	r0, [r7, #4]
  	ADC_ChannelConfTypeDef sConfig = {0};
 800343c:	240c      	movs	r4, #12
 800343e:	193b      	adds	r3, r7, r4
 8003440:	0018      	movs	r0, r3
 8003442:	230c      	movs	r3, #12
 8003444:	001a      	movs	r2, r3
 8003446:	2100      	movs	r1, #0
 8003448:	f002 fcf4 	bl	8005e34 <memset>
  	  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  	  */
  	  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 800344c:	0021      	movs	r1, r4
 800344e:	187b      	adds	r3, r7, r1
 8003450:	2210      	movs	r2, #16
 8003452:	601a      	str	r2, [r3, #0]
  	  sConfig.Rank = 1;
 8003454:	187b      	adds	r3, r7, r1
 8003456:	2201      	movs	r2, #1
 8003458:	605a      	str	r2, [r3, #4]
  	  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800345a:	187b      	adds	r3, r7, r1
 800345c:	2280      	movs	r2, #128	; 0x80
 800345e:	0552      	lsls	r2, r2, #21
 8003460:	609a      	str	r2, [r3, #8]
  	  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8003462:	187a      	adds	r2, r7, r1
 8003464:	4b06      	ldr	r3, [pc, #24]	; (8003480 <ADC_Select_CHTemp+0x4c>)
 8003466:	0011      	movs	r1, r2
 8003468:	0018      	movs	r0, r3
 800346a:	f000 fe83 	bl	8004174 <HAL_ADC_ConfigChannel>
 800346e:	1e03      	subs	r3, r0, #0
 8003470:	d001      	beq.n	8003476 <ADC_Select_CHTemp+0x42>
  	  {
  	    Error_Handler();
 8003472:	f000 f97f 	bl	8003774 <Error_Handler>
  	  }
  }
 8003476:	46c0      	nop			; (mov r8, r8)
 8003478:	46bd      	mov	sp, r7
 800347a:	b007      	add	sp, #28
 800347c:	bd90      	pop	{r4, r7, pc}
 800347e:	46c0      	nop			; (mov r8, r8)
 8003480:	20002220 	.word	0x20002220

08003484 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8003484:	b580      	push	{r7, lr}
 8003486:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8003488:	4b1b      	ldr	r3, [pc, #108]	; (80034f8 <MX_SPI1_Init+0x74>)
 800348a:	4a1c      	ldr	r2, [pc, #112]	; (80034fc <MX_SPI1_Init+0x78>)
 800348c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800348e:	4b1a      	ldr	r3, [pc, #104]	; (80034f8 <MX_SPI1_Init+0x74>)
 8003490:	2282      	movs	r2, #130	; 0x82
 8003492:	0052      	lsls	r2, r2, #1
 8003494:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8003496:	4b18      	ldr	r3, [pc, #96]	; (80034f8 <MX_SPI1_Init+0x74>)
 8003498:	2200      	movs	r2, #0
 800349a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800349c:	4b16      	ldr	r3, [pc, #88]	; (80034f8 <MX_SPI1_Init+0x74>)
 800349e:	22e0      	movs	r2, #224	; 0xe0
 80034a0:	00d2      	lsls	r2, r2, #3
 80034a2:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80034a4:	4b14      	ldr	r3, [pc, #80]	; (80034f8 <MX_SPI1_Init+0x74>)
 80034a6:	2200      	movs	r2, #0
 80034a8:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80034aa:	4b13      	ldr	r3, [pc, #76]	; (80034f8 <MX_SPI1_Init+0x74>)
 80034ac:	2200      	movs	r2, #0
 80034ae:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80034b0:	4b11      	ldr	r3, [pc, #68]	; (80034f8 <MX_SPI1_Init+0x74>)
 80034b2:	2280      	movs	r2, #128	; 0x80
 80034b4:	0092      	lsls	r2, r2, #2
 80034b6:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 80034b8:	4b0f      	ldr	r3, [pc, #60]	; (80034f8 <MX_SPI1_Init+0x74>)
 80034ba:	2230      	movs	r2, #48	; 0x30
 80034bc:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80034be:	4b0e      	ldr	r3, [pc, #56]	; (80034f8 <MX_SPI1_Init+0x74>)
 80034c0:	2200      	movs	r2, #0
 80034c2:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80034c4:	4b0c      	ldr	r3, [pc, #48]	; (80034f8 <MX_SPI1_Init+0x74>)
 80034c6:	2200      	movs	r2, #0
 80034c8:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80034ca:	4b0b      	ldr	r3, [pc, #44]	; (80034f8 <MX_SPI1_Init+0x74>)
 80034cc:	2200      	movs	r2, #0
 80034ce:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 80034d0:	4b09      	ldr	r3, [pc, #36]	; (80034f8 <MX_SPI1_Init+0x74>)
 80034d2:	2207      	movs	r2, #7
 80034d4:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80034d6:	4b08      	ldr	r3, [pc, #32]	; (80034f8 <MX_SPI1_Init+0x74>)
 80034d8:	2200      	movs	r2, #0
 80034da:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80034dc:	4b06      	ldr	r3, [pc, #24]	; (80034f8 <MX_SPI1_Init+0x74>)
 80034de:	2208      	movs	r2, #8
 80034e0:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80034e2:	4b05      	ldr	r3, [pc, #20]	; (80034f8 <MX_SPI1_Init+0x74>)
 80034e4:	0018      	movs	r0, r3
 80034e6:	f001 ffdb 	bl	80054a0 <HAL_SPI_Init>
 80034ea:	1e03      	subs	r3, r0, #0
 80034ec:	d001      	beq.n	80034f2 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80034ee:	f000 f941 	bl	8003774 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80034f2:	46c0      	nop			; (mov r8, r8)
 80034f4:	46bd      	mov	sp, r7
 80034f6:	bd80      	pop	{r7, pc}
 80034f8:	20002260 	.word	0x20002260
 80034fc:	40013000 	.word	0x40013000

08003500 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 8003500:	b580      	push	{r7, lr}
 8003502:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8003504:	4b0f      	ldr	r3, [pc, #60]	; (8003544 <MX_TIM16_Init+0x44>)
 8003506:	4a10      	ldr	r2, [pc, #64]	; (8003548 <MX_TIM16_Init+0x48>)
 8003508:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 4800-1;
 800350a:	4b0e      	ldr	r3, [pc, #56]	; (8003544 <MX_TIM16_Init+0x44>)
 800350c:	4a0f      	ldr	r2, [pc, #60]	; (800354c <MX_TIM16_Init+0x4c>)
 800350e:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003510:	4b0c      	ldr	r3, [pc, #48]	; (8003544 <MX_TIM16_Init+0x44>)
 8003512:	2200      	movs	r2, #0
 8003514:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 10000;
 8003516:	4b0b      	ldr	r3, [pc, #44]	; (8003544 <MX_TIM16_Init+0x44>)
 8003518:	4a0d      	ldr	r2, [pc, #52]	; (8003550 <MX_TIM16_Init+0x50>)
 800351a:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800351c:	4b09      	ldr	r3, [pc, #36]	; (8003544 <MX_TIM16_Init+0x44>)
 800351e:	2200      	movs	r2, #0
 8003520:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8003522:	4b08      	ldr	r3, [pc, #32]	; (8003544 <MX_TIM16_Init+0x44>)
 8003524:	2200      	movs	r2, #0
 8003526:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003528:	4b06      	ldr	r3, [pc, #24]	; (8003544 <MX_TIM16_Init+0x44>)
 800352a:	2200      	movs	r2, #0
 800352c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 800352e:	4b05      	ldr	r3, [pc, #20]	; (8003544 <MX_TIM16_Init+0x44>)
 8003530:	0018      	movs	r0, r3
 8003532:	f002 fb3b 	bl	8005bac <HAL_TIM_Base_Init>
 8003536:	1e03      	subs	r3, r0, #0
 8003538:	d001      	beq.n	800353e <MX_TIM16_Init+0x3e>
  {
    Error_Handler();
 800353a:	f000 f91b 	bl	8003774 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 800353e:	46c0      	nop			; (mov r8, r8)
 8003540:	46bd      	mov	sp, r7
 8003542:	bd80      	pop	{r7, pc}
 8003544:	200022c4 	.word	0x200022c4
 8003548:	40014400 	.word	0x40014400
 800354c:	000012bf 	.word	0x000012bf
 8003550:	00002710 	.word	0x00002710

08003554 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003554:	b590      	push	{r4, r7, lr}
 8003556:	b08b      	sub	sp, #44	; 0x2c
 8003558:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800355a:	2414      	movs	r4, #20
 800355c:	193b      	adds	r3, r7, r4
 800355e:	0018      	movs	r0, r3
 8003560:	2314      	movs	r3, #20
 8003562:	001a      	movs	r2, r3
 8003564:	2100      	movs	r1, #0
 8003566:	f002 fc65 	bl	8005e34 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800356a:	4b55      	ldr	r3, [pc, #340]	; (80036c0 <MX_GPIO_Init+0x16c>)
 800356c:	695a      	ldr	r2, [r3, #20]
 800356e:	4b54      	ldr	r3, [pc, #336]	; (80036c0 <MX_GPIO_Init+0x16c>)
 8003570:	2180      	movs	r1, #128	; 0x80
 8003572:	0309      	lsls	r1, r1, #12
 8003574:	430a      	orrs	r2, r1
 8003576:	615a      	str	r2, [r3, #20]
 8003578:	4b51      	ldr	r3, [pc, #324]	; (80036c0 <MX_GPIO_Init+0x16c>)
 800357a:	695a      	ldr	r2, [r3, #20]
 800357c:	2380      	movs	r3, #128	; 0x80
 800357e:	031b      	lsls	r3, r3, #12
 8003580:	4013      	ands	r3, r2
 8003582:	613b      	str	r3, [r7, #16]
 8003584:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8003586:	4b4e      	ldr	r3, [pc, #312]	; (80036c0 <MX_GPIO_Init+0x16c>)
 8003588:	695a      	ldr	r2, [r3, #20]
 800358a:	4b4d      	ldr	r3, [pc, #308]	; (80036c0 <MX_GPIO_Init+0x16c>)
 800358c:	2180      	movs	r1, #128	; 0x80
 800358e:	03c9      	lsls	r1, r1, #15
 8003590:	430a      	orrs	r2, r1
 8003592:	615a      	str	r2, [r3, #20]
 8003594:	4b4a      	ldr	r3, [pc, #296]	; (80036c0 <MX_GPIO_Init+0x16c>)
 8003596:	695a      	ldr	r2, [r3, #20]
 8003598:	2380      	movs	r3, #128	; 0x80
 800359a:	03db      	lsls	r3, r3, #15
 800359c:	4013      	ands	r3, r2
 800359e:	60fb      	str	r3, [r7, #12]
 80035a0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80035a2:	4b47      	ldr	r3, [pc, #284]	; (80036c0 <MX_GPIO_Init+0x16c>)
 80035a4:	695a      	ldr	r2, [r3, #20]
 80035a6:	4b46      	ldr	r3, [pc, #280]	; (80036c0 <MX_GPIO_Init+0x16c>)
 80035a8:	2180      	movs	r1, #128	; 0x80
 80035aa:	0289      	lsls	r1, r1, #10
 80035ac:	430a      	orrs	r2, r1
 80035ae:	615a      	str	r2, [r3, #20]
 80035b0:	4b43      	ldr	r3, [pc, #268]	; (80036c0 <MX_GPIO_Init+0x16c>)
 80035b2:	695a      	ldr	r2, [r3, #20]
 80035b4:	2380      	movs	r3, #128	; 0x80
 80035b6:	029b      	lsls	r3, r3, #10
 80035b8:	4013      	ands	r3, r2
 80035ba:	60bb      	str	r3, [r7, #8]
 80035bc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80035be:	4b40      	ldr	r3, [pc, #256]	; (80036c0 <MX_GPIO_Init+0x16c>)
 80035c0:	695a      	ldr	r2, [r3, #20]
 80035c2:	4b3f      	ldr	r3, [pc, #252]	; (80036c0 <MX_GPIO_Init+0x16c>)
 80035c4:	2180      	movs	r1, #128	; 0x80
 80035c6:	02c9      	lsls	r1, r1, #11
 80035c8:	430a      	orrs	r2, r1
 80035ca:	615a      	str	r2, [r3, #20]
 80035cc:	4b3c      	ldr	r3, [pc, #240]	; (80036c0 <MX_GPIO_Init+0x16c>)
 80035ce:	695a      	ldr	r2, [r3, #20]
 80035d0:	2380      	movs	r3, #128	; 0x80
 80035d2:	02db      	lsls	r3, r3, #11
 80035d4:	4013      	ands	r3, r2
 80035d6:	607b      	str	r3, [r7, #4]
 80035d8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPICD_GPIO_Port, SPICD_Pin, GPIO_PIN_SET);
 80035da:	4b3a      	ldr	r3, [pc, #232]	; (80036c4 <MX_GPIO_Init+0x170>)
 80035dc:	2201      	movs	r2, #1
 80035de:	2180      	movs	r1, #128	; 0x80
 80035e0:	0018      	movs	r0, r3
 80035e2:	f001 fa60 	bl	8004aa6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, BL_Pin|SPIRST_Pin, GPIO_PIN_RESET);
 80035e6:	23c0      	movs	r3, #192	; 0xc0
 80035e8:	0099      	lsls	r1, r3, #2
 80035ea:	2390      	movs	r3, #144	; 0x90
 80035ec:	05db      	lsls	r3, r3, #23
 80035ee:	2200      	movs	r2, #0
 80035f0:	0018      	movs	r0, r3
 80035f2:	f001 fa58 	bl	8004aa6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3|SPICS_Pin, GPIO_PIN_RESET);
 80035f6:	4b34      	ldr	r3, [pc, #208]	; (80036c8 <MX_GPIO_Init+0x174>)
 80035f8:	2200      	movs	r2, #0
 80035fa:	2148      	movs	r1, #72	; 0x48
 80035fc:	0018      	movs	r0, r3
 80035fe:	f001 fa52 	bl	8004aa6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8003602:	193b      	adds	r3, r7, r4
 8003604:	2280      	movs	r2, #128	; 0x80
 8003606:	0192      	lsls	r2, r2, #6
 8003608:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800360a:	193b      	adds	r3, r7, r4
 800360c:	2200      	movs	r2, #0
 800360e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003610:	193b      	adds	r3, r7, r4
 8003612:	2200      	movs	r2, #0
 8003614:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003616:	193b      	adds	r3, r7, r4
 8003618:	4a2a      	ldr	r2, [pc, #168]	; (80036c4 <MX_GPIO_Init+0x170>)
 800361a:	0019      	movs	r1, r3
 800361c:	0010      	movs	r0, r2
 800361e:	f001 f8ad 	bl	800477c <HAL_GPIO_Init>

  /*Configure GPIO pin : SPICD_Pin */
  GPIO_InitStruct.Pin = SPICD_Pin;
 8003622:	193b      	adds	r3, r7, r4
 8003624:	2280      	movs	r2, #128	; 0x80
 8003626:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003628:	193b      	adds	r3, r7, r4
 800362a:	2201      	movs	r2, #1
 800362c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800362e:	193b      	adds	r3, r7, r4
 8003630:	2200      	movs	r2, #0
 8003632:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003634:	193b      	adds	r3, r7, r4
 8003636:	2200      	movs	r2, #0
 8003638:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(SPICD_GPIO_Port, &GPIO_InitStruct);
 800363a:	193b      	adds	r3, r7, r4
 800363c:	4a21      	ldr	r2, [pc, #132]	; (80036c4 <MX_GPIO_Init+0x170>)
 800363e:	0019      	movs	r1, r3
 8003640:	0010      	movs	r0, r2
 8003642:	f001 f89b 	bl	800477c <HAL_GPIO_Init>

  /*Configure GPIO pins : BL_Pin SPIRST_Pin */
  GPIO_InitStruct.Pin = BL_Pin|SPIRST_Pin;
 8003646:	0021      	movs	r1, r4
 8003648:	187b      	adds	r3, r7, r1
 800364a:	22c0      	movs	r2, #192	; 0xc0
 800364c:	0092      	lsls	r2, r2, #2
 800364e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003650:	000c      	movs	r4, r1
 8003652:	193b      	adds	r3, r7, r4
 8003654:	2201      	movs	r2, #1
 8003656:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003658:	193b      	adds	r3, r7, r4
 800365a:	2200      	movs	r2, #0
 800365c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800365e:	193b      	adds	r3, r7, r4
 8003660:	2200      	movs	r2, #0
 8003662:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003664:	193a      	adds	r2, r7, r4
 8003666:	2390      	movs	r3, #144	; 0x90
 8003668:	05db      	lsls	r3, r3, #23
 800366a:	0011      	movs	r1, r2
 800366c:	0018      	movs	r0, r3
 800366e:	f001 f885 	bl	800477c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB3 SPICS_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_3|SPICS_Pin;
 8003672:	193b      	adds	r3, r7, r4
 8003674:	2248      	movs	r2, #72	; 0x48
 8003676:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003678:	193b      	adds	r3, r7, r4
 800367a:	2201      	movs	r2, #1
 800367c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800367e:	193b      	adds	r3, r7, r4
 8003680:	2200      	movs	r2, #0
 8003682:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003684:	193b      	adds	r3, r7, r4
 8003686:	2200      	movs	r2, #0
 8003688:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800368a:	193b      	adds	r3, r7, r4
 800368c:	4a0e      	ldr	r2, [pc, #56]	; (80036c8 <MX_GPIO_Init+0x174>)
 800368e:	0019      	movs	r1, r3
 8003690:	0010      	movs	r0, r2
 8003692:	f001 f873 	bl	800477c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8003696:	0021      	movs	r1, r4
 8003698:	187b      	adds	r3, r7, r1
 800369a:	2220      	movs	r2, #32
 800369c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800369e:	187b      	adds	r3, r7, r1
 80036a0:	2200      	movs	r2, #0
 80036a2:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036a4:	187b      	adds	r3, r7, r1
 80036a6:	2200      	movs	r2, #0
 80036a8:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80036aa:	187b      	adds	r3, r7, r1
 80036ac:	4a06      	ldr	r2, [pc, #24]	; (80036c8 <MX_GPIO_Init+0x174>)
 80036ae:	0019      	movs	r1, r3
 80036b0:	0010      	movs	r0, r2
 80036b2:	f001 f863 	bl	800477c <HAL_GPIO_Init>

}
 80036b6:	46c0      	nop			; (mov r8, r8)
 80036b8:	46bd      	mov	sp, r7
 80036ba:	b00b      	add	sp, #44	; 0x2c
 80036bc:	bd90      	pop	{r4, r7, pc}
 80036be:	46c0      	nop			; (mov r8, r8)
 80036c0:	40021000 	.word	0x40021000
 80036c4:	48000800 	.word	0x48000800
 80036c8:	48000400 	.word	0x48000400

080036cc <checkLCD>:

/* USER CODE BEGIN 4 */
int checkLCD() {
 80036cc:	b580      	push	{r7, lr}
 80036ce:	af00      	add	r7, sp, #0
	if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_5) == 0) return 1;
 80036d0:	4b06      	ldr	r3, [pc, #24]	; (80036ec <checkLCD+0x20>)
 80036d2:	2120      	movs	r1, #32
 80036d4:	0018      	movs	r0, r3
 80036d6:	f001 f9c9 	bl	8004a6c <HAL_GPIO_ReadPin>
 80036da:	1e03      	subs	r3, r0, #0
 80036dc:	d101      	bne.n	80036e2 <checkLCD+0x16>
 80036de:	2301      	movs	r3, #1
 80036e0:	e000      	b.n	80036e4 <checkLCD+0x18>
	else return 0;
 80036e2:	2300      	movs	r3, #0
}
 80036e4:	0018      	movs	r0, r3
 80036e6:	46bd      	mov	sp, r7
 80036e8:	bd80      	pop	{r7, pc}
 80036ea:	46c0      	nop			; (mov r8, r8)
 80036ec:	48000400 	.word	0x48000400

080036f0 <initA5GPIO>:

void initA5GPIO() {
 80036f0:	b580      	push	{r7, lr}
 80036f2:	b086      	sub	sp, #24
 80036f4:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80036f6:	1d3b      	adds	r3, r7, #4
 80036f8:	0018      	movs	r0, r3
 80036fa:	2314      	movs	r3, #20
 80036fc:	001a      	movs	r2, r3
 80036fe:	2100      	movs	r1, #0
 8003700:	f002 fb98 	bl	8005e34 <memset>

	GPIO_InitStruct.Pin = GPIO_PIN_5;
 8003704:	1d3b      	adds	r3, r7, #4
 8003706:	2220      	movs	r2, #32
 8003708:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800370a:	1d3b      	adds	r3, r7, #4
 800370c:	2201      	movs	r2, #1
 800370e:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003710:	1d3b      	adds	r3, r7, #4
 8003712:	2200      	movs	r2, #0
 8003714:	609a      	str	r2, [r3, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003716:	1d3b      	adds	r3, r7, #4
 8003718:	2200      	movs	r2, #0
 800371a:	60da      	str	r2, [r3, #12]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800371c:	1d3a      	adds	r2, r7, #4
 800371e:	2390      	movs	r3, #144	; 0x90
 8003720:	05db      	lsls	r3, r3, #23
 8003722:	0011      	movs	r1, r2
 8003724:	0018      	movs	r0, r3
 8003726:	f001 f829 	bl	800477c <HAL_GPIO_Init>
}
 800372a:	46c0      	nop			; (mov r8, r8)
 800372c:	46bd      	mov	sp, r7
 800372e:	b006      	add	sp, #24
 8003730:	bd80      	pop	{r7, pc}

08003732 <initA5SPI>:

void initA5SPI() {
 8003732:	b580      	push	{r7, lr}
 8003734:	b086      	sub	sp, #24
 8003736:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003738:	1d3b      	adds	r3, r7, #4
 800373a:	0018      	movs	r0, r3
 800373c:	2314      	movs	r3, #20
 800373e:	001a      	movs	r2, r3
 8003740:	2100      	movs	r1, #0
 8003742:	f002 fb77 	bl	8005e34 <memset>

	GPIO_InitStruct.Pin = GPIO_PIN_5;
 8003746:	1d3b      	adds	r3, r7, #4
 8003748:	2220      	movs	r2, #32
 800374a:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800374c:	1d3b      	adds	r3, r7, #4
 800374e:	2202      	movs	r2, #2
 8003750:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003752:	1d3b      	adds	r3, r7, #4
 8003754:	2200      	movs	r2, #0
 8003756:	609a      	str	r2, [r3, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003758:	1d3b      	adds	r3, r7, #4
 800375a:	2200      	movs	r2, #0
 800375c:	60da      	str	r2, [r3, #12]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800375e:	1d3a      	adds	r2, r7, #4
 8003760:	2390      	movs	r3, #144	; 0x90
 8003762:	05db      	lsls	r3, r3, #23
 8003764:	0011      	movs	r1, r2
 8003766:	0018      	movs	r0, r3
 8003768:	f001 f808 	bl	800477c <HAL_GPIO_Init>
}
 800376c:	46c0      	nop			; (mov r8, r8)
 800376e:	46bd      	mov	sp, r7
 8003770:	b006      	add	sp, #24
 8003772:	bd80      	pop	{r7, pc}

08003774 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003774:	b580      	push	{r7, lr}
 8003776:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003778:	b672      	cpsid	i
}
 800377a:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 800377c:	e7fe      	b.n	800377c <Error_Handler+0x8>
	...

08003780 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003780:	b580      	push	{r7, lr}
 8003782:	b082      	sub	sp, #8
 8003784:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003786:	4b0f      	ldr	r3, [pc, #60]	; (80037c4 <HAL_MspInit+0x44>)
 8003788:	699a      	ldr	r2, [r3, #24]
 800378a:	4b0e      	ldr	r3, [pc, #56]	; (80037c4 <HAL_MspInit+0x44>)
 800378c:	2101      	movs	r1, #1
 800378e:	430a      	orrs	r2, r1
 8003790:	619a      	str	r2, [r3, #24]
 8003792:	4b0c      	ldr	r3, [pc, #48]	; (80037c4 <HAL_MspInit+0x44>)
 8003794:	699b      	ldr	r3, [r3, #24]
 8003796:	2201      	movs	r2, #1
 8003798:	4013      	ands	r3, r2
 800379a:	607b      	str	r3, [r7, #4]
 800379c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800379e:	4b09      	ldr	r3, [pc, #36]	; (80037c4 <HAL_MspInit+0x44>)
 80037a0:	69da      	ldr	r2, [r3, #28]
 80037a2:	4b08      	ldr	r3, [pc, #32]	; (80037c4 <HAL_MspInit+0x44>)
 80037a4:	2180      	movs	r1, #128	; 0x80
 80037a6:	0549      	lsls	r1, r1, #21
 80037a8:	430a      	orrs	r2, r1
 80037aa:	61da      	str	r2, [r3, #28]
 80037ac:	4b05      	ldr	r3, [pc, #20]	; (80037c4 <HAL_MspInit+0x44>)
 80037ae:	69da      	ldr	r2, [r3, #28]
 80037b0:	2380      	movs	r3, #128	; 0x80
 80037b2:	055b      	lsls	r3, r3, #21
 80037b4:	4013      	ands	r3, r2
 80037b6:	603b      	str	r3, [r7, #0]
 80037b8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80037ba:	46c0      	nop			; (mov r8, r8)
 80037bc:	46bd      	mov	sp, r7
 80037be:	b002      	add	sp, #8
 80037c0:	bd80      	pop	{r7, pc}
 80037c2:	46c0      	nop			; (mov r8, r8)
 80037c4:	40021000 	.word	0x40021000

080037c8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80037c8:	b590      	push	{r4, r7, lr}
 80037ca:	b08b      	sub	sp, #44	; 0x2c
 80037cc:	af00      	add	r7, sp, #0
 80037ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80037d0:	2414      	movs	r4, #20
 80037d2:	193b      	adds	r3, r7, r4
 80037d4:	0018      	movs	r0, r3
 80037d6:	2314      	movs	r3, #20
 80037d8:	001a      	movs	r2, r3
 80037da:	2100      	movs	r1, #0
 80037dc:	f002 fb2a 	bl	8005e34 <memset>
  if(hadc->Instance==ADC1)
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	4a28      	ldr	r2, [pc, #160]	; (8003888 <HAL_ADC_MspInit+0xc0>)
 80037e6:	4293      	cmp	r3, r2
 80037e8:	d149      	bne.n	800387e <HAL_ADC_MspInit+0xb6>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80037ea:	4b28      	ldr	r3, [pc, #160]	; (800388c <HAL_ADC_MspInit+0xc4>)
 80037ec:	699a      	ldr	r2, [r3, #24]
 80037ee:	4b27      	ldr	r3, [pc, #156]	; (800388c <HAL_ADC_MspInit+0xc4>)
 80037f0:	2180      	movs	r1, #128	; 0x80
 80037f2:	0089      	lsls	r1, r1, #2
 80037f4:	430a      	orrs	r2, r1
 80037f6:	619a      	str	r2, [r3, #24]
 80037f8:	4b24      	ldr	r3, [pc, #144]	; (800388c <HAL_ADC_MspInit+0xc4>)
 80037fa:	699a      	ldr	r2, [r3, #24]
 80037fc:	2380      	movs	r3, #128	; 0x80
 80037fe:	009b      	lsls	r3, r3, #2
 8003800:	4013      	ands	r3, r2
 8003802:	613b      	str	r3, [r7, #16]
 8003804:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003806:	4b21      	ldr	r3, [pc, #132]	; (800388c <HAL_ADC_MspInit+0xc4>)
 8003808:	695a      	ldr	r2, [r3, #20]
 800380a:	4b20      	ldr	r3, [pc, #128]	; (800388c <HAL_ADC_MspInit+0xc4>)
 800380c:	2180      	movs	r1, #128	; 0x80
 800380e:	0309      	lsls	r1, r1, #12
 8003810:	430a      	orrs	r2, r1
 8003812:	615a      	str	r2, [r3, #20]
 8003814:	4b1d      	ldr	r3, [pc, #116]	; (800388c <HAL_ADC_MspInit+0xc4>)
 8003816:	695a      	ldr	r2, [r3, #20]
 8003818:	2380      	movs	r3, #128	; 0x80
 800381a:	031b      	lsls	r3, r3, #12
 800381c:	4013      	ands	r3, r2
 800381e:	60fb      	str	r3, [r7, #12]
 8003820:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003822:	4b1a      	ldr	r3, [pc, #104]	; (800388c <HAL_ADC_MspInit+0xc4>)
 8003824:	695a      	ldr	r2, [r3, #20]
 8003826:	4b19      	ldr	r3, [pc, #100]	; (800388c <HAL_ADC_MspInit+0xc4>)
 8003828:	2180      	movs	r1, #128	; 0x80
 800382a:	0289      	lsls	r1, r1, #10
 800382c:	430a      	orrs	r2, r1
 800382e:	615a      	str	r2, [r3, #20]
 8003830:	4b16      	ldr	r3, [pc, #88]	; (800388c <HAL_ADC_MspInit+0xc4>)
 8003832:	695a      	ldr	r2, [r3, #20]
 8003834:	2380      	movs	r3, #128	; 0x80
 8003836:	029b      	lsls	r3, r3, #10
 8003838:	4013      	ands	r3, r2
 800383a:	60bb      	str	r3, [r7, #8]
 800383c:	68bb      	ldr	r3, [r7, #8]
    /**ADC GPIO Configuration
    PC3     ------> ADC_IN13
    PA0     ------> ADC_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800383e:	193b      	adds	r3, r7, r4
 8003840:	2208      	movs	r2, #8
 8003842:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003844:	193b      	adds	r3, r7, r4
 8003846:	2203      	movs	r2, #3
 8003848:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800384a:	193b      	adds	r3, r7, r4
 800384c:	2200      	movs	r2, #0
 800384e:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003850:	193b      	adds	r3, r7, r4
 8003852:	4a0f      	ldr	r2, [pc, #60]	; (8003890 <HAL_ADC_MspInit+0xc8>)
 8003854:	0019      	movs	r1, r3
 8003856:	0010      	movs	r0, r2
 8003858:	f000 ff90 	bl	800477c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800385c:	0021      	movs	r1, r4
 800385e:	187b      	adds	r3, r7, r1
 8003860:	2201      	movs	r2, #1
 8003862:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003864:	187b      	adds	r3, r7, r1
 8003866:	2203      	movs	r2, #3
 8003868:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800386a:	187b      	adds	r3, r7, r1
 800386c:	2200      	movs	r2, #0
 800386e:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003870:	187a      	adds	r2, r7, r1
 8003872:	2390      	movs	r3, #144	; 0x90
 8003874:	05db      	lsls	r3, r3, #23
 8003876:	0011      	movs	r1, r2
 8003878:	0018      	movs	r0, r3
 800387a:	f000 ff7f 	bl	800477c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800387e:	46c0      	nop			; (mov r8, r8)
 8003880:	46bd      	mov	sp, r7
 8003882:	b00b      	add	sp, #44	; 0x2c
 8003884:	bd90      	pop	{r4, r7, pc}
 8003886:	46c0      	nop			; (mov r8, r8)
 8003888:	40012400 	.word	0x40012400
 800388c:	40021000 	.word	0x40021000
 8003890:	48000800 	.word	0x48000800

08003894 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003894:	b590      	push	{r4, r7, lr}
 8003896:	b08b      	sub	sp, #44	; 0x2c
 8003898:	af00      	add	r7, sp, #0
 800389a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800389c:	2414      	movs	r4, #20
 800389e:	193b      	adds	r3, r7, r4
 80038a0:	0018      	movs	r0, r3
 80038a2:	2314      	movs	r3, #20
 80038a4:	001a      	movs	r2, r3
 80038a6:	2100      	movs	r1, #0
 80038a8:	f002 fac4 	bl	8005e34 <memset>
  if(hspi->Instance==SPI1)
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	4a1c      	ldr	r2, [pc, #112]	; (8003924 <HAL_SPI_MspInit+0x90>)
 80038b2:	4293      	cmp	r3, r2
 80038b4:	d132      	bne.n	800391c <HAL_SPI_MspInit+0x88>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80038b6:	4b1c      	ldr	r3, [pc, #112]	; (8003928 <HAL_SPI_MspInit+0x94>)
 80038b8:	699a      	ldr	r2, [r3, #24]
 80038ba:	4b1b      	ldr	r3, [pc, #108]	; (8003928 <HAL_SPI_MspInit+0x94>)
 80038bc:	2180      	movs	r1, #128	; 0x80
 80038be:	0149      	lsls	r1, r1, #5
 80038c0:	430a      	orrs	r2, r1
 80038c2:	619a      	str	r2, [r3, #24]
 80038c4:	4b18      	ldr	r3, [pc, #96]	; (8003928 <HAL_SPI_MspInit+0x94>)
 80038c6:	699a      	ldr	r2, [r3, #24]
 80038c8:	2380      	movs	r3, #128	; 0x80
 80038ca:	015b      	lsls	r3, r3, #5
 80038cc:	4013      	ands	r3, r2
 80038ce:	613b      	str	r3, [r7, #16]
 80038d0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80038d2:	4b15      	ldr	r3, [pc, #84]	; (8003928 <HAL_SPI_MspInit+0x94>)
 80038d4:	695a      	ldr	r2, [r3, #20]
 80038d6:	4b14      	ldr	r3, [pc, #80]	; (8003928 <HAL_SPI_MspInit+0x94>)
 80038d8:	2180      	movs	r1, #128	; 0x80
 80038da:	0289      	lsls	r1, r1, #10
 80038dc:	430a      	orrs	r2, r1
 80038de:	615a      	str	r2, [r3, #20]
 80038e0:	4b11      	ldr	r3, [pc, #68]	; (8003928 <HAL_SPI_MspInit+0x94>)
 80038e2:	695a      	ldr	r2, [r3, #20]
 80038e4:	2380      	movs	r3, #128	; 0x80
 80038e6:	029b      	lsls	r3, r3, #10
 80038e8:	4013      	ands	r3, r2
 80038ea:	60fb      	str	r3, [r7, #12]
 80038ec:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 80038ee:	0021      	movs	r1, r4
 80038f0:	187b      	adds	r3, r7, r1
 80038f2:	22a0      	movs	r2, #160	; 0xa0
 80038f4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80038f6:	187b      	adds	r3, r7, r1
 80038f8:	2202      	movs	r2, #2
 80038fa:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038fc:	187b      	adds	r3, r7, r1
 80038fe:	2200      	movs	r2, #0
 8003900:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003902:	187b      	adds	r3, r7, r1
 8003904:	2203      	movs	r2, #3
 8003906:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8003908:	187b      	adds	r3, r7, r1
 800390a:	2200      	movs	r2, #0
 800390c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800390e:	187a      	adds	r2, r7, r1
 8003910:	2390      	movs	r3, #144	; 0x90
 8003912:	05db      	lsls	r3, r3, #23
 8003914:	0011      	movs	r1, r2
 8003916:	0018      	movs	r0, r3
 8003918:	f000 ff30 	bl	800477c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800391c:	46c0      	nop			; (mov r8, r8)
 800391e:	46bd      	mov	sp, r7
 8003920:	b00b      	add	sp, #44	; 0x2c
 8003922:	bd90      	pop	{r4, r7, pc}
 8003924:	40013000 	.word	0x40013000
 8003928:	40021000 	.word	0x40021000

0800392c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800392c:	b580      	push	{r7, lr}
 800392e:	b084      	sub	sp, #16
 8003930:	af00      	add	r7, sp, #0
 8003932:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM16)
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	4a0a      	ldr	r2, [pc, #40]	; (8003964 <HAL_TIM_Base_MspInit+0x38>)
 800393a:	4293      	cmp	r3, r2
 800393c:	d10d      	bne.n	800395a <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM16_MspInit 0 */

  /* USER CODE END TIM16_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM16_CLK_ENABLE();
 800393e:	4b0a      	ldr	r3, [pc, #40]	; (8003968 <HAL_TIM_Base_MspInit+0x3c>)
 8003940:	699a      	ldr	r2, [r3, #24]
 8003942:	4b09      	ldr	r3, [pc, #36]	; (8003968 <HAL_TIM_Base_MspInit+0x3c>)
 8003944:	2180      	movs	r1, #128	; 0x80
 8003946:	0289      	lsls	r1, r1, #10
 8003948:	430a      	orrs	r2, r1
 800394a:	619a      	str	r2, [r3, #24]
 800394c:	4b06      	ldr	r3, [pc, #24]	; (8003968 <HAL_TIM_Base_MspInit+0x3c>)
 800394e:	699a      	ldr	r2, [r3, #24]
 8003950:	2380      	movs	r3, #128	; 0x80
 8003952:	029b      	lsls	r3, r3, #10
 8003954:	4013      	ands	r3, r2
 8003956:	60fb      	str	r3, [r7, #12]
 8003958:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 800395a:	46c0      	nop			; (mov r8, r8)
 800395c:	46bd      	mov	sp, r7
 800395e:	b004      	add	sp, #16
 8003960:	bd80      	pop	{r7, pc}
 8003962:	46c0      	nop			; (mov r8, r8)
 8003964:	40014400 	.word	0x40014400
 8003968:	40021000 	.word	0x40021000

0800396c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800396c:	b580      	push	{r7, lr}
 800396e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003970:	e7fe      	b.n	8003970 <NMI_Handler+0x4>

08003972 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003972:	b580      	push	{r7, lr}
 8003974:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003976:	e7fe      	b.n	8003976 <HardFault_Handler+0x4>

08003978 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003978:	b580      	push	{r7, lr}
 800397a:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 800397c:	46c0      	nop			; (mov r8, r8)
 800397e:	46bd      	mov	sp, r7
 8003980:	bd80      	pop	{r7, pc}

08003982 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003982:	b580      	push	{r7, lr}
 8003984:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003986:	46c0      	nop			; (mov r8, r8)
 8003988:	46bd      	mov	sp, r7
 800398a:	bd80      	pop	{r7, pc}

0800398c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800398c:	b580      	push	{r7, lr}
 800398e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003990:	f000 f938 	bl	8003c04 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003994:	46c0      	nop			; (mov r8, r8)
 8003996:	46bd      	mov	sp, r7
 8003998:	bd80      	pop	{r7, pc}

0800399a <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800399a:	b580      	push	{r7, lr}
 800399c:	af00      	add	r7, sp, #0
	return 1;
 800399e:	2301      	movs	r3, #1
}
 80039a0:	0018      	movs	r0, r3
 80039a2:	46bd      	mov	sp, r7
 80039a4:	bd80      	pop	{r7, pc}

080039a6 <_kill>:

int _kill(int pid, int sig)
{
 80039a6:	b580      	push	{r7, lr}
 80039a8:	b082      	sub	sp, #8
 80039aa:	af00      	add	r7, sp, #0
 80039ac:	6078      	str	r0, [r7, #4]
 80039ae:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80039b0:	f002 fa16 	bl	8005de0 <__errno>
 80039b4:	0003      	movs	r3, r0
 80039b6:	2216      	movs	r2, #22
 80039b8:	601a      	str	r2, [r3, #0]
	return -1;
 80039ba:	2301      	movs	r3, #1
 80039bc:	425b      	negs	r3, r3
}
 80039be:	0018      	movs	r0, r3
 80039c0:	46bd      	mov	sp, r7
 80039c2:	b002      	add	sp, #8
 80039c4:	bd80      	pop	{r7, pc}

080039c6 <_exit>:

void _exit (int status)
{
 80039c6:	b580      	push	{r7, lr}
 80039c8:	b082      	sub	sp, #8
 80039ca:	af00      	add	r7, sp, #0
 80039cc:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80039ce:	2301      	movs	r3, #1
 80039d0:	425a      	negs	r2, r3
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	0011      	movs	r1, r2
 80039d6:	0018      	movs	r0, r3
 80039d8:	f7ff ffe5 	bl	80039a6 <_kill>
	while (1) {}		/* Make sure we hang here */
 80039dc:	e7fe      	b.n	80039dc <_exit+0x16>

080039de <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80039de:	b580      	push	{r7, lr}
 80039e0:	b086      	sub	sp, #24
 80039e2:	af00      	add	r7, sp, #0
 80039e4:	60f8      	str	r0, [r7, #12]
 80039e6:	60b9      	str	r1, [r7, #8]
 80039e8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80039ea:	2300      	movs	r3, #0
 80039ec:	617b      	str	r3, [r7, #20]
 80039ee:	e00a      	b.n	8003a06 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80039f0:	e000      	b.n	80039f4 <_read+0x16>
 80039f2:	bf00      	nop
 80039f4:	0001      	movs	r1, r0
 80039f6:	68bb      	ldr	r3, [r7, #8]
 80039f8:	1c5a      	adds	r2, r3, #1
 80039fa:	60ba      	str	r2, [r7, #8]
 80039fc:	b2ca      	uxtb	r2, r1
 80039fe:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003a00:	697b      	ldr	r3, [r7, #20]
 8003a02:	3301      	adds	r3, #1
 8003a04:	617b      	str	r3, [r7, #20]
 8003a06:	697a      	ldr	r2, [r7, #20]
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	429a      	cmp	r2, r3
 8003a0c:	dbf0      	blt.n	80039f0 <_read+0x12>
	}

return len;
 8003a0e:	687b      	ldr	r3, [r7, #4]
}
 8003a10:	0018      	movs	r0, r3
 8003a12:	46bd      	mov	sp, r7
 8003a14:	b006      	add	sp, #24
 8003a16:	bd80      	pop	{r7, pc}

08003a18 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003a18:	b580      	push	{r7, lr}
 8003a1a:	b086      	sub	sp, #24
 8003a1c:	af00      	add	r7, sp, #0
 8003a1e:	60f8      	str	r0, [r7, #12]
 8003a20:	60b9      	str	r1, [r7, #8]
 8003a22:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003a24:	2300      	movs	r3, #0
 8003a26:	617b      	str	r3, [r7, #20]
 8003a28:	e009      	b.n	8003a3e <_write+0x26>
	{
		__io_putchar(*ptr++);
 8003a2a:	68bb      	ldr	r3, [r7, #8]
 8003a2c:	1c5a      	adds	r2, r3, #1
 8003a2e:	60ba      	str	r2, [r7, #8]
 8003a30:	781b      	ldrb	r3, [r3, #0]
 8003a32:	0018      	movs	r0, r3
 8003a34:	e000      	b.n	8003a38 <_write+0x20>
 8003a36:	bf00      	nop
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003a38:	697b      	ldr	r3, [r7, #20]
 8003a3a:	3301      	adds	r3, #1
 8003a3c:	617b      	str	r3, [r7, #20]
 8003a3e:	697a      	ldr	r2, [r7, #20]
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	429a      	cmp	r2, r3
 8003a44:	dbf1      	blt.n	8003a2a <_write+0x12>
	}
	return len;
 8003a46:	687b      	ldr	r3, [r7, #4]
}
 8003a48:	0018      	movs	r0, r3
 8003a4a:	46bd      	mov	sp, r7
 8003a4c:	b006      	add	sp, #24
 8003a4e:	bd80      	pop	{r7, pc}

08003a50 <_close>:

int _close(int file)
{
 8003a50:	b580      	push	{r7, lr}
 8003a52:	b082      	sub	sp, #8
 8003a54:	af00      	add	r7, sp, #0
 8003a56:	6078      	str	r0, [r7, #4]
	return -1;
 8003a58:	2301      	movs	r3, #1
 8003a5a:	425b      	negs	r3, r3
}
 8003a5c:	0018      	movs	r0, r3
 8003a5e:	46bd      	mov	sp, r7
 8003a60:	b002      	add	sp, #8
 8003a62:	bd80      	pop	{r7, pc}

08003a64 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003a64:	b580      	push	{r7, lr}
 8003a66:	b082      	sub	sp, #8
 8003a68:	af00      	add	r7, sp, #0
 8003a6a:	6078      	str	r0, [r7, #4]
 8003a6c:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8003a6e:	683b      	ldr	r3, [r7, #0]
 8003a70:	2280      	movs	r2, #128	; 0x80
 8003a72:	0192      	lsls	r2, r2, #6
 8003a74:	605a      	str	r2, [r3, #4]
	return 0;
 8003a76:	2300      	movs	r3, #0
}
 8003a78:	0018      	movs	r0, r3
 8003a7a:	46bd      	mov	sp, r7
 8003a7c:	b002      	add	sp, #8
 8003a7e:	bd80      	pop	{r7, pc}

08003a80 <_isatty>:

int _isatty(int file)
{
 8003a80:	b580      	push	{r7, lr}
 8003a82:	b082      	sub	sp, #8
 8003a84:	af00      	add	r7, sp, #0
 8003a86:	6078      	str	r0, [r7, #4]
	return 1;
 8003a88:	2301      	movs	r3, #1
}
 8003a8a:	0018      	movs	r0, r3
 8003a8c:	46bd      	mov	sp, r7
 8003a8e:	b002      	add	sp, #8
 8003a90:	bd80      	pop	{r7, pc}

08003a92 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003a92:	b580      	push	{r7, lr}
 8003a94:	b084      	sub	sp, #16
 8003a96:	af00      	add	r7, sp, #0
 8003a98:	60f8      	str	r0, [r7, #12]
 8003a9a:	60b9      	str	r1, [r7, #8]
 8003a9c:	607a      	str	r2, [r7, #4]
	return 0;
 8003a9e:	2300      	movs	r3, #0
}
 8003aa0:	0018      	movs	r0, r3
 8003aa2:	46bd      	mov	sp, r7
 8003aa4:	b004      	add	sp, #16
 8003aa6:	bd80      	pop	{r7, pc}

08003aa8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003aa8:	b580      	push	{r7, lr}
 8003aaa:	b086      	sub	sp, #24
 8003aac:	af00      	add	r7, sp, #0
 8003aae:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003ab0:	4a14      	ldr	r2, [pc, #80]	; (8003b04 <_sbrk+0x5c>)
 8003ab2:	4b15      	ldr	r3, [pc, #84]	; (8003b08 <_sbrk+0x60>)
 8003ab4:	1ad3      	subs	r3, r2, r3
 8003ab6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003ab8:	697b      	ldr	r3, [r7, #20]
 8003aba:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003abc:	4b13      	ldr	r3, [pc, #76]	; (8003b0c <_sbrk+0x64>)
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d102      	bne.n	8003aca <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003ac4:	4b11      	ldr	r3, [pc, #68]	; (8003b0c <_sbrk+0x64>)
 8003ac6:	4a12      	ldr	r2, [pc, #72]	; (8003b10 <_sbrk+0x68>)
 8003ac8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003aca:	4b10      	ldr	r3, [pc, #64]	; (8003b0c <_sbrk+0x64>)
 8003acc:	681a      	ldr	r2, [r3, #0]
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	18d3      	adds	r3, r2, r3
 8003ad2:	693a      	ldr	r2, [r7, #16]
 8003ad4:	429a      	cmp	r2, r3
 8003ad6:	d207      	bcs.n	8003ae8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003ad8:	f002 f982 	bl	8005de0 <__errno>
 8003adc:	0003      	movs	r3, r0
 8003ade:	220c      	movs	r2, #12
 8003ae0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003ae2:	2301      	movs	r3, #1
 8003ae4:	425b      	negs	r3, r3
 8003ae6:	e009      	b.n	8003afc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003ae8:	4b08      	ldr	r3, [pc, #32]	; (8003b0c <_sbrk+0x64>)
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003aee:	4b07      	ldr	r3, [pc, #28]	; (8003b0c <_sbrk+0x64>)
 8003af0:	681a      	ldr	r2, [r3, #0]
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	18d2      	adds	r2, r2, r3
 8003af6:	4b05      	ldr	r3, [pc, #20]	; (8003b0c <_sbrk+0x64>)
 8003af8:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8003afa:	68fb      	ldr	r3, [r7, #12]
}
 8003afc:	0018      	movs	r0, r3
 8003afe:	46bd      	mov	sp, r7
 8003b00:	b006      	add	sp, #24
 8003b02:	bd80      	pop	{r7, pc}
 8003b04:	20008000 	.word	0x20008000
 8003b08:	00000400 	.word	0x00000400
 8003b0c:	2000230c 	.word	0x2000230c
 8003b10:	20002328 	.word	0x20002328

08003b14 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003b14:	b580      	push	{r7, lr}
 8003b16:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8003b18:	46c0      	nop			; (mov r8, r8)
 8003b1a:	46bd      	mov	sp, r7
 8003b1c:	bd80      	pop	{r7, pc}
	...

08003b20 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8003b20:	480d      	ldr	r0, [pc, #52]	; (8003b58 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8003b22:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003b24:	480d      	ldr	r0, [pc, #52]	; (8003b5c <LoopForever+0x6>)
  ldr r1, =_edata
 8003b26:	490e      	ldr	r1, [pc, #56]	; (8003b60 <LoopForever+0xa>)
  ldr r2, =_sidata
 8003b28:	4a0e      	ldr	r2, [pc, #56]	; (8003b64 <LoopForever+0xe>)
  movs r3, #0
 8003b2a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003b2c:	e002      	b.n	8003b34 <LoopCopyDataInit>

08003b2e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003b2e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003b30:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003b32:	3304      	adds	r3, #4

08003b34 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003b34:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003b36:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003b38:	d3f9      	bcc.n	8003b2e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003b3a:	4a0b      	ldr	r2, [pc, #44]	; (8003b68 <LoopForever+0x12>)
  ldr r4, =_ebss
 8003b3c:	4c0b      	ldr	r4, [pc, #44]	; (8003b6c <LoopForever+0x16>)
  movs r3, #0
 8003b3e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003b40:	e001      	b.n	8003b46 <LoopFillZerobss>

08003b42 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003b42:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003b44:	3204      	adds	r2, #4

08003b46 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003b46:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003b48:	d3fb      	bcc.n	8003b42 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8003b4a:	f7ff ffe3 	bl	8003b14 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8003b4e:	f002 f94d 	bl	8005dec <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8003b52:	f7fe fef5 	bl	8002940 <main>

08003b56 <LoopForever>:

LoopForever:
    b LoopForever
 8003b56:	e7fe      	b.n	8003b56 <LoopForever>
  ldr   r0, =_estack
 8003b58:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8003b5c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003b60:	200021f8 	.word	0x200021f8
  ldr r2, =_sidata
 8003b64:	0800981c 	.word	0x0800981c
  ldr r2, =_sbss
 8003b68:	200021f8 	.word	0x200021f8
  ldr r4, =_ebss
 8003b6c:	20002324 	.word	0x20002324

08003b70 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003b70:	e7fe      	b.n	8003b70 <ADC1_COMP_IRQHandler>
	...

08003b74 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003b74:	b580      	push	{r7, lr}
 8003b76:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003b78:	4b07      	ldr	r3, [pc, #28]	; (8003b98 <HAL_Init+0x24>)
 8003b7a:	681a      	ldr	r2, [r3, #0]
 8003b7c:	4b06      	ldr	r3, [pc, #24]	; (8003b98 <HAL_Init+0x24>)
 8003b7e:	2110      	movs	r1, #16
 8003b80:	430a      	orrs	r2, r1
 8003b82:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8003b84:	2000      	movs	r0, #0
 8003b86:	f000 f809 	bl	8003b9c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003b8a:	f7ff fdf9 	bl	8003780 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003b8e:	2300      	movs	r3, #0
}
 8003b90:	0018      	movs	r0, r3
 8003b92:	46bd      	mov	sp, r7
 8003b94:	bd80      	pop	{r7, pc}
 8003b96:	46c0      	nop			; (mov r8, r8)
 8003b98:	40022000 	.word	0x40022000

08003b9c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003b9c:	b590      	push	{r4, r7, lr}
 8003b9e:	b083      	sub	sp, #12
 8003ba0:	af00      	add	r7, sp, #0
 8003ba2:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003ba4:	4b14      	ldr	r3, [pc, #80]	; (8003bf8 <HAL_InitTick+0x5c>)
 8003ba6:	681c      	ldr	r4, [r3, #0]
 8003ba8:	4b14      	ldr	r3, [pc, #80]	; (8003bfc <HAL_InitTick+0x60>)
 8003baa:	781b      	ldrb	r3, [r3, #0]
 8003bac:	0019      	movs	r1, r3
 8003bae:	23fa      	movs	r3, #250	; 0xfa
 8003bb0:	0098      	lsls	r0, r3, #2
 8003bb2:	f7fc fac3 	bl	800013c <__udivsi3>
 8003bb6:	0003      	movs	r3, r0
 8003bb8:	0019      	movs	r1, r3
 8003bba:	0020      	movs	r0, r4
 8003bbc:	f7fc fabe 	bl	800013c <__udivsi3>
 8003bc0:	0003      	movs	r3, r0
 8003bc2:	0018      	movs	r0, r3
 8003bc4:	f000 fdcd 	bl	8004762 <HAL_SYSTICK_Config>
 8003bc8:	1e03      	subs	r3, r0, #0
 8003bca:	d001      	beq.n	8003bd0 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8003bcc:	2301      	movs	r3, #1
 8003bce:	e00f      	b.n	8003bf0 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	2b03      	cmp	r3, #3
 8003bd4:	d80b      	bhi.n	8003bee <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003bd6:	6879      	ldr	r1, [r7, #4]
 8003bd8:	2301      	movs	r3, #1
 8003bda:	425b      	negs	r3, r3
 8003bdc:	2200      	movs	r2, #0
 8003bde:	0018      	movs	r0, r3
 8003be0:	f000 fdaa 	bl	8004738 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003be4:	4b06      	ldr	r3, [pc, #24]	; (8003c00 <HAL_InitTick+0x64>)
 8003be6:	687a      	ldr	r2, [r7, #4]
 8003be8:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8003bea:	2300      	movs	r3, #0
 8003bec:	e000      	b.n	8003bf0 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8003bee:	2301      	movs	r3, #1
}
 8003bf0:	0018      	movs	r0, r3
 8003bf2:	46bd      	mov	sp, r7
 8003bf4:	b003      	add	sp, #12
 8003bf6:	bd90      	pop	{r4, r7, pc}
 8003bf8:	2000201c 	.word	0x2000201c
 8003bfc:	20002024 	.word	0x20002024
 8003c00:	20002020 	.word	0x20002020

08003c04 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003c04:	b580      	push	{r7, lr}
 8003c06:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003c08:	4b05      	ldr	r3, [pc, #20]	; (8003c20 <HAL_IncTick+0x1c>)
 8003c0a:	781b      	ldrb	r3, [r3, #0]
 8003c0c:	001a      	movs	r2, r3
 8003c0e:	4b05      	ldr	r3, [pc, #20]	; (8003c24 <HAL_IncTick+0x20>)
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	18d2      	adds	r2, r2, r3
 8003c14:	4b03      	ldr	r3, [pc, #12]	; (8003c24 <HAL_IncTick+0x20>)
 8003c16:	601a      	str	r2, [r3, #0]
}
 8003c18:	46c0      	nop			; (mov r8, r8)
 8003c1a:	46bd      	mov	sp, r7
 8003c1c:	bd80      	pop	{r7, pc}
 8003c1e:	46c0      	nop			; (mov r8, r8)
 8003c20:	20002024 	.word	0x20002024
 8003c24:	20002310 	.word	0x20002310

08003c28 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003c28:	b580      	push	{r7, lr}
 8003c2a:	af00      	add	r7, sp, #0
  return uwTick;
 8003c2c:	4b02      	ldr	r3, [pc, #8]	; (8003c38 <HAL_GetTick+0x10>)
 8003c2e:	681b      	ldr	r3, [r3, #0]
}
 8003c30:	0018      	movs	r0, r3
 8003c32:	46bd      	mov	sp, r7
 8003c34:	bd80      	pop	{r7, pc}
 8003c36:	46c0      	nop			; (mov r8, r8)
 8003c38:	20002310 	.word	0x20002310

08003c3c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003c3c:	b580      	push	{r7, lr}
 8003c3e:	b084      	sub	sp, #16
 8003c40:	af00      	add	r7, sp, #0
 8003c42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003c44:	f7ff fff0 	bl	8003c28 <HAL_GetTick>
 8003c48:	0003      	movs	r3, r0
 8003c4a:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	3301      	adds	r3, #1
 8003c54:	d005      	beq.n	8003c62 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003c56:	4b0a      	ldr	r3, [pc, #40]	; (8003c80 <HAL_Delay+0x44>)
 8003c58:	781b      	ldrb	r3, [r3, #0]
 8003c5a:	001a      	movs	r2, r3
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	189b      	adds	r3, r3, r2
 8003c60:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8003c62:	46c0      	nop			; (mov r8, r8)
 8003c64:	f7ff ffe0 	bl	8003c28 <HAL_GetTick>
 8003c68:	0002      	movs	r2, r0
 8003c6a:	68bb      	ldr	r3, [r7, #8]
 8003c6c:	1ad3      	subs	r3, r2, r3
 8003c6e:	68fa      	ldr	r2, [r7, #12]
 8003c70:	429a      	cmp	r2, r3
 8003c72:	d8f7      	bhi.n	8003c64 <HAL_Delay+0x28>
  {
  }
}
 8003c74:	46c0      	nop			; (mov r8, r8)
 8003c76:	46c0      	nop			; (mov r8, r8)
 8003c78:	46bd      	mov	sp, r7
 8003c7a:	b004      	add	sp, #16
 8003c7c:	bd80      	pop	{r7, pc}
 8003c7e:	46c0      	nop			; (mov r8, r8)
 8003c80:	20002024 	.word	0x20002024

08003c84 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003c84:	b580      	push	{r7, lr}
 8003c86:	b084      	sub	sp, #16
 8003c88:	af00      	add	r7, sp, #0
 8003c8a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003c8c:	230f      	movs	r3, #15
 8003c8e:	18fb      	adds	r3, r7, r3
 8003c90:	2200      	movs	r2, #0
 8003c92:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0U;
 8003c94:	2300      	movs	r3, #0
 8003c96:	60bb      	str	r3, [r7, #8]

  /* Check ADC handle */
  if(hadc == NULL)
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d101      	bne.n	8003ca2 <HAL_ADC_Init+0x1e>
  {
    return HAL_ERROR;
 8003c9e:	2301      	movs	r3, #1
 8003ca0:	e125      	b.n	8003eee <HAL_ADC_Init+0x26a>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d10a      	bne.n	8003cc0 <HAL_ADC_Init+0x3c>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	2200      	movs	r2, #0
 8003cae:	63da      	str	r2, [r3, #60]	; 0x3c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	2234      	movs	r2, #52	; 0x34
 8003cb4:	2100      	movs	r1, #0
 8003cb6:	5499      	strb	r1, [r3, r2]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	0018      	movs	r0, r3
 8003cbc:	f7ff fd84 	bl	80037c8 <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */ 
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cc4:	2210      	movs	r2, #16
 8003cc6:	4013      	ands	r3, r2
 8003cc8:	d000      	beq.n	8003ccc <HAL_ADC_Init+0x48>
 8003cca:	e103      	b.n	8003ed4 <HAL_ADC_Init+0x250>
 8003ccc:	230f      	movs	r3, #15
 8003cce:	18fb      	adds	r3, r7, r3
 8003cd0:	781b      	ldrb	r3, [r3, #0]
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d000      	beq.n	8003cd8 <HAL_ADC_Init+0x54>
 8003cd6:	e0fd      	b.n	8003ed4 <HAL_ADC_Init+0x250>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	689b      	ldr	r3, [r3, #8]
 8003cde:	2204      	movs	r2, #4
 8003ce0:	4013      	ands	r3, r2
      (tmp_hal_status == HAL_OK)                                &&
 8003ce2:	d000      	beq.n	8003ce6 <HAL_ADC_Init+0x62>
 8003ce4:	e0f6      	b.n	8003ed4 <HAL_ADC_Init+0x250>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cea:	4a83      	ldr	r2, [pc, #524]	; (8003ef8 <HAL_ADC_Init+0x274>)
 8003cec:	4013      	ands	r3, r2
 8003cee:	2202      	movs	r2, #2
 8003cf0:	431a      	orrs	r2, r3
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	639a      	str	r2, [r3, #56]	; 0x38
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - ADC clock mode                                                      */
    /*  - ADC clock prescaler                                                 */
    /*  - ADC resolution                                                      */
    if (ADC_IS_ENABLE(hadc) == RESET)
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	689b      	ldr	r3, [r3, #8]
 8003cfc:	2203      	movs	r2, #3
 8003cfe:	4013      	ands	r3, r2
 8003d00:	2b01      	cmp	r3, #1
 8003d02:	d112      	bne.n	8003d2a <HAL_ADC_Init+0xa6>
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	2201      	movs	r2, #1
 8003d0c:	4013      	ands	r3, r2
 8003d0e:	2b01      	cmp	r3, #1
 8003d10:	d009      	beq.n	8003d26 <HAL_ADC_Init+0xa2>
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	68da      	ldr	r2, [r3, #12]
 8003d18:	2380      	movs	r3, #128	; 0x80
 8003d1a:	021b      	lsls	r3, r3, #8
 8003d1c:	401a      	ands	r2, r3
 8003d1e:	2380      	movs	r3, #128	; 0x80
 8003d20:	021b      	lsls	r3, r3, #8
 8003d22:	429a      	cmp	r2, r3
 8003d24:	d101      	bne.n	8003d2a <HAL_ADC_Init+0xa6>
 8003d26:	2301      	movs	r3, #1
 8003d28:	e000      	b.n	8003d2c <HAL_ADC_Init+0xa8>
 8003d2a:	2300      	movs	r3, #0
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d116      	bne.n	8003d5e <HAL_ADC_Init+0xda>
      /* parameters):                                                         */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() )                              */
     
      /* Configuration of ADC resolution                                      */
      MODIFY_REG(hadc->Instance->CFGR1,
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	68db      	ldr	r3, [r3, #12]
 8003d36:	2218      	movs	r2, #24
 8003d38:	4393      	bics	r3, r2
 8003d3a:	0019      	movs	r1, r3
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	689a      	ldr	r2, [r3, #8]
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	430a      	orrs	r2, r1
 8003d46:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_RES        ,
                 hadc->Init.Resolution );
      
      /* Configuration of ADC clock mode: clock source AHB or HSI with        */
      /* selectable prescaler                                                 */
      MODIFY_REG(hadc->Instance->CFGR2    ,
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	691b      	ldr	r3, [r3, #16]
 8003d4e:	009b      	lsls	r3, r3, #2
 8003d50:	0899      	lsrs	r1, r3, #2
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	685a      	ldr	r2, [r3, #4]
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	430a      	orrs	r2, r1
 8003d5c:	611a      	str	r2, [r3, #16]
    /*  - external trigger polarity                                           */
    /*  - data alignment                                                      */
    /*  - resolution                                                          */
    /*  - scan direction                                                      */
    /*  - DMA continuous request                                              */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_DISCEN  |
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	68da      	ldr	r2, [r3, #12]
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	4964      	ldr	r1, [pc, #400]	; (8003efc <HAL_ADC_Init+0x278>)
 8003d6a:	400a      	ands	r2, r1
 8003d6c:	60da      	str	r2, [r3, #12]
                                ADC_CFGR1_EXTEN   |
                                ADC_CFGR1_ALIGN   |
                                ADC_CFGR1_SCANDIR |
                                ADC_CFGR1_DMACFG   );

    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	7e1b      	ldrb	r3, [r3, #24]
 8003d72:	039a      	lsls	r2, r3, #14
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	7e5b      	ldrb	r3, [r3, #25]
 8003d78:	03db      	lsls	r3, r3, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8003d7a:	431a      	orrs	r2, r3
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	7e9b      	ldrb	r3, [r3, #26]
 8003d80:	035b      	lsls	r3, r3, #13
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8003d82:	431a      	orrs	r2, r3
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d88:	2b01      	cmp	r3, #1
 8003d8a:	d002      	beq.n	8003d92 <HAL_ADC_Init+0x10e>
 8003d8c:	2380      	movs	r3, #128	; 0x80
 8003d8e:	015b      	lsls	r3, r3, #5
 8003d90:	e000      	b.n	8003d94 <HAL_ADC_Init+0x110>
 8003d92:	2300      	movs	r3, #0
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8003d94:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                             |
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	68db      	ldr	r3, [r3, #12]
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8003d9a:	431a      	orrs	r2, r3
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	691b      	ldr	r3, [r3, #16]
 8003da0:	2b02      	cmp	r3, #2
 8003da2:	d101      	bne.n	8003da8 <HAL_ADC_Init+0x124>
 8003da4:	2304      	movs	r3, #4
 8003da6:	e000      	b.n	8003daa <HAL_ADC_Init+0x126>
 8003da8:	2300      	movs	r3, #0
                 hadc->Init.DataAlign                                             |
 8003daa:	431a      	orrs	r2, r3
                 ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests)  );
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	2124      	movs	r1, #36	; 0x24
 8003db0:	5c5b      	ldrb	r3, [r3, r1]
 8003db2:	005b      	lsls	r3, r3, #1
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8003db4:	4313      	orrs	r3, r2
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8003db6:	68ba      	ldr	r2, [r7, #8]
 8003db8:	4313      	orrs	r3, r2
 8003dba:	60bb      	str	r3, [r7, #8]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	7edb      	ldrb	r3, [r3, #27]
 8003dc0:	2b01      	cmp	r3, #1
 8003dc2:	d115      	bne.n	8003df0 <HAL_ADC_Init+0x16c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	7e9b      	ldrb	r3, [r3, #26]
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d105      	bne.n	8003dd8 <HAL_ADC_Init+0x154>
      {
        /* Enable the selected ADC group regular discontinuous mode */
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8003dcc:	68bb      	ldr	r3, [r7, #8]
 8003dce:	2280      	movs	r2, #128	; 0x80
 8003dd0:	0252      	lsls	r2, r2, #9
 8003dd2:	4313      	orrs	r3, r2
 8003dd4:	60bb      	str	r3, [r7, #8]
 8003dd6:	e00b      	b.n	8003df0 <HAL_ADC_Init+0x16c>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ddc:	2220      	movs	r2, #32
 8003dde:	431a      	orrs	r2, r3
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	639a      	str	r2, [r3, #56]	; 0x38
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003de8:	2201      	movs	r2, #1
 8003dea:	431a      	orrs	r2, r3
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	63da      	str	r2, [r3, #60]	; 0x3c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	69da      	ldr	r2, [r3, #28]
 8003df4:	23c2      	movs	r3, #194	; 0xc2
 8003df6:	33ff      	adds	r3, #255	; 0xff
 8003df8:	429a      	cmp	r2, r3
 8003dfa:	d007      	beq.n	8003e0c <HAL_ADC_Init+0x188>
    {
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	69da      	ldr	r2, [r3, #28]
                    hadc->Init.ExternalTrigConvEdge );
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	6a1b      	ldr	r3, [r3, #32]
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8003e04:	4313      	orrs	r3, r2
 8003e06:	68ba      	ldr	r2, [r7, #8]
 8003e08:	4313      	orrs	r3, r2
 8003e0a:	60bb      	str	r3, [r7, #8]
    }
    
    /* Update ADC configuration register with previous settings */
    hadc->Instance->CFGR1 |= tmpCFGR1;
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	68d9      	ldr	r1, [r3, #12]
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	68ba      	ldr	r2, [r7, #8]
 8003e18:	430a      	orrs	r2, r1
 8003e1a:	60da      	str	r2, [r3, #12]
    /* Management of parameters "SamplingTimeCommon" and "SamplingTime"       */
    /* (obsolete): sampling time set in this function if parameter            */
    /*  "SamplingTimeCommon" has been set to a valid sampling time.           */
    /* Otherwise, sampling time is set into ADC channel initialization        */
    /* structure with parameter "SamplingTime" (obsolete).                    */
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e20:	2380      	movs	r3, #128	; 0x80
 8003e22:	055b      	lsls	r3, r3, #21
 8003e24:	429a      	cmp	r2, r3
 8003e26:	d01b      	beq.n	8003e60 <HAL_ADC_Init+0x1dc>
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e2c:	2b01      	cmp	r3, #1
 8003e2e:	d017      	beq.n	8003e60 <HAL_ADC_Init+0x1dc>
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e34:	2b02      	cmp	r3, #2
 8003e36:	d013      	beq.n	8003e60 <HAL_ADC_Init+0x1dc>
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e3c:	2b03      	cmp	r3, #3
 8003e3e:	d00f      	beq.n	8003e60 <HAL_ADC_Init+0x1dc>
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e44:	2b04      	cmp	r3, #4
 8003e46:	d00b      	beq.n	8003e60 <HAL_ADC_Init+0x1dc>
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e4c:	2b05      	cmp	r3, #5
 8003e4e:	d007      	beq.n	8003e60 <HAL_ADC_Init+0x1dc>
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e54:	2b06      	cmp	r3, #6
 8003e56:	d003      	beq.n	8003e60 <HAL_ADC_Init+0x1dc>
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e5c:	2b07      	cmp	r3, #7
 8003e5e:	d112      	bne.n	8003e86 <HAL_ADC_Init+0x202>
    {
      /* Channel sampling time configuration */
      /* Clear the old sample time */
      hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	695a      	ldr	r2, [r3, #20]
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	2107      	movs	r1, #7
 8003e6c:	438a      	bics	r2, r1
 8003e6e:	615a      	str	r2, [r3, #20]
      
      /* Set the new sample time */
      hadc->Instance->SMPR |= ADC_SMPR_SET(hadc->Init.SamplingTimeCommon);
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	6959      	ldr	r1, [r3, #20]
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e7a:	2207      	movs	r2, #7
 8003e7c:	401a      	ands	r2, r3
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	430a      	orrs	r2, r1
 8003e84:	615a      	str	r2, [r3, #20]
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CFGR1 (excluding analog watchdog configuration: */
    /* set into separate dedicated function, and bits of ADC resolution set   */
    /* out of temporary variable 'tmpCFGR1').                                 */
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	68db      	ldr	r3, [r3, #12]
 8003e8c:	4a1c      	ldr	r2, [pc, #112]	; (8003f00 <HAL_ADC_Init+0x27c>)
 8003e8e:	4013      	ands	r3, r2
 8003e90:	68ba      	ldr	r2, [r7, #8]
 8003e92:	429a      	cmp	r2, r3
 8003e94:	d10b      	bne.n	8003eae <HAL_ADC_Init+0x22a>
         == tmpCFGR1)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	2200      	movs	r2, #0
 8003e9a:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ea0:	2203      	movs	r2, #3
 8003ea2:	4393      	bics	r3, r2
 8003ea4:	2201      	movs	r2, #1
 8003ea6:	431a      	orrs	r2, r3
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	639a      	str	r2, [r3, #56]	; 0x38
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8003eac:	e01c      	b.n	8003ee8 <HAL_ADC_Init+0x264>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003eb2:	2212      	movs	r2, #18
 8003eb4:	4393      	bics	r3, r2
 8003eb6:	2210      	movs	r2, #16
 8003eb8:	431a      	orrs	r2, r3
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	639a      	str	r2, [r3, #56]	; 0x38
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ec2:	2201      	movs	r2, #1
 8003ec4:	431a      	orrs	r2, r3
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	63da      	str	r2, [r3, #60]	; 0x3c
      
      tmp_hal_status = HAL_ERROR;
 8003eca:	230f      	movs	r3, #15
 8003ecc:	18fb      	adds	r3, r7, r3
 8003ece:	2201      	movs	r2, #1
 8003ed0:	701a      	strb	r2, [r3, #0]
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8003ed2:	e009      	b.n	8003ee8 <HAL_ADC_Init+0x264>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ed8:	2210      	movs	r2, #16
 8003eda:	431a      	orrs	r2, r3
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	639a      	str	r2, [r3, #56]	; 0x38
        
    tmp_hal_status = HAL_ERROR;
 8003ee0:	230f      	movs	r3, #15
 8003ee2:	18fb      	adds	r3, r7, r3
 8003ee4:	2201      	movs	r2, #1
 8003ee6:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8003ee8:	230f      	movs	r3, #15
 8003eea:	18fb      	adds	r3, r7, r3
 8003eec:	781b      	ldrb	r3, [r3, #0]
}
 8003eee:	0018      	movs	r0, r3
 8003ef0:	46bd      	mov	sp, r7
 8003ef2:	b004      	add	sp, #16
 8003ef4:	bd80      	pop	{r7, pc}
 8003ef6:	46c0      	nop			; (mov r8, r8)
 8003ef8:	fffffefd 	.word	0xfffffefd
 8003efc:	fffe0219 	.word	0xfffe0219
 8003f00:	833fffe7 	.word	0x833fffe7

08003f04 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8003f04:	b590      	push	{r4, r7, lr}
 8003f06:	b085      	sub	sp, #20
 8003f08:	af00      	add	r7, sp, #0
 8003f0a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003f0c:	230f      	movs	r3, #15
 8003f0e:	18fb      	adds	r3, r7, r3
 8003f10:	2200      	movs	r2, #0
 8003f12:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	689b      	ldr	r3, [r3, #8]
 8003f1a:	2204      	movs	r2, #4
 8003f1c:	4013      	ands	r3, r2
 8003f1e:	d138      	bne.n	8003f92 <HAL_ADC_Start+0x8e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	2234      	movs	r2, #52	; 0x34
 8003f24:	5c9b      	ldrb	r3, [r3, r2]
 8003f26:	2b01      	cmp	r3, #1
 8003f28:	d101      	bne.n	8003f2e <HAL_ADC_Start+0x2a>
 8003f2a:	2302      	movs	r3, #2
 8003f2c:	e038      	b.n	8003fa0 <HAL_ADC_Start+0x9c>
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	2234      	movs	r2, #52	; 0x34
 8003f32:	2101      	movs	r1, #1
 8003f34:	5499      	strb	r1, [r3, r2]
      
    /* Enable the ADC peripheral */
    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware.                                   */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	7e5b      	ldrb	r3, [r3, #25]
 8003f3a:	2b01      	cmp	r3, #1
 8003f3c:	d007      	beq.n	8003f4e <HAL_ADC_Start+0x4a>
    {
      tmp_hal_status = ADC_Enable(hadc);
 8003f3e:	230f      	movs	r3, #15
 8003f40:	18fc      	adds	r4, r7, r3
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	0018      	movs	r0, r3
 8003f46:	f000 fa23 	bl	8004390 <ADC_Enable>
 8003f4a:	0003      	movs	r3, r0
 8003f4c:	7023      	strb	r3, [r4, #0]
    }
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8003f4e:	230f      	movs	r3, #15
 8003f50:	18fb      	adds	r3, r7, r3
 8003f52:	781b      	ldrb	r3, [r3, #0]
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d120      	bne.n	8003f9a <HAL_ADC_Start+0x96>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f5c:	4a12      	ldr	r2, [pc, #72]	; (8003fa8 <HAL_ADC_Start+0xa4>)
 8003f5e:	4013      	ands	r3, r2
 8003f60:	2280      	movs	r2, #128	; 0x80
 8003f62:	0052      	lsls	r2, r2, #1
 8003f64:	431a      	orrs	r2, r3
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	639a      	str	r2, [r3, #56]	; 0x38
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	2200      	movs	r2, #0
 8003f6e:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	2234      	movs	r2, #52	; 0x34
 8003f74:	2100      	movs	r1, #0
 8003f76:	5499      	strb	r1, [r3, r2]
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	221c      	movs	r2, #28
 8003f7e:	601a      	str	r2, [r3, #0]
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      hadc->Instance->CR |= ADC_CR_ADSTART;
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	689a      	ldr	r2, [r3, #8]
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	2104      	movs	r1, #4
 8003f8c:	430a      	orrs	r2, r1
 8003f8e:	609a      	str	r2, [r3, #8]
 8003f90:	e003      	b.n	8003f9a <HAL_ADC_Start+0x96>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8003f92:	230f      	movs	r3, #15
 8003f94:	18fb      	adds	r3, r7, r3
 8003f96:	2202      	movs	r2, #2
 8003f98:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8003f9a:	230f      	movs	r3, #15
 8003f9c:	18fb      	adds	r3, r7, r3
 8003f9e:	781b      	ldrb	r3, [r3, #0]
}
 8003fa0:	0018      	movs	r0, r3
 8003fa2:	46bd      	mov	sp, r7
 8003fa4:	b005      	add	sp, #20
 8003fa6:	bd90      	pop	{r4, r7, pc}
 8003fa8:	fffff0fe 	.word	0xfffff0fe

08003fac <HAL_ADC_Stop>:
  * @brief  Stop ADC conversion of regular group, disable ADC peripheral.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{ 
 8003fac:	b5b0      	push	{r4, r5, r7, lr}
 8003fae:	b084      	sub	sp, #16
 8003fb0:	af00      	add	r7, sp, #0
 8003fb2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003fb4:	230f      	movs	r3, #15
 8003fb6:	18fb      	adds	r3, r7, r3
 8003fb8:	2200      	movs	r2, #0
 8003fba:	701a      	strb	r2, [r3, #0]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	2234      	movs	r2, #52	; 0x34
 8003fc0:	5c9b      	ldrb	r3, [r3, r2]
 8003fc2:	2b01      	cmp	r3, #1
 8003fc4:	d101      	bne.n	8003fca <HAL_ADC_Stop+0x1e>
 8003fc6:	2302      	movs	r3, #2
 8003fc8:	e029      	b.n	800401e <HAL_ADC_Stop+0x72>
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	2234      	movs	r2, #52	; 0x34
 8003fce:	2101      	movs	r1, #1
 8003fd0:	5499      	strb	r1, [r3, r2]
  
  /* 1. Stop potential conversion on going, on regular group */
  tmp_hal_status = ADC_ConversionStop(hadc);
 8003fd2:	250f      	movs	r5, #15
 8003fd4:	197c      	adds	r4, r7, r5
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	0018      	movs	r0, r3
 8003fda:	f000 face 	bl	800457a <ADC_ConversionStop>
 8003fde:	0003      	movs	r3, r0
 8003fe0:	7023      	strb	r3, [r4, #0]
  
  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8003fe2:	197b      	adds	r3, r7, r5
 8003fe4:	781b      	ldrb	r3, [r3, #0]
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d112      	bne.n	8004010 <HAL_ADC_Stop+0x64>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 8003fea:	197c      	adds	r4, r7, r5
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	0018      	movs	r0, r3
 8003ff0:	f000 fa52 	bl	8004498 <ADC_Disable>
 8003ff4:	0003      	movs	r3, r0
 8003ff6:	7023      	strb	r3, [r4, #0]
    
    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8003ff8:	197b      	adds	r3, r7, r5
 8003ffa:	781b      	ldrb	r3, [r3, #0]
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d107      	bne.n	8004010 <HAL_ADC_Stop+0x64>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004004:	4a08      	ldr	r2, [pc, #32]	; (8004028 <HAL_ADC_Stop+0x7c>)
 8004006:	4013      	ands	r3, r2
 8004008:	2201      	movs	r2, #1
 800400a:	431a      	orrs	r2, r3
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	639a      	str	r2, [r3, #56]	; 0x38
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	2234      	movs	r2, #52	; 0x34
 8004014:	2100      	movs	r1, #0
 8004016:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 8004018:	230f      	movs	r3, #15
 800401a:	18fb      	adds	r3, r7, r3
 800401c:	781b      	ldrb	r3, [r3, #0]
}
 800401e:	0018      	movs	r0, r3
 8004020:	46bd      	mov	sp, r7
 8004022:	b004      	add	sp, #16
 8004024:	bdb0      	pop	{r4, r5, r7, pc}
 8004026:	46c0      	nop			; (mov r8, r8)
 8004028:	fffffefe 	.word	0xfffffefe

0800402c <HAL_ADC_PollForConversion>:
  * @param  hadc ADC handle
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 800402c:	b580      	push	{r7, lr}
 800402e:	b084      	sub	sp, #16
 8004030:	af00      	add	r7, sp, #0
 8004032:	6078      	str	r0, [r7, #4]
 8004034:	6039      	str	r1, [r7, #0]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	695b      	ldr	r3, [r3, #20]
 800403a:	2b08      	cmp	r3, #8
 800403c:	d102      	bne.n	8004044 <HAL_ADC_PollForConversion+0x18>
  {
    tmp_Flag_EOC = ADC_FLAG_EOS;
 800403e:	2308      	movs	r3, #8
 8004040:	60fb      	str	r3, [r7, #12]
 8004042:	e014      	b.n	800406e <HAL_ADC_PollForConversion+0x42>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN))
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	68db      	ldr	r3, [r3, #12]
 800404a:	2201      	movs	r2, #1
 800404c:	4013      	ands	r3, r2
 800404e:	2b01      	cmp	r3, #1
 8004050:	d10b      	bne.n	800406a <HAL_ADC_PollForConversion+0x3e>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004056:	2220      	movs	r2, #32
 8004058:	431a      	orrs	r2, r3
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	639a      	str	r2, [r3, #56]	; 0x38
      
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	2234      	movs	r2, #52	; 0x34
 8004062:	2100      	movs	r1, #0
 8004064:	5499      	strb	r1, [r3, r2]
      
      return HAL_ERROR;
 8004066:	2301      	movs	r3, #1
 8004068:	e071      	b.n	800414e <HAL_ADC_PollForConversion+0x122>
    }
    else
    {
      tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 800406a:	230c      	movs	r3, #12
 800406c:	60fb      	str	r3, [r7, #12]
    }
  }
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 800406e:	f7ff fddb 	bl	8003c28 <HAL_GetTick>
 8004072:	0003      	movs	r3, r0
 8004074:	60bb      	str	r3, [r7, #8]
  
  /* Wait until End of Conversion flag is raised */
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8004076:	e01f      	b.n	80040b8 <HAL_ADC_PollForConversion+0x8c>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8004078:	683b      	ldr	r3, [r7, #0]
 800407a:	3301      	adds	r3, #1
 800407c:	d01c      	beq.n	80040b8 <HAL_ADC_PollForConversion+0x8c>
    {
      if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout))
 800407e:	683b      	ldr	r3, [r7, #0]
 8004080:	2b00      	cmp	r3, #0
 8004082:	d007      	beq.n	8004094 <HAL_ADC_PollForConversion+0x68>
 8004084:	f7ff fdd0 	bl	8003c28 <HAL_GetTick>
 8004088:	0002      	movs	r2, r0
 800408a:	68bb      	ldr	r3, [r7, #8]
 800408c:	1ad3      	subs	r3, r2, r3
 800408e:	683a      	ldr	r2, [r7, #0]
 8004090:	429a      	cmp	r2, r3
 8004092:	d211      	bcs.n	80040b8 <HAL_ADC_PollForConversion+0x8c>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	68fa      	ldr	r2, [r7, #12]
 800409c:	4013      	ands	r3, r2
 800409e:	d10b      	bne.n	80040b8 <HAL_ADC_PollForConversion+0x8c>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040a4:	2204      	movs	r2, #4
 80040a6:	431a      	orrs	r2, r3
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	639a      	str	r2, [r3, #56]	; 0x38

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	2234      	movs	r2, #52	; 0x34
 80040b0:	2100      	movs	r1, #0
 80040b2:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 80040b4:	2303      	movs	r3, #3
 80040b6:	e04a      	b.n	800414e <HAL_ADC_PollForConversion+0x122>
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	68fa      	ldr	r2, [r7, #12]
 80040c0:	4013      	ands	r3, r2
 80040c2:	d0d9      	beq.n	8004078 <HAL_ADC_PollForConversion+0x4c>
      }
    }
  }
    
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040c8:	2280      	movs	r2, #128	; 0x80
 80040ca:	0092      	lsls	r2, r2, #2
 80040cc:	431a      	orrs	r2, r3
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	68da      	ldr	r2, [r3, #12]
 80040d8:	23c0      	movs	r3, #192	; 0xc0
 80040da:	011b      	lsls	r3, r3, #4
 80040dc:	4013      	ands	r3, r2
 80040de:	d12d      	bne.n	800413c <HAL_ADC_PollForConversion+0x110>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	7e9b      	ldrb	r3, [r3, #26]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d129      	bne.n	800413c <HAL_ADC_PollForConversion+0x110>
  {
    /* If End of Sequence is reached, disable interrupts */
    if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	2208      	movs	r2, #8
 80040f0:	4013      	ands	r3, r2
 80040f2:	2b08      	cmp	r3, #8
 80040f4:	d122      	bne.n	800413c <HAL_ADC_PollForConversion+0x110>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	689b      	ldr	r3, [r3, #8]
 80040fc:	2204      	movs	r2, #4
 80040fe:	4013      	ands	r3, r2
 8004100:	d110      	bne.n	8004124 <HAL_ADC_PollForConversion+0xf8>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_Start_IT(), but is not disabled here because can be used       */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	685a      	ldr	r2, [r3, #4]
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	210c      	movs	r1, #12
 800410e:	438a      	bics	r2, r1
 8004110:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004116:	4a10      	ldr	r2, [pc, #64]	; (8004158 <HAL_ADC_PollForConversion+0x12c>)
 8004118:	4013      	ands	r3, r2
 800411a:	2201      	movs	r2, #1
 800411c:	431a      	orrs	r2, r3
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	639a      	str	r2, [r3, #56]	; 0x38
 8004122:	e00b      	b.n	800413c <HAL_ADC_PollForConversion+0x110>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004128:	2220      	movs	r2, #32
 800412a:	431a      	orrs	r2, r3
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	639a      	str	r2, [r3, #56]	; 0x38
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004134:	2201      	movs	r2, #1
 8004136:	431a      	orrs	r2, r3
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  
  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	7e1b      	ldrb	r3, [r3, #24]
 8004140:	2b00      	cmp	r3, #0
 8004142:	d103      	bne.n	800414c <HAL_ADC_PollForConversion+0x120>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	220c      	movs	r2, #12
 800414a:	601a      	str	r2, [r3, #0]
  }
  
  /* Return ADC state */
  return HAL_OK;
 800414c:	2300      	movs	r3, #0
}
 800414e:	0018      	movs	r0, r3
 8004150:	46bd      	mov	sp, r7
 8004152:	b004      	add	sp, #16
 8004154:	bd80      	pop	{r7, pc}
 8004156:	46c0      	nop			; (mov r8, r8)
 8004158:	fffffefe 	.word	0xfffffefe

0800415c <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 800415c:	b580      	push	{r7, lr}
 800415e:	b082      	sub	sp, #8
 8004160:	af00      	add	r7, sp, #0
 8004162:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 800416a:	0018      	movs	r0, r3
 800416c:	46bd      	mov	sp, r7
 800416e:	b002      	add	sp, #8
 8004170:	bd80      	pop	{r7, pc}
	...

08004174 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8004174:	b580      	push	{r7, lr}
 8004176:	b084      	sub	sp, #16
 8004178:	af00      	add	r7, sp, #0
 800417a:	6078      	str	r0, [r7, #4]
 800417c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800417e:	230f      	movs	r3, #15
 8004180:	18fb      	adds	r3, r7, r3
 8004182:	2200      	movs	r2, #0
 8004184:	701a      	strb	r2, [r3, #0]
  __IO uint32_t wait_loop_index = 0U;
 8004186:	2300      	movs	r3, #0
 8004188:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));
  
  if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800418e:	2380      	movs	r3, #128	; 0x80
 8004190:	055b      	lsls	r3, r3, #21
 8004192:	429a      	cmp	r2, r3
 8004194:	d011      	beq.n	80041ba <HAL_ADC_ConfigChannel+0x46>
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800419a:	2b01      	cmp	r3, #1
 800419c:	d00d      	beq.n	80041ba <HAL_ADC_ConfigChannel+0x46>
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041a2:	2b02      	cmp	r3, #2
 80041a4:	d009      	beq.n	80041ba <HAL_ADC_ConfigChannel+0x46>
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041aa:	2b03      	cmp	r3, #3
 80041ac:	d005      	beq.n	80041ba <HAL_ADC_ConfigChannel+0x46>
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041b2:	2b04      	cmp	r3, #4
 80041b4:	d001      	beq.n	80041ba <HAL_ADC_ConfigChannel+0x46>
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  {
    assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	2234      	movs	r2, #52	; 0x34
 80041be:	5c9b      	ldrb	r3, [r3, r2]
 80041c0:	2b01      	cmp	r3, #1
 80041c2:	d101      	bne.n	80041c8 <HAL_ADC_ConfigChannel+0x54>
 80041c4:	2302      	movs	r3, #2
 80041c6:	e0d0      	b.n	800436a <HAL_ADC_ConfigChannel+0x1f6>
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	2234      	movs	r2, #52	; 0x34
 80041cc:	2101      	movs	r1, #1
 80041ce:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	689b      	ldr	r3, [r3, #8]
 80041d6:	2204      	movs	r2, #4
 80041d8:	4013      	ands	r3, r2
 80041da:	d000      	beq.n	80041de <HAL_ADC_ConfigChannel+0x6a>
 80041dc:	e0b4      	b.n	8004348 <HAL_ADC_ConfigChannel+0x1d4>
  {
    /* Configure channel: depending on rank setting, add it or remove it from */
    /* ADC conversion sequencer.                                              */
    if (sConfig->Rank != ADC_RANK_NONE)
 80041de:	683b      	ldr	r3, [r7, #0]
 80041e0:	685b      	ldr	r3, [r3, #4]
 80041e2:	4a64      	ldr	r2, [pc, #400]	; (8004374 <HAL_ADC_ConfigChannel+0x200>)
 80041e4:	4293      	cmp	r3, r2
 80041e6:	d100      	bne.n	80041ea <HAL_ADC_ConfigChannel+0x76>
 80041e8:	e082      	b.n	80042f0 <HAL_ADC_ConfigChannel+0x17c>
    {
      /* Regular sequence configuration */
      /* Set the channel selection register from the selected channel */
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	6a99      	ldr	r1, [r3, #40]	; 0x28
 80041f0:	683b      	ldr	r3, [r7, #0]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	2201      	movs	r2, #1
 80041f6:	409a      	lsls	r2, r3
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	430a      	orrs	r2, r1
 80041fe:	629a      	str	r2, [r3, #40]	; 0x28
      /* Channel sampling time configuration */
      /* Management of parameters "SamplingTimeCommon" and "SamplingTime"     */
      /* (obsolete): sampling time set in this function with                  */
      /* parameter "SamplingTime" (obsolete) only if not already set into     */
      /* ADC initialization structure with parameter "SamplingTimeCommon".    */
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004204:	2380      	movs	r3, #128	; 0x80
 8004206:	055b      	lsls	r3, r3, #21
 8004208:	429a      	cmp	r2, r3
 800420a:	d037      	beq.n	800427c <HAL_ADC_ConfigChannel+0x108>
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004210:	2b01      	cmp	r3, #1
 8004212:	d033      	beq.n	800427c <HAL_ADC_ConfigChannel+0x108>
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004218:	2b02      	cmp	r3, #2
 800421a:	d02f      	beq.n	800427c <HAL_ADC_ConfigChannel+0x108>
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004220:	2b03      	cmp	r3, #3
 8004222:	d02b      	beq.n	800427c <HAL_ADC_ConfigChannel+0x108>
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004228:	2b04      	cmp	r3, #4
 800422a:	d027      	beq.n	800427c <HAL_ADC_ConfigChannel+0x108>
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004230:	2b05      	cmp	r3, #5
 8004232:	d023      	beq.n	800427c <HAL_ADC_ConfigChannel+0x108>
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004238:	2b06      	cmp	r3, #6
 800423a:	d01f      	beq.n	800427c <HAL_ADC_ConfigChannel+0x108>
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004240:	2b07      	cmp	r3, #7
 8004242:	d01b      	beq.n	800427c <HAL_ADC_ConfigChannel+0x108>
      {
        /* Modify sampling time if needed (not needed in case of reoccurrence */
        /* for several channels programmed consecutively into the sequencer)  */
        if (sConfig->SamplingTime != ADC_GET_SAMPLINGTIME(hadc))
 8004244:	683b      	ldr	r3, [r7, #0]
 8004246:	689a      	ldr	r2, [r3, #8]
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	695b      	ldr	r3, [r3, #20]
 800424e:	2107      	movs	r1, #7
 8004250:	400b      	ands	r3, r1
 8004252:	429a      	cmp	r2, r3
 8004254:	d012      	beq.n	800427c <HAL_ADC_ConfigChannel+0x108>
        {
          /* Channel sampling time configuration */
          /* Clear the old sample time */
          hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	695a      	ldr	r2, [r3, #20]
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	2107      	movs	r1, #7
 8004262:	438a      	bics	r2, r1
 8004264:	615a      	str	r2, [r3, #20]
          
          /* Set the new sample time */
          hadc->Instance->SMPR |= ADC_SMPR_SET(sConfig->SamplingTime);
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	6959      	ldr	r1, [r3, #20]
 800426c:	683b      	ldr	r3, [r7, #0]
 800426e:	689b      	ldr	r3, [r3, #8]
 8004270:	2207      	movs	r2, #7
 8004272:	401a      	ands	r2, r3
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	430a      	orrs	r2, r1
 800427a:	615a      	str	r2, [r3, #20]
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800427c:	683b      	ldr	r3, [r7, #0]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	2b10      	cmp	r3, #16
 8004282:	d007      	beq.n	8004294 <HAL_ADC_ConfigChannel+0x120>
 8004284:	683b      	ldr	r3, [r7, #0]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	2b11      	cmp	r3, #17
 800428a:	d003      	beq.n	8004294 <HAL_ADC_ConfigChannel+0x120>
 800428c:	683b      	ldr	r3, [r7, #0]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	2b12      	cmp	r3, #18
 8004292:	d163      	bne.n	800435c <HAL_ADC_ConfigChannel+0x1e8>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path. */
        /* If Channel_17 is selected, enable VREFINT measurement path. */
        /* If Channel_18 is selected, enable VBAT measurement path. */
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8004294:	4b38      	ldr	r3, [pc, #224]	; (8004378 <HAL_ADC_ConfigChannel+0x204>)
 8004296:	6819      	ldr	r1, [r3, #0]
 8004298:	683b      	ldr	r3, [r7, #0]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	2b10      	cmp	r3, #16
 800429e:	d009      	beq.n	80042b4 <HAL_ADC_ConfigChannel+0x140>
 80042a0:	683b      	ldr	r3, [r7, #0]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	2b11      	cmp	r3, #17
 80042a6:	d102      	bne.n	80042ae <HAL_ADC_ConfigChannel+0x13a>
 80042a8:	2380      	movs	r3, #128	; 0x80
 80042aa:	03db      	lsls	r3, r3, #15
 80042ac:	e004      	b.n	80042b8 <HAL_ADC_ConfigChannel+0x144>
 80042ae:	2380      	movs	r3, #128	; 0x80
 80042b0:	045b      	lsls	r3, r3, #17
 80042b2:	e001      	b.n	80042b8 <HAL_ADC_ConfigChannel+0x144>
 80042b4:	2380      	movs	r3, #128	; 0x80
 80042b6:	041b      	lsls	r3, r3, #16
 80042b8:	4a2f      	ldr	r2, [pc, #188]	; (8004378 <HAL_ADC_ConfigChannel+0x204>)
 80042ba:	430b      	orrs	r3, r1
 80042bc:	6013      	str	r3, [r2, #0]
        
        /* If Temp. sensor is selected, wait for stabilization delay */
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80042be:	683b      	ldr	r3, [r7, #0]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	2b10      	cmp	r3, #16
 80042c4:	d14a      	bne.n	800435c <HAL_ADC_ConfigChannel+0x1e8>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80042c6:	4b2d      	ldr	r3, [pc, #180]	; (800437c <HAL_ADC_ConfigChannel+0x208>)
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	492d      	ldr	r1, [pc, #180]	; (8004380 <HAL_ADC_ConfigChannel+0x20c>)
 80042cc:	0018      	movs	r0, r3
 80042ce:	f7fb ff35 	bl	800013c <__udivsi3>
 80042d2:	0003      	movs	r3, r0
 80042d4:	001a      	movs	r2, r3
 80042d6:	0013      	movs	r3, r2
 80042d8:	009b      	lsls	r3, r3, #2
 80042da:	189b      	adds	r3, r3, r2
 80042dc:	005b      	lsls	r3, r3, #1
 80042de:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80042e0:	e002      	b.n	80042e8 <HAL_ADC_ConfigChannel+0x174>
          {
            wait_loop_index--;
 80042e2:	68bb      	ldr	r3, [r7, #8]
 80042e4:	3b01      	subs	r3, #1
 80042e6:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80042e8:	68bb      	ldr	r3, [r7, #8]
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d1f9      	bne.n	80042e2 <HAL_ADC_ConfigChannel+0x16e>
 80042ee:	e035      	b.n	800435c <HAL_ADC_ConfigChannel+0x1e8>
    }
    else
    {
      /* Regular sequence configuration */
      /* Reset the channel selection register from the selected channel */
      hadc->Instance->CHSELR &= ~ADC_CHSELR_CHANNEL(sConfig->Channel);
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80042f6:	683b      	ldr	r3, [r7, #0]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	2101      	movs	r1, #1
 80042fc:	4099      	lsls	r1, r3
 80042fe:	000b      	movs	r3, r1
 8004300:	43d9      	mvns	r1, r3
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	400a      	ands	r2, r1
 8004308:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
      /* internal measurement paths disable: If internal channel selected,    */
      /* disable dedicated internal buffers and path.                         */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800430a:	683b      	ldr	r3, [r7, #0]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	2b10      	cmp	r3, #16
 8004310:	d007      	beq.n	8004322 <HAL_ADC_ConfigChannel+0x1ae>
 8004312:	683b      	ldr	r3, [r7, #0]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	2b11      	cmp	r3, #17
 8004318:	d003      	beq.n	8004322 <HAL_ADC_ConfigChannel+0x1ae>
 800431a:	683b      	ldr	r3, [r7, #0]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	2b12      	cmp	r3, #18
 8004320:	d11c      	bne.n	800435c <HAL_ADC_ConfigChannel+0x1e8>
      {
        /* If Channel_16 is selected, disable Temp. sensor measurement path. */
        /* If Channel_17 is selected, disable VREFINT measurement path. */
        /* If Channel_18 is selected, disable VBAT measurement path. */
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8004322:	4b15      	ldr	r3, [pc, #84]	; (8004378 <HAL_ADC_ConfigChannel+0x204>)
 8004324:	6819      	ldr	r1, [r3, #0]
 8004326:	683b      	ldr	r3, [r7, #0]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	2b10      	cmp	r3, #16
 800432c:	d007      	beq.n	800433e <HAL_ADC_ConfigChannel+0x1ca>
 800432e:	683b      	ldr	r3, [r7, #0]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	2b11      	cmp	r3, #17
 8004334:	d101      	bne.n	800433a <HAL_ADC_ConfigChannel+0x1c6>
 8004336:	4b13      	ldr	r3, [pc, #76]	; (8004384 <HAL_ADC_ConfigChannel+0x210>)
 8004338:	e002      	b.n	8004340 <HAL_ADC_ConfigChannel+0x1cc>
 800433a:	4b13      	ldr	r3, [pc, #76]	; (8004388 <HAL_ADC_ConfigChannel+0x214>)
 800433c:	e000      	b.n	8004340 <HAL_ADC_ConfigChannel+0x1cc>
 800433e:	4b13      	ldr	r3, [pc, #76]	; (800438c <HAL_ADC_ConfigChannel+0x218>)
 8004340:	4a0d      	ldr	r2, [pc, #52]	; (8004378 <HAL_ADC_ConfigChannel+0x204>)
 8004342:	400b      	ands	r3, r1
 8004344:	6013      	str	r3, [r2, #0]
 8004346:	e009      	b.n	800435c <HAL_ADC_ConfigChannel+0x1e8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800434c:	2220      	movs	r2, #32
 800434e:	431a      	orrs	r2, r3
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	639a      	str	r2, [r3, #56]	; 0x38
    
    tmp_hal_status = HAL_ERROR;
 8004354:	230f      	movs	r3, #15
 8004356:	18fb      	adds	r3, r7, r3
 8004358:	2201      	movs	r2, #1
 800435a:	701a      	strb	r2, [r3, #0]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	2234      	movs	r2, #52	; 0x34
 8004360:	2100      	movs	r1, #0
 8004362:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 8004364:	230f      	movs	r3, #15
 8004366:	18fb      	adds	r3, r7, r3
 8004368:	781b      	ldrb	r3, [r3, #0]
}
 800436a:	0018      	movs	r0, r3
 800436c:	46bd      	mov	sp, r7
 800436e:	b004      	add	sp, #16
 8004370:	bd80      	pop	{r7, pc}
 8004372:	46c0      	nop			; (mov r8, r8)
 8004374:	00001001 	.word	0x00001001
 8004378:	40012708 	.word	0x40012708
 800437c:	2000201c 	.word	0x2000201c
 8004380:	000f4240 	.word	0x000f4240
 8004384:	ffbfffff 	.word	0xffbfffff
 8004388:	feffffff 	.word	0xfeffffff
 800438c:	ff7fffff 	.word	0xff7fffff

08004390 <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8004390:	b580      	push	{r7, lr}
 8004392:	b084      	sub	sp, #16
 8004394:	af00      	add	r7, sp, #0
 8004396:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004398:	2300      	movs	r3, #0
 800439a:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 800439c:	2300      	movs	r3, #0
 800439e:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	689b      	ldr	r3, [r3, #8]
 80043a6:	2203      	movs	r2, #3
 80043a8:	4013      	ands	r3, r2
 80043aa:	2b01      	cmp	r3, #1
 80043ac:	d112      	bne.n	80043d4 <ADC_Enable+0x44>
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	2201      	movs	r2, #1
 80043b6:	4013      	ands	r3, r2
 80043b8:	2b01      	cmp	r3, #1
 80043ba:	d009      	beq.n	80043d0 <ADC_Enable+0x40>
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	68da      	ldr	r2, [r3, #12]
 80043c2:	2380      	movs	r3, #128	; 0x80
 80043c4:	021b      	lsls	r3, r3, #8
 80043c6:	401a      	ands	r2, r3
 80043c8:	2380      	movs	r3, #128	; 0x80
 80043ca:	021b      	lsls	r3, r3, #8
 80043cc:	429a      	cmp	r2, r3
 80043ce:	d101      	bne.n	80043d4 <ADC_Enable+0x44>
 80043d0:	2301      	movs	r3, #1
 80043d2:	e000      	b.n	80043d6 <ADC_Enable+0x46>
 80043d4:	2300      	movs	r3, #0
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d152      	bne.n	8004480 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	689b      	ldr	r3, [r3, #8]
 80043e0:	4a2a      	ldr	r2, [pc, #168]	; (800448c <ADC_Enable+0xfc>)
 80043e2:	4013      	ands	r3, r2
 80043e4:	d00d      	beq.n	8004402 <ADC_Enable+0x72>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043ea:	2210      	movs	r2, #16
 80043ec:	431a      	orrs	r2, r3
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	639a      	str	r2, [r3, #56]	; 0x38
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80043f6:	2201      	movs	r2, #1
 80043f8:	431a      	orrs	r2, r3
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	63da      	str	r2, [r3, #60]	; 0x3c
      
      return HAL_ERROR;
 80043fe:	2301      	movs	r3, #1
 8004400:	e03f      	b.n	8004482 <ADC_Enable+0xf2>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	689a      	ldr	r2, [r3, #8]
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	2101      	movs	r1, #1
 800440e:	430a      	orrs	r2, r1
 8004410:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8004412:	4b1f      	ldr	r3, [pc, #124]	; (8004490 <ADC_Enable+0x100>)
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	491f      	ldr	r1, [pc, #124]	; (8004494 <ADC_Enable+0x104>)
 8004418:	0018      	movs	r0, r3
 800441a:	f7fb fe8f 	bl	800013c <__udivsi3>
 800441e:	0003      	movs	r3, r0
 8004420:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8004422:	e002      	b.n	800442a <ADC_Enable+0x9a>
    {
      wait_loop_index--;
 8004424:	68bb      	ldr	r3, [r7, #8]
 8004426:	3b01      	subs	r3, #1
 8004428:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 800442a:	68bb      	ldr	r3, [r7, #8]
 800442c:	2b00      	cmp	r3, #0
 800442e:	d1f9      	bne.n	8004424 <ADC_Enable+0x94>
    }

    /* Get tick count */
    tickstart = HAL_GetTick();
 8004430:	f7ff fbfa 	bl	8003c28 <HAL_GetTick>
 8004434:	0003      	movs	r3, r0
 8004436:	60fb      	str	r3, [r7, #12]
    
    /* Wait for ADC effectively enabled */
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8004438:	e01b      	b.n	8004472 <ADC_Enable+0xe2>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800443a:	f7ff fbf5 	bl	8003c28 <HAL_GetTick>
 800443e:	0002      	movs	r2, r0
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	1ad3      	subs	r3, r2, r3
 8004444:	2b02      	cmp	r3, #2
 8004446:	d914      	bls.n	8004472 <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	2201      	movs	r2, #1
 8004450:	4013      	ands	r3, r2
 8004452:	2b01      	cmp	r3, #1
 8004454:	d00d      	beq.n	8004472 <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800445a:	2210      	movs	r2, #16
 800445c:	431a      	orrs	r2, r3
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	639a      	str	r2, [r3, #56]	; 0x38

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004466:	2201      	movs	r2, #1
 8004468:	431a      	orrs	r2, r3
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	63da      	str	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800446e:	2301      	movs	r3, #1
 8004470:	e007      	b.n	8004482 <ADC_Enable+0xf2>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	2201      	movs	r2, #1
 800447a:	4013      	ands	r3, r2
 800447c:	2b01      	cmp	r3, #1
 800447e:	d1dc      	bne.n	800443a <ADC_Enable+0xaa>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8004480:	2300      	movs	r3, #0
}
 8004482:	0018      	movs	r0, r3
 8004484:	46bd      	mov	sp, r7
 8004486:	b004      	add	sp, #16
 8004488:	bd80      	pop	{r7, pc}
 800448a:	46c0      	nop			; (mov r8, r8)
 800448c:	80000017 	.word	0x80000017
 8004490:	2000201c 	.word	0x2000201c
 8004494:	000f4240 	.word	0x000f4240

08004498 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 8004498:	b580      	push	{r7, lr}
 800449a:	b084      	sub	sp, #16
 800449c:	af00      	add	r7, sp, #0
 800449e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80044a0:	2300      	movs	r3, #0
 80044a2:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	689b      	ldr	r3, [r3, #8]
 80044aa:	2203      	movs	r2, #3
 80044ac:	4013      	ands	r3, r2
 80044ae:	2b01      	cmp	r3, #1
 80044b0:	d112      	bne.n	80044d8 <ADC_Disable+0x40>
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	2201      	movs	r2, #1
 80044ba:	4013      	ands	r3, r2
 80044bc:	2b01      	cmp	r3, #1
 80044be:	d009      	beq.n	80044d4 <ADC_Disable+0x3c>
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	68da      	ldr	r2, [r3, #12]
 80044c6:	2380      	movs	r3, #128	; 0x80
 80044c8:	021b      	lsls	r3, r3, #8
 80044ca:	401a      	ands	r2, r3
 80044cc:	2380      	movs	r3, #128	; 0x80
 80044ce:	021b      	lsls	r3, r3, #8
 80044d0:	429a      	cmp	r2, r3
 80044d2:	d101      	bne.n	80044d8 <ADC_Disable+0x40>
 80044d4:	2301      	movs	r3, #1
 80044d6:	e000      	b.n	80044da <ADC_Disable+0x42>
 80044d8:	2300      	movs	r3, #0
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d048      	beq.n	8004570 <ADC_Disable+0xd8>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	689b      	ldr	r3, [r3, #8]
 80044e4:	2205      	movs	r2, #5
 80044e6:	4013      	ands	r3, r2
 80044e8:	2b01      	cmp	r3, #1
 80044ea:	d110      	bne.n	800450e <ADC_Disable+0x76>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	689a      	ldr	r2, [r3, #8]
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	2102      	movs	r1, #2
 80044f8:	430a      	orrs	r2, r1
 80044fa:	609a      	str	r2, [r3, #8]
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	2203      	movs	r2, #3
 8004502:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8004504:	f7ff fb90 	bl	8003c28 <HAL_GetTick>
 8004508:	0003      	movs	r3, r0
 800450a:	60fb      	str	r3, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 800450c:	e029      	b.n	8004562 <ADC_Disable+0xca>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004512:	2210      	movs	r2, #16
 8004514:	431a      	orrs	r2, r3
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	639a      	str	r2, [r3, #56]	; 0x38
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800451e:	2201      	movs	r2, #1
 8004520:	431a      	orrs	r2, r3
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	63da      	str	r2, [r3, #60]	; 0x3c
      return HAL_ERROR;
 8004526:	2301      	movs	r3, #1
 8004528:	e023      	b.n	8004572 <ADC_Disable+0xda>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800452a:	f7ff fb7d 	bl	8003c28 <HAL_GetTick>
 800452e:	0002      	movs	r2, r0
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	1ad3      	subs	r3, r2, r3
 8004534:	2b02      	cmp	r3, #2
 8004536:	d914      	bls.n	8004562 <ADC_Disable+0xca>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	689b      	ldr	r3, [r3, #8]
 800453e:	2201      	movs	r2, #1
 8004540:	4013      	ands	r3, r2
 8004542:	2b01      	cmp	r3, #1
 8004544:	d10d      	bne.n	8004562 <ADC_Disable+0xca>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800454a:	2210      	movs	r2, #16
 800454c:	431a      	orrs	r2, r3
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	639a      	str	r2, [r3, #56]	; 0x38

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004556:	2201      	movs	r2, #1
 8004558:	431a      	orrs	r2, r3
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	63da      	str	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800455e:	2301      	movs	r3, #1
 8004560:	e007      	b.n	8004572 <ADC_Disable+0xda>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	689b      	ldr	r3, [r3, #8]
 8004568:	2201      	movs	r2, #1
 800456a:	4013      	ands	r3, r2
 800456c:	2b01      	cmp	r3, #1
 800456e:	d0dc      	beq.n	800452a <ADC_Disable+0x92>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8004570:	2300      	movs	r3, #0
}
 8004572:	0018      	movs	r0, r3
 8004574:	46bd      	mov	sp, r7
 8004576:	b004      	add	sp, #16
 8004578:	bd80      	pop	{r7, pc}

0800457a <ADC_ConversionStop>:
  *         stopped to disable the ADC.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef* hadc)
{
 800457a:	b580      	push	{r7, lr}
 800457c:	b084      	sub	sp, #16
 800457e:	af00      	add	r7, sp, #0
 8004580:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004582:	2300      	movs	r3, #0
 8004584:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
    
  /* Verification if ADC is not already stopped on regular group to bypass    */
  /* this function if not needed.                                             */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc))
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	689b      	ldr	r3, [r3, #8]
 800458c:	2204      	movs	r2, #4
 800458e:	4013      	ands	r3, r2
 8004590:	d03a      	beq.n	8004608 <ADC_ConversionStop+0x8e>
  {
    
    /* Stop potential conversion on going on regular group */
    /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
    if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	689b      	ldr	r3, [r3, #8]
 8004598:	2204      	movs	r2, #4
 800459a:	4013      	ands	r3, r2
 800459c:	2b04      	cmp	r3, #4
 800459e:	d10d      	bne.n	80045bc <ADC_ConversionStop+0x42>
        HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)                  )
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	689b      	ldr	r3, [r3, #8]
 80045a6:	2202      	movs	r2, #2
 80045a8:	4013      	ands	r3, r2
    if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 80045aa:	d107      	bne.n	80045bc <ADC_ConversionStop+0x42>
    {
      /* Stop conversions on regular group */
      hadc->Instance->CR |= ADC_CR_ADSTP;
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	689a      	ldr	r2, [r3, #8]
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	2110      	movs	r1, #16
 80045b8:	430a      	orrs	r2, r1
 80045ba:	609a      	str	r2, [r3, #8]
    }
    
    /* Wait for conversion effectively stopped */
    /* Get tick count */
    tickstart = HAL_GetTick();
 80045bc:	f7ff fb34 	bl	8003c28 <HAL_GetTick>
 80045c0:	0003      	movs	r3, r0
 80045c2:	60fb      	str	r3, [r7, #12]
      
    while((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 80045c4:	e01a      	b.n	80045fc <ADC_ConversionStop+0x82>
    {
      if((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 80045c6:	f7ff fb2f 	bl	8003c28 <HAL_GetTick>
 80045ca:	0002      	movs	r2, r0
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	1ad3      	subs	r3, r2, r3
 80045d0:	2b02      	cmp	r3, #2
 80045d2:	d913      	bls.n	80045fc <ADC_ConversionStop+0x82>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	689b      	ldr	r3, [r3, #8]
 80045da:	2204      	movs	r2, #4
 80045dc:	4013      	ands	r3, r2
 80045de:	d00d      	beq.n	80045fc <ADC_ConversionStop+0x82>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045e4:	2210      	movs	r2, #16
 80045e6:	431a      	orrs	r2, r3
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	639a      	str	r2, [r3, #56]	; 0x38

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80045f0:	2201      	movs	r2, #1
 80045f2:	431a      	orrs	r2, r3
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	63da      	str	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80045f8:	2301      	movs	r3, #1
 80045fa:	e006      	b.n	800460a <ADC_ConversionStop+0x90>
    while((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	689b      	ldr	r3, [r3, #8]
 8004602:	2204      	movs	r2, #4
 8004604:	4013      	ands	r3, r2
 8004606:	d1de      	bne.n	80045c6 <ADC_ConversionStop+0x4c>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8004608:	2300      	movs	r3, #0
}
 800460a:	0018      	movs	r0, r3
 800460c:	46bd      	mov	sp, r7
 800460e:	b004      	add	sp, #16
 8004610:	bd80      	pop	{r7, pc}
	...

08004614 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004614:	b590      	push	{r4, r7, lr}
 8004616:	b083      	sub	sp, #12
 8004618:	af00      	add	r7, sp, #0
 800461a:	0002      	movs	r2, r0
 800461c:	6039      	str	r1, [r7, #0]
 800461e:	1dfb      	adds	r3, r7, #7
 8004620:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8004622:	1dfb      	adds	r3, r7, #7
 8004624:	781b      	ldrb	r3, [r3, #0]
 8004626:	2b7f      	cmp	r3, #127	; 0x7f
 8004628:	d828      	bhi.n	800467c <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800462a:	4a2f      	ldr	r2, [pc, #188]	; (80046e8 <__NVIC_SetPriority+0xd4>)
 800462c:	1dfb      	adds	r3, r7, #7
 800462e:	781b      	ldrb	r3, [r3, #0]
 8004630:	b25b      	sxtb	r3, r3
 8004632:	089b      	lsrs	r3, r3, #2
 8004634:	33c0      	adds	r3, #192	; 0xc0
 8004636:	009b      	lsls	r3, r3, #2
 8004638:	589b      	ldr	r3, [r3, r2]
 800463a:	1dfa      	adds	r2, r7, #7
 800463c:	7812      	ldrb	r2, [r2, #0]
 800463e:	0011      	movs	r1, r2
 8004640:	2203      	movs	r2, #3
 8004642:	400a      	ands	r2, r1
 8004644:	00d2      	lsls	r2, r2, #3
 8004646:	21ff      	movs	r1, #255	; 0xff
 8004648:	4091      	lsls	r1, r2
 800464a:	000a      	movs	r2, r1
 800464c:	43d2      	mvns	r2, r2
 800464e:	401a      	ands	r2, r3
 8004650:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8004652:	683b      	ldr	r3, [r7, #0]
 8004654:	019b      	lsls	r3, r3, #6
 8004656:	22ff      	movs	r2, #255	; 0xff
 8004658:	401a      	ands	r2, r3
 800465a:	1dfb      	adds	r3, r7, #7
 800465c:	781b      	ldrb	r3, [r3, #0]
 800465e:	0018      	movs	r0, r3
 8004660:	2303      	movs	r3, #3
 8004662:	4003      	ands	r3, r0
 8004664:	00db      	lsls	r3, r3, #3
 8004666:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004668:	481f      	ldr	r0, [pc, #124]	; (80046e8 <__NVIC_SetPriority+0xd4>)
 800466a:	1dfb      	adds	r3, r7, #7
 800466c:	781b      	ldrb	r3, [r3, #0]
 800466e:	b25b      	sxtb	r3, r3
 8004670:	089b      	lsrs	r3, r3, #2
 8004672:	430a      	orrs	r2, r1
 8004674:	33c0      	adds	r3, #192	; 0xc0
 8004676:	009b      	lsls	r3, r3, #2
 8004678:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800467a:	e031      	b.n	80046e0 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800467c:	4a1b      	ldr	r2, [pc, #108]	; (80046ec <__NVIC_SetPriority+0xd8>)
 800467e:	1dfb      	adds	r3, r7, #7
 8004680:	781b      	ldrb	r3, [r3, #0]
 8004682:	0019      	movs	r1, r3
 8004684:	230f      	movs	r3, #15
 8004686:	400b      	ands	r3, r1
 8004688:	3b08      	subs	r3, #8
 800468a:	089b      	lsrs	r3, r3, #2
 800468c:	3306      	adds	r3, #6
 800468e:	009b      	lsls	r3, r3, #2
 8004690:	18d3      	adds	r3, r2, r3
 8004692:	3304      	adds	r3, #4
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	1dfa      	adds	r2, r7, #7
 8004698:	7812      	ldrb	r2, [r2, #0]
 800469a:	0011      	movs	r1, r2
 800469c:	2203      	movs	r2, #3
 800469e:	400a      	ands	r2, r1
 80046a0:	00d2      	lsls	r2, r2, #3
 80046a2:	21ff      	movs	r1, #255	; 0xff
 80046a4:	4091      	lsls	r1, r2
 80046a6:	000a      	movs	r2, r1
 80046a8:	43d2      	mvns	r2, r2
 80046aa:	401a      	ands	r2, r3
 80046ac:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80046ae:	683b      	ldr	r3, [r7, #0]
 80046b0:	019b      	lsls	r3, r3, #6
 80046b2:	22ff      	movs	r2, #255	; 0xff
 80046b4:	401a      	ands	r2, r3
 80046b6:	1dfb      	adds	r3, r7, #7
 80046b8:	781b      	ldrb	r3, [r3, #0]
 80046ba:	0018      	movs	r0, r3
 80046bc:	2303      	movs	r3, #3
 80046be:	4003      	ands	r3, r0
 80046c0:	00db      	lsls	r3, r3, #3
 80046c2:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80046c4:	4809      	ldr	r0, [pc, #36]	; (80046ec <__NVIC_SetPriority+0xd8>)
 80046c6:	1dfb      	adds	r3, r7, #7
 80046c8:	781b      	ldrb	r3, [r3, #0]
 80046ca:	001c      	movs	r4, r3
 80046cc:	230f      	movs	r3, #15
 80046ce:	4023      	ands	r3, r4
 80046d0:	3b08      	subs	r3, #8
 80046d2:	089b      	lsrs	r3, r3, #2
 80046d4:	430a      	orrs	r2, r1
 80046d6:	3306      	adds	r3, #6
 80046d8:	009b      	lsls	r3, r3, #2
 80046da:	18c3      	adds	r3, r0, r3
 80046dc:	3304      	adds	r3, #4
 80046de:	601a      	str	r2, [r3, #0]
}
 80046e0:	46c0      	nop			; (mov r8, r8)
 80046e2:	46bd      	mov	sp, r7
 80046e4:	b003      	add	sp, #12
 80046e6:	bd90      	pop	{r4, r7, pc}
 80046e8:	e000e100 	.word	0xe000e100
 80046ec:	e000ed00 	.word	0xe000ed00

080046f0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80046f0:	b580      	push	{r7, lr}
 80046f2:	b082      	sub	sp, #8
 80046f4:	af00      	add	r7, sp, #0
 80046f6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	1e5a      	subs	r2, r3, #1
 80046fc:	2380      	movs	r3, #128	; 0x80
 80046fe:	045b      	lsls	r3, r3, #17
 8004700:	429a      	cmp	r2, r3
 8004702:	d301      	bcc.n	8004708 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004704:	2301      	movs	r3, #1
 8004706:	e010      	b.n	800472a <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004708:	4b0a      	ldr	r3, [pc, #40]	; (8004734 <SysTick_Config+0x44>)
 800470a:	687a      	ldr	r2, [r7, #4]
 800470c:	3a01      	subs	r2, #1
 800470e:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004710:	2301      	movs	r3, #1
 8004712:	425b      	negs	r3, r3
 8004714:	2103      	movs	r1, #3
 8004716:	0018      	movs	r0, r3
 8004718:	f7ff ff7c 	bl	8004614 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800471c:	4b05      	ldr	r3, [pc, #20]	; (8004734 <SysTick_Config+0x44>)
 800471e:	2200      	movs	r2, #0
 8004720:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004722:	4b04      	ldr	r3, [pc, #16]	; (8004734 <SysTick_Config+0x44>)
 8004724:	2207      	movs	r2, #7
 8004726:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004728:	2300      	movs	r3, #0
}
 800472a:	0018      	movs	r0, r3
 800472c:	46bd      	mov	sp, r7
 800472e:	b002      	add	sp, #8
 8004730:	bd80      	pop	{r7, pc}
 8004732:	46c0      	nop			; (mov r8, r8)
 8004734:	e000e010 	.word	0xe000e010

08004738 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004738:	b580      	push	{r7, lr}
 800473a:	b084      	sub	sp, #16
 800473c:	af00      	add	r7, sp, #0
 800473e:	60b9      	str	r1, [r7, #8]
 8004740:	607a      	str	r2, [r7, #4]
 8004742:	210f      	movs	r1, #15
 8004744:	187b      	adds	r3, r7, r1
 8004746:	1c02      	adds	r2, r0, #0
 8004748:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 800474a:	68ba      	ldr	r2, [r7, #8]
 800474c:	187b      	adds	r3, r7, r1
 800474e:	781b      	ldrb	r3, [r3, #0]
 8004750:	b25b      	sxtb	r3, r3
 8004752:	0011      	movs	r1, r2
 8004754:	0018      	movs	r0, r3
 8004756:	f7ff ff5d 	bl	8004614 <__NVIC_SetPriority>
}
 800475a:	46c0      	nop			; (mov r8, r8)
 800475c:	46bd      	mov	sp, r7
 800475e:	b004      	add	sp, #16
 8004760:	bd80      	pop	{r7, pc}

08004762 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004762:	b580      	push	{r7, lr}
 8004764:	b082      	sub	sp, #8
 8004766:	af00      	add	r7, sp, #0
 8004768:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	0018      	movs	r0, r3
 800476e:	f7ff ffbf 	bl	80046f0 <SysTick_Config>
 8004772:	0003      	movs	r3, r0
}
 8004774:	0018      	movs	r0, r3
 8004776:	46bd      	mov	sp, r7
 8004778:	b002      	add	sp, #8
 800477a:	bd80      	pop	{r7, pc}

0800477c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800477c:	b580      	push	{r7, lr}
 800477e:	b086      	sub	sp, #24
 8004780:	af00      	add	r7, sp, #0
 8004782:	6078      	str	r0, [r7, #4]
 8004784:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004786:	2300      	movs	r3, #0
 8004788:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800478a:	e155      	b.n	8004a38 <HAL_GPIO_Init+0x2bc>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800478c:	683b      	ldr	r3, [r7, #0]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	2101      	movs	r1, #1
 8004792:	697a      	ldr	r2, [r7, #20]
 8004794:	4091      	lsls	r1, r2
 8004796:	000a      	movs	r2, r1
 8004798:	4013      	ands	r3, r2
 800479a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d100      	bne.n	80047a4 <HAL_GPIO_Init+0x28>
 80047a2:	e146      	b.n	8004a32 <HAL_GPIO_Init+0x2b6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80047a4:	683b      	ldr	r3, [r7, #0]
 80047a6:	685b      	ldr	r3, [r3, #4]
 80047a8:	2203      	movs	r2, #3
 80047aa:	4013      	ands	r3, r2
 80047ac:	2b01      	cmp	r3, #1
 80047ae:	d005      	beq.n	80047bc <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80047b0:	683b      	ldr	r3, [r7, #0]
 80047b2:	685b      	ldr	r3, [r3, #4]
 80047b4:	2203      	movs	r2, #3
 80047b6:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80047b8:	2b02      	cmp	r3, #2
 80047ba:	d130      	bne.n	800481e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	689b      	ldr	r3, [r3, #8]
 80047c0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80047c2:	697b      	ldr	r3, [r7, #20]
 80047c4:	005b      	lsls	r3, r3, #1
 80047c6:	2203      	movs	r2, #3
 80047c8:	409a      	lsls	r2, r3
 80047ca:	0013      	movs	r3, r2
 80047cc:	43da      	mvns	r2, r3
 80047ce:	693b      	ldr	r3, [r7, #16]
 80047d0:	4013      	ands	r3, r2
 80047d2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80047d4:	683b      	ldr	r3, [r7, #0]
 80047d6:	68da      	ldr	r2, [r3, #12]
 80047d8:	697b      	ldr	r3, [r7, #20]
 80047da:	005b      	lsls	r3, r3, #1
 80047dc:	409a      	lsls	r2, r3
 80047de:	0013      	movs	r3, r2
 80047e0:	693a      	ldr	r2, [r7, #16]
 80047e2:	4313      	orrs	r3, r2
 80047e4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	693a      	ldr	r2, [r7, #16]
 80047ea:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	685b      	ldr	r3, [r3, #4]
 80047f0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80047f2:	2201      	movs	r2, #1
 80047f4:	697b      	ldr	r3, [r7, #20]
 80047f6:	409a      	lsls	r2, r3
 80047f8:	0013      	movs	r3, r2
 80047fa:	43da      	mvns	r2, r3
 80047fc:	693b      	ldr	r3, [r7, #16]
 80047fe:	4013      	ands	r3, r2
 8004800:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004802:	683b      	ldr	r3, [r7, #0]
 8004804:	685b      	ldr	r3, [r3, #4]
 8004806:	091b      	lsrs	r3, r3, #4
 8004808:	2201      	movs	r2, #1
 800480a:	401a      	ands	r2, r3
 800480c:	697b      	ldr	r3, [r7, #20]
 800480e:	409a      	lsls	r2, r3
 8004810:	0013      	movs	r3, r2
 8004812:	693a      	ldr	r2, [r7, #16]
 8004814:	4313      	orrs	r3, r2
 8004816:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	693a      	ldr	r2, [r7, #16]
 800481c:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800481e:	683b      	ldr	r3, [r7, #0]
 8004820:	685b      	ldr	r3, [r3, #4]
 8004822:	2203      	movs	r2, #3
 8004824:	4013      	ands	r3, r2
 8004826:	2b03      	cmp	r3, #3
 8004828:	d017      	beq.n	800485a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	68db      	ldr	r3, [r3, #12]
 800482e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8004830:	697b      	ldr	r3, [r7, #20]
 8004832:	005b      	lsls	r3, r3, #1
 8004834:	2203      	movs	r2, #3
 8004836:	409a      	lsls	r2, r3
 8004838:	0013      	movs	r3, r2
 800483a:	43da      	mvns	r2, r3
 800483c:	693b      	ldr	r3, [r7, #16]
 800483e:	4013      	ands	r3, r2
 8004840:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8004842:	683b      	ldr	r3, [r7, #0]
 8004844:	689a      	ldr	r2, [r3, #8]
 8004846:	697b      	ldr	r3, [r7, #20]
 8004848:	005b      	lsls	r3, r3, #1
 800484a:	409a      	lsls	r2, r3
 800484c:	0013      	movs	r3, r2
 800484e:	693a      	ldr	r2, [r7, #16]
 8004850:	4313      	orrs	r3, r2
 8004852:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	693a      	ldr	r2, [r7, #16]
 8004858:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800485a:	683b      	ldr	r3, [r7, #0]
 800485c:	685b      	ldr	r3, [r3, #4]
 800485e:	2203      	movs	r2, #3
 8004860:	4013      	ands	r3, r2
 8004862:	2b02      	cmp	r3, #2
 8004864:	d123      	bne.n	80048ae <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8004866:	697b      	ldr	r3, [r7, #20]
 8004868:	08da      	lsrs	r2, r3, #3
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	3208      	adds	r2, #8
 800486e:	0092      	lsls	r2, r2, #2
 8004870:	58d3      	ldr	r3, [r2, r3]
 8004872:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8004874:	697b      	ldr	r3, [r7, #20]
 8004876:	2207      	movs	r2, #7
 8004878:	4013      	ands	r3, r2
 800487a:	009b      	lsls	r3, r3, #2
 800487c:	220f      	movs	r2, #15
 800487e:	409a      	lsls	r2, r3
 8004880:	0013      	movs	r3, r2
 8004882:	43da      	mvns	r2, r3
 8004884:	693b      	ldr	r3, [r7, #16]
 8004886:	4013      	ands	r3, r2
 8004888:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800488a:	683b      	ldr	r3, [r7, #0]
 800488c:	691a      	ldr	r2, [r3, #16]
 800488e:	697b      	ldr	r3, [r7, #20]
 8004890:	2107      	movs	r1, #7
 8004892:	400b      	ands	r3, r1
 8004894:	009b      	lsls	r3, r3, #2
 8004896:	409a      	lsls	r2, r3
 8004898:	0013      	movs	r3, r2
 800489a:	693a      	ldr	r2, [r7, #16]
 800489c:	4313      	orrs	r3, r2
 800489e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80048a0:	697b      	ldr	r3, [r7, #20]
 80048a2:	08da      	lsrs	r2, r3, #3
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	3208      	adds	r2, #8
 80048a8:	0092      	lsls	r2, r2, #2
 80048aa:	6939      	ldr	r1, [r7, #16]
 80048ac:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80048b4:	697b      	ldr	r3, [r7, #20]
 80048b6:	005b      	lsls	r3, r3, #1
 80048b8:	2203      	movs	r2, #3
 80048ba:	409a      	lsls	r2, r3
 80048bc:	0013      	movs	r3, r2
 80048be:	43da      	mvns	r2, r3
 80048c0:	693b      	ldr	r3, [r7, #16]
 80048c2:	4013      	ands	r3, r2
 80048c4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80048c6:	683b      	ldr	r3, [r7, #0]
 80048c8:	685b      	ldr	r3, [r3, #4]
 80048ca:	2203      	movs	r2, #3
 80048cc:	401a      	ands	r2, r3
 80048ce:	697b      	ldr	r3, [r7, #20]
 80048d0:	005b      	lsls	r3, r3, #1
 80048d2:	409a      	lsls	r2, r3
 80048d4:	0013      	movs	r3, r2
 80048d6:	693a      	ldr	r2, [r7, #16]
 80048d8:	4313      	orrs	r3, r2
 80048da:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	693a      	ldr	r2, [r7, #16]
 80048e0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80048e2:	683b      	ldr	r3, [r7, #0]
 80048e4:	685a      	ldr	r2, [r3, #4]
 80048e6:	23c0      	movs	r3, #192	; 0xc0
 80048e8:	029b      	lsls	r3, r3, #10
 80048ea:	4013      	ands	r3, r2
 80048ec:	d100      	bne.n	80048f0 <HAL_GPIO_Init+0x174>
 80048ee:	e0a0      	b.n	8004a32 <HAL_GPIO_Init+0x2b6>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80048f0:	4b57      	ldr	r3, [pc, #348]	; (8004a50 <HAL_GPIO_Init+0x2d4>)
 80048f2:	699a      	ldr	r2, [r3, #24]
 80048f4:	4b56      	ldr	r3, [pc, #344]	; (8004a50 <HAL_GPIO_Init+0x2d4>)
 80048f6:	2101      	movs	r1, #1
 80048f8:	430a      	orrs	r2, r1
 80048fa:	619a      	str	r2, [r3, #24]
 80048fc:	4b54      	ldr	r3, [pc, #336]	; (8004a50 <HAL_GPIO_Init+0x2d4>)
 80048fe:	699b      	ldr	r3, [r3, #24]
 8004900:	2201      	movs	r2, #1
 8004902:	4013      	ands	r3, r2
 8004904:	60bb      	str	r3, [r7, #8]
 8004906:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8004908:	4a52      	ldr	r2, [pc, #328]	; (8004a54 <HAL_GPIO_Init+0x2d8>)
 800490a:	697b      	ldr	r3, [r7, #20]
 800490c:	089b      	lsrs	r3, r3, #2
 800490e:	3302      	adds	r3, #2
 8004910:	009b      	lsls	r3, r3, #2
 8004912:	589b      	ldr	r3, [r3, r2]
 8004914:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8004916:	697b      	ldr	r3, [r7, #20]
 8004918:	2203      	movs	r2, #3
 800491a:	4013      	ands	r3, r2
 800491c:	009b      	lsls	r3, r3, #2
 800491e:	220f      	movs	r2, #15
 8004920:	409a      	lsls	r2, r3
 8004922:	0013      	movs	r3, r2
 8004924:	43da      	mvns	r2, r3
 8004926:	693b      	ldr	r3, [r7, #16]
 8004928:	4013      	ands	r3, r2
 800492a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800492c:	687a      	ldr	r2, [r7, #4]
 800492e:	2390      	movs	r3, #144	; 0x90
 8004930:	05db      	lsls	r3, r3, #23
 8004932:	429a      	cmp	r2, r3
 8004934:	d019      	beq.n	800496a <HAL_GPIO_Init+0x1ee>
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	4a47      	ldr	r2, [pc, #284]	; (8004a58 <HAL_GPIO_Init+0x2dc>)
 800493a:	4293      	cmp	r3, r2
 800493c:	d013      	beq.n	8004966 <HAL_GPIO_Init+0x1ea>
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	4a46      	ldr	r2, [pc, #280]	; (8004a5c <HAL_GPIO_Init+0x2e0>)
 8004942:	4293      	cmp	r3, r2
 8004944:	d00d      	beq.n	8004962 <HAL_GPIO_Init+0x1e6>
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	4a45      	ldr	r2, [pc, #276]	; (8004a60 <HAL_GPIO_Init+0x2e4>)
 800494a:	4293      	cmp	r3, r2
 800494c:	d007      	beq.n	800495e <HAL_GPIO_Init+0x1e2>
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	4a44      	ldr	r2, [pc, #272]	; (8004a64 <HAL_GPIO_Init+0x2e8>)
 8004952:	4293      	cmp	r3, r2
 8004954:	d101      	bne.n	800495a <HAL_GPIO_Init+0x1de>
 8004956:	2304      	movs	r3, #4
 8004958:	e008      	b.n	800496c <HAL_GPIO_Init+0x1f0>
 800495a:	2305      	movs	r3, #5
 800495c:	e006      	b.n	800496c <HAL_GPIO_Init+0x1f0>
 800495e:	2303      	movs	r3, #3
 8004960:	e004      	b.n	800496c <HAL_GPIO_Init+0x1f0>
 8004962:	2302      	movs	r3, #2
 8004964:	e002      	b.n	800496c <HAL_GPIO_Init+0x1f0>
 8004966:	2301      	movs	r3, #1
 8004968:	e000      	b.n	800496c <HAL_GPIO_Init+0x1f0>
 800496a:	2300      	movs	r3, #0
 800496c:	697a      	ldr	r2, [r7, #20]
 800496e:	2103      	movs	r1, #3
 8004970:	400a      	ands	r2, r1
 8004972:	0092      	lsls	r2, r2, #2
 8004974:	4093      	lsls	r3, r2
 8004976:	693a      	ldr	r2, [r7, #16]
 8004978:	4313      	orrs	r3, r2
 800497a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800497c:	4935      	ldr	r1, [pc, #212]	; (8004a54 <HAL_GPIO_Init+0x2d8>)
 800497e:	697b      	ldr	r3, [r7, #20]
 8004980:	089b      	lsrs	r3, r3, #2
 8004982:	3302      	adds	r3, #2
 8004984:	009b      	lsls	r3, r3, #2
 8004986:	693a      	ldr	r2, [r7, #16]
 8004988:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800498a:	4b37      	ldr	r3, [pc, #220]	; (8004a68 <HAL_GPIO_Init+0x2ec>)
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	43da      	mvns	r2, r3
 8004994:	693b      	ldr	r3, [r7, #16]
 8004996:	4013      	ands	r3, r2
 8004998:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800499a:	683b      	ldr	r3, [r7, #0]
 800499c:	685a      	ldr	r2, [r3, #4]
 800499e:	2380      	movs	r3, #128	; 0x80
 80049a0:	025b      	lsls	r3, r3, #9
 80049a2:	4013      	ands	r3, r2
 80049a4:	d003      	beq.n	80049ae <HAL_GPIO_Init+0x232>
        {
          temp |= iocurrent;
 80049a6:	693a      	ldr	r2, [r7, #16]
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	4313      	orrs	r3, r2
 80049ac:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80049ae:	4b2e      	ldr	r3, [pc, #184]	; (8004a68 <HAL_GPIO_Init+0x2ec>)
 80049b0:	693a      	ldr	r2, [r7, #16]
 80049b2:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 80049b4:	4b2c      	ldr	r3, [pc, #176]	; (8004a68 <HAL_GPIO_Init+0x2ec>)
 80049b6:	685b      	ldr	r3, [r3, #4]
 80049b8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	43da      	mvns	r2, r3
 80049be:	693b      	ldr	r3, [r7, #16]
 80049c0:	4013      	ands	r3, r2
 80049c2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80049c4:	683b      	ldr	r3, [r7, #0]
 80049c6:	685a      	ldr	r2, [r3, #4]
 80049c8:	2380      	movs	r3, #128	; 0x80
 80049ca:	029b      	lsls	r3, r3, #10
 80049cc:	4013      	ands	r3, r2
 80049ce:	d003      	beq.n	80049d8 <HAL_GPIO_Init+0x25c>
        {
          temp |= iocurrent;
 80049d0:	693a      	ldr	r2, [r7, #16]
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	4313      	orrs	r3, r2
 80049d6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80049d8:	4b23      	ldr	r3, [pc, #140]	; (8004a68 <HAL_GPIO_Init+0x2ec>)
 80049da:	693a      	ldr	r2, [r7, #16]
 80049dc:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80049de:	4b22      	ldr	r3, [pc, #136]	; (8004a68 <HAL_GPIO_Init+0x2ec>)
 80049e0:	689b      	ldr	r3, [r3, #8]
 80049e2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	43da      	mvns	r2, r3
 80049e8:	693b      	ldr	r3, [r7, #16]
 80049ea:	4013      	ands	r3, r2
 80049ec:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80049ee:	683b      	ldr	r3, [r7, #0]
 80049f0:	685a      	ldr	r2, [r3, #4]
 80049f2:	2380      	movs	r3, #128	; 0x80
 80049f4:	035b      	lsls	r3, r3, #13
 80049f6:	4013      	ands	r3, r2
 80049f8:	d003      	beq.n	8004a02 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80049fa:	693a      	ldr	r2, [r7, #16]
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	4313      	orrs	r3, r2
 8004a00:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8004a02:	4b19      	ldr	r3, [pc, #100]	; (8004a68 <HAL_GPIO_Init+0x2ec>)
 8004a04:	693a      	ldr	r2, [r7, #16]
 8004a06:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8004a08:	4b17      	ldr	r3, [pc, #92]	; (8004a68 <HAL_GPIO_Init+0x2ec>)
 8004a0a:	68db      	ldr	r3, [r3, #12]
 8004a0c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	43da      	mvns	r2, r3
 8004a12:	693b      	ldr	r3, [r7, #16]
 8004a14:	4013      	ands	r3, r2
 8004a16:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8004a18:	683b      	ldr	r3, [r7, #0]
 8004a1a:	685a      	ldr	r2, [r3, #4]
 8004a1c:	2380      	movs	r3, #128	; 0x80
 8004a1e:	039b      	lsls	r3, r3, #14
 8004a20:	4013      	ands	r3, r2
 8004a22:	d003      	beq.n	8004a2c <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8004a24:	693a      	ldr	r2, [r7, #16]
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	4313      	orrs	r3, r2
 8004a2a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8004a2c:	4b0e      	ldr	r3, [pc, #56]	; (8004a68 <HAL_GPIO_Init+0x2ec>)
 8004a2e:	693a      	ldr	r2, [r7, #16]
 8004a30:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 8004a32:	697b      	ldr	r3, [r7, #20]
 8004a34:	3301      	adds	r3, #1
 8004a36:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004a38:	683b      	ldr	r3, [r7, #0]
 8004a3a:	681a      	ldr	r2, [r3, #0]
 8004a3c:	697b      	ldr	r3, [r7, #20]
 8004a3e:	40da      	lsrs	r2, r3
 8004a40:	1e13      	subs	r3, r2, #0
 8004a42:	d000      	beq.n	8004a46 <HAL_GPIO_Init+0x2ca>
 8004a44:	e6a2      	b.n	800478c <HAL_GPIO_Init+0x10>
  } 
}
 8004a46:	46c0      	nop			; (mov r8, r8)
 8004a48:	46c0      	nop			; (mov r8, r8)
 8004a4a:	46bd      	mov	sp, r7
 8004a4c:	b006      	add	sp, #24
 8004a4e:	bd80      	pop	{r7, pc}
 8004a50:	40021000 	.word	0x40021000
 8004a54:	40010000 	.word	0x40010000
 8004a58:	48000400 	.word	0x48000400
 8004a5c:	48000800 	.word	0x48000800
 8004a60:	48000c00 	.word	0x48000c00
 8004a64:	48001000 	.word	0x48001000
 8004a68:	40010400 	.word	0x40010400

08004a6c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004a6c:	b580      	push	{r7, lr}
 8004a6e:	b084      	sub	sp, #16
 8004a70:	af00      	add	r7, sp, #0
 8004a72:	6078      	str	r0, [r7, #4]
 8004a74:	000a      	movs	r2, r1
 8004a76:	1cbb      	adds	r3, r7, #2
 8004a78:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	691b      	ldr	r3, [r3, #16]
 8004a7e:	1cba      	adds	r2, r7, #2
 8004a80:	8812      	ldrh	r2, [r2, #0]
 8004a82:	4013      	ands	r3, r2
 8004a84:	d004      	beq.n	8004a90 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8004a86:	230f      	movs	r3, #15
 8004a88:	18fb      	adds	r3, r7, r3
 8004a8a:	2201      	movs	r2, #1
 8004a8c:	701a      	strb	r2, [r3, #0]
 8004a8e:	e003      	b.n	8004a98 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004a90:	230f      	movs	r3, #15
 8004a92:	18fb      	adds	r3, r7, r3
 8004a94:	2200      	movs	r2, #0
 8004a96:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8004a98:	230f      	movs	r3, #15
 8004a9a:	18fb      	adds	r3, r7, r3
 8004a9c:	781b      	ldrb	r3, [r3, #0]
  }
 8004a9e:	0018      	movs	r0, r3
 8004aa0:	46bd      	mov	sp, r7
 8004aa2:	b004      	add	sp, #16
 8004aa4:	bd80      	pop	{r7, pc}

08004aa6 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004aa6:	b580      	push	{r7, lr}
 8004aa8:	b082      	sub	sp, #8
 8004aaa:	af00      	add	r7, sp, #0
 8004aac:	6078      	str	r0, [r7, #4]
 8004aae:	0008      	movs	r0, r1
 8004ab0:	0011      	movs	r1, r2
 8004ab2:	1cbb      	adds	r3, r7, #2
 8004ab4:	1c02      	adds	r2, r0, #0
 8004ab6:	801a      	strh	r2, [r3, #0]
 8004ab8:	1c7b      	adds	r3, r7, #1
 8004aba:	1c0a      	adds	r2, r1, #0
 8004abc:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004abe:	1c7b      	adds	r3, r7, #1
 8004ac0:	781b      	ldrb	r3, [r3, #0]
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d004      	beq.n	8004ad0 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004ac6:	1cbb      	adds	r3, r7, #2
 8004ac8:	881a      	ldrh	r2, [r3, #0]
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004ace:	e003      	b.n	8004ad8 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004ad0:	1cbb      	adds	r3, r7, #2
 8004ad2:	881a      	ldrh	r2, [r3, #0]
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004ad8:	46c0      	nop			; (mov r8, r8)
 8004ada:	46bd      	mov	sp, r7
 8004adc:	b002      	add	sp, #8
 8004ade:	bd80      	pop	{r7, pc}

08004ae0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004ae0:	b580      	push	{r7, lr}
 8004ae2:	b088      	sub	sp, #32
 8004ae4:	af00      	add	r7, sp, #0
 8004ae6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d102      	bne.n	8004af4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8004aee:	2301      	movs	r3, #1
 8004af0:	f000 fb76 	bl	80051e0 <HAL_RCC_OscConfig+0x700>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	2201      	movs	r2, #1
 8004afa:	4013      	ands	r3, r2
 8004afc:	d100      	bne.n	8004b00 <HAL_RCC_OscConfig+0x20>
 8004afe:	e08e      	b.n	8004c1e <HAL_RCC_OscConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8004b00:	4bc5      	ldr	r3, [pc, #788]	; (8004e18 <HAL_RCC_OscConfig+0x338>)
 8004b02:	685b      	ldr	r3, [r3, #4]
 8004b04:	220c      	movs	r2, #12
 8004b06:	4013      	ands	r3, r2
 8004b08:	2b04      	cmp	r3, #4
 8004b0a:	d00e      	beq.n	8004b2a <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004b0c:	4bc2      	ldr	r3, [pc, #776]	; (8004e18 <HAL_RCC_OscConfig+0x338>)
 8004b0e:	685b      	ldr	r3, [r3, #4]
 8004b10:	220c      	movs	r2, #12
 8004b12:	4013      	ands	r3, r2
 8004b14:	2b08      	cmp	r3, #8
 8004b16:	d117      	bne.n	8004b48 <HAL_RCC_OscConfig+0x68>
 8004b18:	4bbf      	ldr	r3, [pc, #764]	; (8004e18 <HAL_RCC_OscConfig+0x338>)
 8004b1a:	685a      	ldr	r2, [r3, #4]
 8004b1c:	23c0      	movs	r3, #192	; 0xc0
 8004b1e:	025b      	lsls	r3, r3, #9
 8004b20:	401a      	ands	r2, r3
 8004b22:	2380      	movs	r3, #128	; 0x80
 8004b24:	025b      	lsls	r3, r3, #9
 8004b26:	429a      	cmp	r2, r3
 8004b28:	d10e      	bne.n	8004b48 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004b2a:	4bbb      	ldr	r3, [pc, #748]	; (8004e18 <HAL_RCC_OscConfig+0x338>)
 8004b2c:	681a      	ldr	r2, [r3, #0]
 8004b2e:	2380      	movs	r3, #128	; 0x80
 8004b30:	029b      	lsls	r3, r3, #10
 8004b32:	4013      	ands	r3, r2
 8004b34:	d100      	bne.n	8004b38 <HAL_RCC_OscConfig+0x58>
 8004b36:	e071      	b.n	8004c1c <HAL_RCC_OscConfig+0x13c>
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	685b      	ldr	r3, [r3, #4]
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d000      	beq.n	8004b42 <HAL_RCC_OscConfig+0x62>
 8004b40:	e06c      	b.n	8004c1c <HAL_RCC_OscConfig+0x13c>
      {
        return HAL_ERROR;
 8004b42:	2301      	movs	r3, #1
 8004b44:	f000 fb4c 	bl	80051e0 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	685b      	ldr	r3, [r3, #4]
 8004b4c:	2b01      	cmp	r3, #1
 8004b4e:	d107      	bne.n	8004b60 <HAL_RCC_OscConfig+0x80>
 8004b50:	4bb1      	ldr	r3, [pc, #708]	; (8004e18 <HAL_RCC_OscConfig+0x338>)
 8004b52:	681a      	ldr	r2, [r3, #0]
 8004b54:	4bb0      	ldr	r3, [pc, #704]	; (8004e18 <HAL_RCC_OscConfig+0x338>)
 8004b56:	2180      	movs	r1, #128	; 0x80
 8004b58:	0249      	lsls	r1, r1, #9
 8004b5a:	430a      	orrs	r2, r1
 8004b5c:	601a      	str	r2, [r3, #0]
 8004b5e:	e02f      	b.n	8004bc0 <HAL_RCC_OscConfig+0xe0>
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	685b      	ldr	r3, [r3, #4]
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d10c      	bne.n	8004b82 <HAL_RCC_OscConfig+0xa2>
 8004b68:	4bab      	ldr	r3, [pc, #684]	; (8004e18 <HAL_RCC_OscConfig+0x338>)
 8004b6a:	681a      	ldr	r2, [r3, #0]
 8004b6c:	4baa      	ldr	r3, [pc, #680]	; (8004e18 <HAL_RCC_OscConfig+0x338>)
 8004b6e:	49ab      	ldr	r1, [pc, #684]	; (8004e1c <HAL_RCC_OscConfig+0x33c>)
 8004b70:	400a      	ands	r2, r1
 8004b72:	601a      	str	r2, [r3, #0]
 8004b74:	4ba8      	ldr	r3, [pc, #672]	; (8004e18 <HAL_RCC_OscConfig+0x338>)
 8004b76:	681a      	ldr	r2, [r3, #0]
 8004b78:	4ba7      	ldr	r3, [pc, #668]	; (8004e18 <HAL_RCC_OscConfig+0x338>)
 8004b7a:	49a9      	ldr	r1, [pc, #676]	; (8004e20 <HAL_RCC_OscConfig+0x340>)
 8004b7c:	400a      	ands	r2, r1
 8004b7e:	601a      	str	r2, [r3, #0]
 8004b80:	e01e      	b.n	8004bc0 <HAL_RCC_OscConfig+0xe0>
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	685b      	ldr	r3, [r3, #4]
 8004b86:	2b05      	cmp	r3, #5
 8004b88:	d10e      	bne.n	8004ba8 <HAL_RCC_OscConfig+0xc8>
 8004b8a:	4ba3      	ldr	r3, [pc, #652]	; (8004e18 <HAL_RCC_OscConfig+0x338>)
 8004b8c:	681a      	ldr	r2, [r3, #0]
 8004b8e:	4ba2      	ldr	r3, [pc, #648]	; (8004e18 <HAL_RCC_OscConfig+0x338>)
 8004b90:	2180      	movs	r1, #128	; 0x80
 8004b92:	02c9      	lsls	r1, r1, #11
 8004b94:	430a      	orrs	r2, r1
 8004b96:	601a      	str	r2, [r3, #0]
 8004b98:	4b9f      	ldr	r3, [pc, #636]	; (8004e18 <HAL_RCC_OscConfig+0x338>)
 8004b9a:	681a      	ldr	r2, [r3, #0]
 8004b9c:	4b9e      	ldr	r3, [pc, #632]	; (8004e18 <HAL_RCC_OscConfig+0x338>)
 8004b9e:	2180      	movs	r1, #128	; 0x80
 8004ba0:	0249      	lsls	r1, r1, #9
 8004ba2:	430a      	orrs	r2, r1
 8004ba4:	601a      	str	r2, [r3, #0]
 8004ba6:	e00b      	b.n	8004bc0 <HAL_RCC_OscConfig+0xe0>
 8004ba8:	4b9b      	ldr	r3, [pc, #620]	; (8004e18 <HAL_RCC_OscConfig+0x338>)
 8004baa:	681a      	ldr	r2, [r3, #0]
 8004bac:	4b9a      	ldr	r3, [pc, #616]	; (8004e18 <HAL_RCC_OscConfig+0x338>)
 8004bae:	499b      	ldr	r1, [pc, #620]	; (8004e1c <HAL_RCC_OscConfig+0x33c>)
 8004bb0:	400a      	ands	r2, r1
 8004bb2:	601a      	str	r2, [r3, #0]
 8004bb4:	4b98      	ldr	r3, [pc, #608]	; (8004e18 <HAL_RCC_OscConfig+0x338>)
 8004bb6:	681a      	ldr	r2, [r3, #0]
 8004bb8:	4b97      	ldr	r3, [pc, #604]	; (8004e18 <HAL_RCC_OscConfig+0x338>)
 8004bba:	4999      	ldr	r1, [pc, #612]	; (8004e20 <HAL_RCC_OscConfig+0x340>)
 8004bbc:	400a      	ands	r2, r1
 8004bbe:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	685b      	ldr	r3, [r3, #4]
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d014      	beq.n	8004bf2 <HAL_RCC_OscConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004bc8:	f7ff f82e 	bl	8003c28 <HAL_GetTick>
 8004bcc:	0003      	movs	r3, r0
 8004bce:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004bd0:	e008      	b.n	8004be4 <HAL_RCC_OscConfig+0x104>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004bd2:	f7ff f829 	bl	8003c28 <HAL_GetTick>
 8004bd6:	0002      	movs	r2, r0
 8004bd8:	69bb      	ldr	r3, [r7, #24]
 8004bda:	1ad3      	subs	r3, r2, r3
 8004bdc:	2b64      	cmp	r3, #100	; 0x64
 8004bde:	d901      	bls.n	8004be4 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_TIMEOUT;
 8004be0:	2303      	movs	r3, #3
 8004be2:	e2fd      	b.n	80051e0 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004be4:	4b8c      	ldr	r3, [pc, #560]	; (8004e18 <HAL_RCC_OscConfig+0x338>)
 8004be6:	681a      	ldr	r2, [r3, #0]
 8004be8:	2380      	movs	r3, #128	; 0x80
 8004bea:	029b      	lsls	r3, r3, #10
 8004bec:	4013      	ands	r3, r2
 8004bee:	d0f0      	beq.n	8004bd2 <HAL_RCC_OscConfig+0xf2>
 8004bf0:	e015      	b.n	8004c1e <HAL_RCC_OscConfig+0x13e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004bf2:	f7ff f819 	bl	8003c28 <HAL_GetTick>
 8004bf6:	0003      	movs	r3, r0
 8004bf8:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004bfa:	e008      	b.n	8004c0e <HAL_RCC_OscConfig+0x12e>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004bfc:	f7ff f814 	bl	8003c28 <HAL_GetTick>
 8004c00:	0002      	movs	r2, r0
 8004c02:	69bb      	ldr	r3, [r7, #24]
 8004c04:	1ad3      	subs	r3, r2, r3
 8004c06:	2b64      	cmp	r3, #100	; 0x64
 8004c08:	d901      	bls.n	8004c0e <HAL_RCC_OscConfig+0x12e>
          {
            return HAL_TIMEOUT;
 8004c0a:	2303      	movs	r3, #3
 8004c0c:	e2e8      	b.n	80051e0 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004c0e:	4b82      	ldr	r3, [pc, #520]	; (8004e18 <HAL_RCC_OscConfig+0x338>)
 8004c10:	681a      	ldr	r2, [r3, #0]
 8004c12:	2380      	movs	r3, #128	; 0x80
 8004c14:	029b      	lsls	r3, r3, #10
 8004c16:	4013      	ands	r3, r2
 8004c18:	d1f0      	bne.n	8004bfc <HAL_RCC_OscConfig+0x11c>
 8004c1a:	e000      	b.n	8004c1e <HAL_RCC_OscConfig+0x13e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004c1c:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	2202      	movs	r2, #2
 8004c24:	4013      	ands	r3, r2
 8004c26:	d100      	bne.n	8004c2a <HAL_RCC_OscConfig+0x14a>
 8004c28:	e06c      	b.n	8004d04 <HAL_RCC_OscConfig+0x224>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8004c2a:	4b7b      	ldr	r3, [pc, #492]	; (8004e18 <HAL_RCC_OscConfig+0x338>)
 8004c2c:	685b      	ldr	r3, [r3, #4]
 8004c2e:	220c      	movs	r2, #12
 8004c30:	4013      	ands	r3, r2
 8004c32:	d00e      	beq.n	8004c52 <HAL_RCC_OscConfig+0x172>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8004c34:	4b78      	ldr	r3, [pc, #480]	; (8004e18 <HAL_RCC_OscConfig+0x338>)
 8004c36:	685b      	ldr	r3, [r3, #4]
 8004c38:	220c      	movs	r2, #12
 8004c3a:	4013      	ands	r3, r2
 8004c3c:	2b08      	cmp	r3, #8
 8004c3e:	d11f      	bne.n	8004c80 <HAL_RCC_OscConfig+0x1a0>
 8004c40:	4b75      	ldr	r3, [pc, #468]	; (8004e18 <HAL_RCC_OscConfig+0x338>)
 8004c42:	685a      	ldr	r2, [r3, #4]
 8004c44:	23c0      	movs	r3, #192	; 0xc0
 8004c46:	025b      	lsls	r3, r3, #9
 8004c48:	401a      	ands	r2, r3
 8004c4a:	2380      	movs	r3, #128	; 0x80
 8004c4c:	021b      	lsls	r3, r3, #8
 8004c4e:	429a      	cmp	r2, r3
 8004c50:	d116      	bne.n	8004c80 <HAL_RCC_OscConfig+0x1a0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004c52:	4b71      	ldr	r3, [pc, #452]	; (8004e18 <HAL_RCC_OscConfig+0x338>)
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	2202      	movs	r2, #2
 8004c58:	4013      	ands	r3, r2
 8004c5a:	d005      	beq.n	8004c68 <HAL_RCC_OscConfig+0x188>
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	68db      	ldr	r3, [r3, #12]
 8004c60:	2b01      	cmp	r3, #1
 8004c62:	d001      	beq.n	8004c68 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8004c64:	2301      	movs	r3, #1
 8004c66:	e2bb      	b.n	80051e0 <HAL_RCC_OscConfig+0x700>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004c68:	4b6b      	ldr	r3, [pc, #428]	; (8004e18 <HAL_RCC_OscConfig+0x338>)
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	22f8      	movs	r2, #248	; 0xf8
 8004c6e:	4393      	bics	r3, r2
 8004c70:	0019      	movs	r1, r3
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	691b      	ldr	r3, [r3, #16]
 8004c76:	00da      	lsls	r2, r3, #3
 8004c78:	4b67      	ldr	r3, [pc, #412]	; (8004e18 <HAL_RCC_OscConfig+0x338>)
 8004c7a:	430a      	orrs	r2, r1
 8004c7c:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004c7e:	e041      	b.n	8004d04 <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	68db      	ldr	r3, [r3, #12]
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d024      	beq.n	8004cd2 <HAL_RCC_OscConfig+0x1f2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004c88:	4b63      	ldr	r3, [pc, #396]	; (8004e18 <HAL_RCC_OscConfig+0x338>)
 8004c8a:	681a      	ldr	r2, [r3, #0]
 8004c8c:	4b62      	ldr	r3, [pc, #392]	; (8004e18 <HAL_RCC_OscConfig+0x338>)
 8004c8e:	2101      	movs	r1, #1
 8004c90:	430a      	orrs	r2, r1
 8004c92:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c94:	f7fe ffc8 	bl	8003c28 <HAL_GetTick>
 8004c98:	0003      	movs	r3, r0
 8004c9a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004c9c:	e008      	b.n	8004cb0 <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004c9e:	f7fe ffc3 	bl	8003c28 <HAL_GetTick>
 8004ca2:	0002      	movs	r2, r0
 8004ca4:	69bb      	ldr	r3, [r7, #24]
 8004ca6:	1ad3      	subs	r3, r2, r3
 8004ca8:	2b02      	cmp	r3, #2
 8004caa:	d901      	bls.n	8004cb0 <HAL_RCC_OscConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8004cac:	2303      	movs	r3, #3
 8004cae:	e297      	b.n	80051e0 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004cb0:	4b59      	ldr	r3, [pc, #356]	; (8004e18 <HAL_RCC_OscConfig+0x338>)
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	2202      	movs	r2, #2
 8004cb6:	4013      	ands	r3, r2
 8004cb8:	d0f1      	beq.n	8004c9e <HAL_RCC_OscConfig+0x1be>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004cba:	4b57      	ldr	r3, [pc, #348]	; (8004e18 <HAL_RCC_OscConfig+0x338>)
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	22f8      	movs	r2, #248	; 0xf8
 8004cc0:	4393      	bics	r3, r2
 8004cc2:	0019      	movs	r1, r3
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	691b      	ldr	r3, [r3, #16]
 8004cc8:	00da      	lsls	r2, r3, #3
 8004cca:	4b53      	ldr	r3, [pc, #332]	; (8004e18 <HAL_RCC_OscConfig+0x338>)
 8004ccc:	430a      	orrs	r2, r1
 8004cce:	601a      	str	r2, [r3, #0]
 8004cd0:	e018      	b.n	8004d04 <HAL_RCC_OscConfig+0x224>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004cd2:	4b51      	ldr	r3, [pc, #324]	; (8004e18 <HAL_RCC_OscConfig+0x338>)
 8004cd4:	681a      	ldr	r2, [r3, #0]
 8004cd6:	4b50      	ldr	r3, [pc, #320]	; (8004e18 <HAL_RCC_OscConfig+0x338>)
 8004cd8:	2101      	movs	r1, #1
 8004cda:	438a      	bics	r2, r1
 8004cdc:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004cde:	f7fe ffa3 	bl	8003c28 <HAL_GetTick>
 8004ce2:	0003      	movs	r3, r0
 8004ce4:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004ce6:	e008      	b.n	8004cfa <HAL_RCC_OscConfig+0x21a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004ce8:	f7fe ff9e 	bl	8003c28 <HAL_GetTick>
 8004cec:	0002      	movs	r2, r0
 8004cee:	69bb      	ldr	r3, [r7, #24]
 8004cf0:	1ad3      	subs	r3, r2, r3
 8004cf2:	2b02      	cmp	r3, #2
 8004cf4:	d901      	bls.n	8004cfa <HAL_RCC_OscConfig+0x21a>
          {
            return HAL_TIMEOUT;
 8004cf6:	2303      	movs	r3, #3
 8004cf8:	e272      	b.n	80051e0 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004cfa:	4b47      	ldr	r3, [pc, #284]	; (8004e18 <HAL_RCC_OscConfig+0x338>)
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	2202      	movs	r2, #2
 8004d00:	4013      	ands	r3, r2
 8004d02:	d1f1      	bne.n	8004ce8 <HAL_RCC_OscConfig+0x208>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	2208      	movs	r2, #8
 8004d0a:	4013      	ands	r3, r2
 8004d0c:	d036      	beq.n	8004d7c <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	69db      	ldr	r3, [r3, #28]
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d019      	beq.n	8004d4a <HAL_RCC_OscConfig+0x26a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004d16:	4b40      	ldr	r3, [pc, #256]	; (8004e18 <HAL_RCC_OscConfig+0x338>)
 8004d18:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004d1a:	4b3f      	ldr	r3, [pc, #252]	; (8004e18 <HAL_RCC_OscConfig+0x338>)
 8004d1c:	2101      	movs	r1, #1
 8004d1e:	430a      	orrs	r2, r1
 8004d20:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004d22:	f7fe ff81 	bl	8003c28 <HAL_GetTick>
 8004d26:	0003      	movs	r3, r0
 8004d28:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004d2a:	e008      	b.n	8004d3e <HAL_RCC_OscConfig+0x25e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004d2c:	f7fe ff7c 	bl	8003c28 <HAL_GetTick>
 8004d30:	0002      	movs	r2, r0
 8004d32:	69bb      	ldr	r3, [r7, #24]
 8004d34:	1ad3      	subs	r3, r2, r3
 8004d36:	2b02      	cmp	r3, #2
 8004d38:	d901      	bls.n	8004d3e <HAL_RCC_OscConfig+0x25e>
        {
          return HAL_TIMEOUT;
 8004d3a:	2303      	movs	r3, #3
 8004d3c:	e250      	b.n	80051e0 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004d3e:	4b36      	ldr	r3, [pc, #216]	; (8004e18 <HAL_RCC_OscConfig+0x338>)
 8004d40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d42:	2202      	movs	r2, #2
 8004d44:	4013      	ands	r3, r2
 8004d46:	d0f1      	beq.n	8004d2c <HAL_RCC_OscConfig+0x24c>
 8004d48:	e018      	b.n	8004d7c <HAL_RCC_OscConfig+0x29c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004d4a:	4b33      	ldr	r3, [pc, #204]	; (8004e18 <HAL_RCC_OscConfig+0x338>)
 8004d4c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004d4e:	4b32      	ldr	r3, [pc, #200]	; (8004e18 <HAL_RCC_OscConfig+0x338>)
 8004d50:	2101      	movs	r1, #1
 8004d52:	438a      	bics	r2, r1
 8004d54:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004d56:	f7fe ff67 	bl	8003c28 <HAL_GetTick>
 8004d5a:	0003      	movs	r3, r0
 8004d5c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004d5e:	e008      	b.n	8004d72 <HAL_RCC_OscConfig+0x292>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004d60:	f7fe ff62 	bl	8003c28 <HAL_GetTick>
 8004d64:	0002      	movs	r2, r0
 8004d66:	69bb      	ldr	r3, [r7, #24]
 8004d68:	1ad3      	subs	r3, r2, r3
 8004d6a:	2b02      	cmp	r3, #2
 8004d6c:	d901      	bls.n	8004d72 <HAL_RCC_OscConfig+0x292>
        {
          return HAL_TIMEOUT;
 8004d6e:	2303      	movs	r3, #3
 8004d70:	e236      	b.n	80051e0 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004d72:	4b29      	ldr	r3, [pc, #164]	; (8004e18 <HAL_RCC_OscConfig+0x338>)
 8004d74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d76:	2202      	movs	r2, #2
 8004d78:	4013      	ands	r3, r2
 8004d7a:	d1f1      	bne.n	8004d60 <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	2204      	movs	r2, #4
 8004d82:	4013      	ands	r3, r2
 8004d84:	d100      	bne.n	8004d88 <HAL_RCC_OscConfig+0x2a8>
 8004d86:	e0b5      	b.n	8004ef4 <HAL_RCC_OscConfig+0x414>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004d88:	201f      	movs	r0, #31
 8004d8a:	183b      	adds	r3, r7, r0
 8004d8c:	2200      	movs	r2, #0
 8004d8e:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004d90:	4b21      	ldr	r3, [pc, #132]	; (8004e18 <HAL_RCC_OscConfig+0x338>)
 8004d92:	69da      	ldr	r2, [r3, #28]
 8004d94:	2380      	movs	r3, #128	; 0x80
 8004d96:	055b      	lsls	r3, r3, #21
 8004d98:	4013      	ands	r3, r2
 8004d9a:	d110      	bne.n	8004dbe <HAL_RCC_OscConfig+0x2de>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004d9c:	4b1e      	ldr	r3, [pc, #120]	; (8004e18 <HAL_RCC_OscConfig+0x338>)
 8004d9e:	69da      	ldr	r2, [r3, #28]
 8004da0:	4b1d      	ldr	r3, [pc, #116]	; (8004e18 <HAL_RCC_OscConfig+0x338>)
 8004da2:	2180      	movs	r1, #128	; 0x80
 8004da4:	0549      	lsls	r1, r1, #21
 8004da6:	430a      	orrs	r2, r1
 8004da8:	61da      	str	r2, [r3, #28]
 8004daa:	4b1b      	ldr	r3, [pc, #108]	; (8004e18 <HAL_RCC_OscConfig+0x338>)
 8004dac:	69da      	ldr	r2, [r3, #28]
 8004dae:	2380      	movs	r3, #128	; 0x80
 8004db0:	055b      	lsls	r3, r3, #21
 8004db2:	4013      	ands	r3, r2
 8004db4:	60fb      	str	r3, [r7, #12]
 8004db6:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8004db8:	183b      	adds	r3, r7, r0
 8004dba:	2201      	movs	r2, #1
 8004dbc:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004dbe:	4b19      	ldr	r3, [pc, #100]	; (8004e24 <HAL_RCC_OscConfig+0x344>)
 8004dc0:	681a      	ldr	r2, [r3, #0]
 8004dc2:	2380      	movs	r3, #128	; 0x80
 8004dc4:	005b      	lsls	r3, r3, #1
 8004dc6:	4013      	ands	r3, r2
 8004dc8:	d11a      	bne.n	8004e00 <HAL_RCC_OscConfig+0x320>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004dca:	4b16      	ldr	r3, [pc, #88]	; (8004e24 <HAL_RCC_OscConfig+0x344>)
 8004dcc:	681a      	ldr	r2, [r3, #0]
 8004dce:	4b15      	ldr	r3, [pc, #84]	; (8004e24 <HAL_RCC_OscConfig+0x344>)
 8004dd0:	2180      	movs	r1, #128	; 0x80
 8004dd2:	0049      	lsls	r1, r1, #1
 8004dd4:	430a      	orrs	r2, r1
 8004dd6:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004dd8:	f7fe ff26 	bl	8003c28 <HAL_GetTick>
 8004ddc:	0003      	movs	r3, r0
 8004dde:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004de0:	e008      	b.n	8004df4 <HAL_RCC_OscConfig+0x314>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004de2:	f7fe ff21 	bl	8003c28 <HAL_GetTick>
 8004de6:	0002      	movs	r2, r0
 8004de8:	69bb      	ldr	r3, [r7, #24]
 8004dea:	1ad3      	subs	r3, r2, r3
 8004dec:	2b64      	cmp	r3, #100	; 0x64
 8004dee:	d901      	bls.n	8004df4 <HAL_RCC_OscConfig+0x314>
        {
          return HAL_TIMEOUT;
 8004df0:	2303      	movs	r3, #3
 8004df2:	e1f5      	b.n	80051e0 <HAL_RCC_OscConfig+0x700>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004df4:	4b0b      	ldr	r3, [pc, #44]	; (8004e24 <HAL_RCC_OscConfig+0x344>)
 8004df6:	681a      	ldr	r2, [r3, #0]
 8004df8:	2380      	movs	r3, #128	; 0x80
 8004dfa:	005b      	lsls	r3, r3, #1
 8004dfc:	4013      	ands	r3, r2
 8004dfe:	d0f0      	beq.n	8004de2 <HAL_RCC_OscConfig+0x302>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	689b      	ldr	r3, [r3, #8]
 8004e04:	2b01      	cmp	r3, #1
 8004e06:	d10f      	bne.n	8004e28 <HAL_RCC_OscConfig+0x348>
 8004e08:	4b03      	ldr	r3, [pc, #12]	; (8004e18 <HAL_RCC_OscConfig+0x338>)
 8004e0a:	6a1a      	ldr	r2, [r3, #32]
 8004e0c:	4b02      	ldr	r3, [pc, #8]	; (8004e18 <HAL_RCC_OscConfig+0x338>)
 8004e0e:	2101      	movs	r1, #1
 8004e10:	430a      	orrs	r2, r1
 8004e12:	621a      	str	r2, [r3, #32]
 8004e14:	e036      	b.n	8004e84 <HAL_RCC_OscConfig+0x3a4>
 8004e16:	46c0      	nop			; (mov r8, r8)
 8004e18:	40021000 	.word	0x40021000
 8004e1c:	fffeffff 	.word	0xfffeffff
 8004e20:	fffbffff 	.word	0xfffbffff
 8004e24:	40007000 	.word	0x40007000
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	689b      	ldr	r3, [r3, #8]
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	d10c      	bne.n	8004e4a <HAL_RCC_OscConfig+0x36a>
 8004e30:	4bca      	ldr	r3, [pc, #808]	; (800515c <HAL_RCC_OscConfig+0x67c>)
 8004e32:	6a1a      	ldr	r2, [r3, #32]
 8004e34:	4bc9      	ldr	r3, [pc, #804]	; (800515c <HAL_RCC_OscConfig+0x67c>)
 8004e36:	2101      	movs	r1, #1
 8004e38:	438a      	bics	r2, r1
 8004e3a:	621a      	str	r2, [r3, #32]
 8004e3c:	4bc7      	ldr	r3, [pc, #796]	; (800515c <HAL_RCC_OscConfig+0x67c>)
 8004e3e:	6a1a      	ldr	r2, [r3, #32]
 8004e40:	4bc6      	ldr	r3, [pc, #792]	; (800515c <HAL_RCC_OscConfig+0x67c>)
 8004e42:	2104      	movs	r1, #4
 8004e44:	438a      	bics	r2, r1
 8004e46:	621a      	str	r2, [r3, #32]
 8004e48:	e01c      	b.n	8004e84 <HAL_RCC_OscConfig+0x3a4>
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	689b      	ldr	r3, [r3, #8]
 8004e4e:	2b05      	cmp	r3, #5
 8004e50:	d10c      	bne.n	8004e6c <HAL_RCC_OscConfig+0x38c>
 8004e52:	4bc2      	ldr	r3, [pc, #776]	; (800515c <HAL_RCC_OscConfig+0x67c>)
 8004e54:	6a1a      	ldr	r2, [r3, #32]
 8004e56:	4bc1      	ldr	r3, [pc, #772]	; (800515c <HAL_RCC_OscConfig+0x67c>)
 8004e58:	2104      	movs	r1, #4
 8004e5a:	430a      	orrs	r2, r1
 8004e5c:	621a      	str	r2, [r3, #32]
 8004e5e:	4bbf      	ldr	r3, [pc, #764]	; (800515c <HAL_RCC_OscConfig+0x67c>)
 8004e60:	6a1a      	ldr	r2, [r3, #32]
 8004e62:	4bbe      	ldr	r3, [pc, #760]	; (800515c <HAL_RCC_OscConfig+0x67c>)
 8004e64:	2101      	movs	r1, #1
 8004e66:	430a      	orrs	r2, r1
 8004e68:	621a      	str	r2, [r3, #32]
 8004e6a:	e00b      	b.n	8004e84 <HAL_RCC_OscConfig+0x3a4>
 8004e6c:	4bbb      	ldr	r3, [pc, #748]	; (800515c <HAL_RCC_OscConfig+0x67c>)
 8004e6e:	6a1a      	ldr	r2, [r3, #32]
 8004e70:	4bba      	ldr	r3, [pc, #744]	; (800515c <HAL_RCC_OscConfig+0x67c>)
 8004e72:	2101      	movs	r1, #1
 8004e74:	438a      	bics	r2, r1
 8004e76:	621a      	str	r2, [r3, #32]
 8004e78:	4bb8      	ldr	r3, [pc, #736]	; (800515c <HAL_RCC_OscConfig+0x67c>)
 8004e7a:	6a1a      	ldr	r2, [r3, #32]
 8004e7c:	4bb7      	ldr	r3, [pc, #732]	; (800515c <HAL_RCC_OscConfig+0x67c>)
 8004e7e:	2104      	movs	r1, #4
 8004e80:	438a      	bics	r2, r1
 8004e82:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	689b      	ldr	r3, [r3, #8]
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d014      	beq.n	8004eb6 <HAL_RCC_OscConfig+0x3d6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004e8c:	f7fe fecc 	bl	8003c28 <HAL_GetTick>
 8004e90:	0003      	movs	r3, r0
 8004e92:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004e94:	e009      	b.n	8004eaa <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004e96:	f7fe fec7 	bl	8003c28 <HAL_GetTick>
 8004e9a:	0002      	movs	r2, r0
 8004e9c:	69bb      	ldr	r3, [r7, #24]
 8004e9e:	1ad3      	subs	r3, r2, r3
 8004ea0:	4aaf      	ldr	r2, [pc, #700]	; (8005160 <HAL_RCC_OscConfig+0x680>)
 8004ea2:	4293      	cmp	r3, r2
 8004ea4:	d901      	bls.n	8004eaa <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 8004ea6:	2303      	movs	r3, #3
 8004ea8:	e19a      	b.n	80051e0 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004eaa:	4bac      	ldr	r3, [pc, #688]	; (800515c <HAL_RCC_OscConfig+0x67c>)
 8004eac:	6a1b      	ldr	r3, [r3, #32]
 8004eae:	2202      	movs	r2, #2
 8004eb0:	4013      	ands	r3, r2
 8004eb2:	d0f0      	beq.n	8004e96 <HAL_RCC_OscConfig+0x3b6>
 8004eb4:	e013      	b.n	8004ede <HAL_RCC_OscConfig+0x3fe>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004eb6:	f7fe feb7 	bl	8003c28 <HAL_GetTick>
 8004eba:	0003      	movs	r3, r0
 8004ebc:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004ebe:	e009      	b.n	8004ed4 <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004ec0:	f7fe feb2 	bl	8003c28 <HAL_GetTick>
 8004ec4:	0002      	movs	r2, r0
 8004ec6:	69bb      	ldr	r3, [r7, #24]
 8004ec8:	1ad3      	subs	r3, r2, r3
 8004eca:	4aa5      	ldr	r2, [pc, #660]	; (8005160 <HAL_RCC_OscConfig+0x680>)
 8004ecc:	4293      	cmp	r3, r2
 8004ece:	d901      	bls.n	8004ed4 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 8004ed0:	2303      	movs	r3, #3
 8004ed2:	e185      	b.n	80051e0 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004ed4:	4ba1      	ldr	r3, [pc, #644]	; (800515c <HAL_RCC_OscConfig+0x67c>)
 8004ed6:	6a1b      	ldr	r3, [r3, #32]
 8004ed8:	2202      	movs	r2, #2
 8004eda:	4013      	ands	r3, r2
 8004edc:	d1f0      	bne.n	8004ec0 <HAL_RCC_OscConfig+0x3e0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004ede:	231f      	movs	r3, #31
 8004ee0:	18fb      	adds	r3, r7, r3
 8004ee2:	781b      	ldrb	r3, [r3, #0]
 8004ee4:	2b01      	cmp	r3, #1
 8004ee6:	d105      	bne.n	8004ef4 <HAL_RCC_OscConfig+0x414>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004ee8:	4b9c      	ldr	r3, [pc, #624]	; (800515c <HAL_RCC_OscConfig+0x67c>)
 8004eea:	69da      	ldr	r2, [r3, #28]
 8004eec:	4b9b      	ldr	r3, [pc, #620]	; (800515c <HAL_RCC_OscConfig+0x67c>)
 8004eee:	499d      	ldr	r1, [pc, #628]	; (8005164 <HAL_RCC_OscConfig+0x684>)
 8004ef0:	400a      	ands	r2, r1
 8004ef2:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	2210      	movs	r2, #16
 8004efa:	4013      	ands	r3, r2
 8004efc:	d063      	beq.n	8004fc6 <HAL_RCC_OscConfig+0x4e6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	695b      	ldr	r3, [r3, #20]
 8004f02:	2b01      	cmp	r3, #1
 8004f04:	d12a      	bne.n	8004f5c <HAL_RCC_OscConfig+0x47c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8004f06:	4b95      	ldr	r3, [pc, #596]	; (800515c <HAL_RCC_OscConfig+0x67c>)
 8004f08:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004f0a:	4b94      	ldr	r3, [pc, #592]	; (800515c <HAL_RCC_OscConfig+0x67c>)
 8004f0c:	2104      	movs	r1, #4
 8004f0e:	430a      	orrs	r2, r1
 8004f10:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8004f12:	4b92      	ldr	r3, [pc, #584]	; (800515c <HAL_RCC_OscConfig+0x67c>)
 8004f14:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004f16:	4b91      	ldr	r3, [pc, #580]	; (800515c <HAL_RCC_OscConfig+0x67c>)
 8004f18:	2101      	movs	r1, #1
 8004f1a:	430a      	orrs	r2, r1
 8004f1c:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004f1e:	f7fe fe83 	bl	8003c28 <HAL_GetTick>
 8004f22:	0003      	movs	r3, r0
 8004f24:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8004f26:	e008      	b.n	8004f3a <HAL_RCC_OscConfig+0x45a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8004f28:	f7fe fe7e 	bl	8003c28 <HAL_GetTick>
 8004f2c:	0002      	movs	r2, r0
 8004f2e:	69bb      	ldr	r3, [r7, #24]
 8004f30:	1ad3      	subs	r3, r2, r3
 8004f32:	2b02      	cmp	r3, #2
 8004f34:	d901      	bls.n	8004f3a <HAL_RCC_OscConfig+0x45a>
        {
          return HAL_TIMEOUT;
 8004f36:	2303      	movs	r3, #3
 8004f38:	e152      	b.n	80051e0 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8004f3a:	4b88      	ldr	r3, [pc, #544]	; (800515c <HAL_RCC_OscConfig+0x67c>)
 8004f3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f3e:	2202      	movs	r2, #2
 8004f40:	4013      	ands	r3, r2
 8004f42:	d0f1      	beq.n	8004f28 <HAL_RCC_OscConfig+0x448>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8004f44:	4b85      	ldr	r3, [pc, #532]	; (800515c <HAL_RCC_OscConfig+0x67c>)
 8004f46:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f48:	22f8      	movs	r2, #248	; 0xf8
 8004f4a:	4393      	bics	r3, r2
 8004f4c:	0019      	movs	r1, r3
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	699b      	ldr	r3, [r3, #24]
 8004f52:	00da      	lsls	r2, r3, #3
 8004f54:	4b81      	ldr	r3, [pc, #516]	; (800515c <HAL_RCC_OscConfig+0x67c>)
 8004f56:	430a      	orrs	r2, r1
 8004f58:	635a      	str	r2, [r3, #52]	; 0x34
 8004f5a:	e034      	b.n	8004fc6 <HAL_RCC_OscConfig+0x4e6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	695b      	ldr	r3, [r3, #20]
 8004f60:	3305      	adds	r3, #5
 8004f62:	d111      	bne.n	8004f88 <HAL_RCC_OscConfig+0x4a8>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8004f64:	4b7d      	ldr	r3, [pc, #500]	; (800515c <HAL_RCC_OscConfig+0x67c>)
 8004f66:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004f68:	4b7c      	ldr	r3, [pc, #496]	; (800515c <HAL_RCC_OscConfig+0x67c>)
 8004f6a:	2104      	movs	r1, #4
 8004f6c:	438a      	bics	r2, r1
 8004f6e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8004f70:	4b7a      	ldr	r3, [pc, #488]	; (800515c <HAL_RCC_OscConfig+0x67c>)
 8004f72:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f74:	22f8      	movs	r2, #248	; 0xf8
 8004f76:	4393      	bics	r3, r2
 8004f78:	0019      	movs	r1, r3
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	699b      	ldr	r3, [r3, #24]
 8004f7e:	00da      	lsls	r2, r3, #3
 8004f80:	4b76      	ldr	r3, [pc, #472]	; (800515c <HAL_RCC_OscConfig+0x67c>)
 8004f82:	430a      	orrs	r2, r1
 8004f84:	635a      	str	r2, [r3, #52]	; 0x34
 8004f86:	e01e      	b.n	8004fc6 <HAL_RCC_OscConfig+0x4e6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8004f88:	4b74      	ldr	r3, [pc, #464]	; (800515c <HAL_RCC_OscConfig+0x67c>)
 8004f8a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004f8c:	4b73      	ldr	r3, [pc, #460]	; (800515c <HAL_RCC_OscConfig+0x67c>)
 8004f8e:	2104      	movs	r1, #4
 8004f90:	430a      	orrs	r2, r1
 8004f92:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8004f94:	4b71      	ldr	r3, [pc, #452]	; (800515c <HAL_RCC_OscConfig+0x67c>)
 8004f96:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004f98:	4b70      	ldr	r3, [pc, #448]	; (800515c <HAL_RCC_OscConfig+0x67c>)
 8004f9a:	2101      	movs	r1, #1
 8004f9c:	438a      	bics	r2, r1
 8004f9e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004fa0:	f7fe fe42 	bl	8003c28 <HAL_GetTick>
 8004fa4:	0003      	movs	r3, r0
 8004fa6:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8004fa8:	e008      	b.n	8004fbc <HAL_RCC_OscConfig+0x4dc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8004faa:	f7fe fe3d 	bl	8003c28 <HAL_GetTick>
 8004fae:	0002      	movs	r2, r0
 8004fb0:	69bb      	ldr	r3, [r7, #24]
 8004fb2:	1ad3      	subs	r3, r2, r3
 8004fb4:	2b02      	cmp	r3, #2
 8004fb6:	d901      	bls.n	8004fbc <HAL_RCC_OscConfig+0x4dc>
        {
          return HAL_TIMEOUT;
 8004fb8:	2303      	movs	r3, #3
 8004fba:	e111      	b.n	80051e0 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8004fbc:	4b67      	ldr	r3, [pc, #412]	; (800515c <HAL_RCC_OscConfig+0x67c>)
 8004fbe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004fc0:	2202      	movs	r2, #2
 8004fc2:	4013      	ands	r3, r2
 8004fc4:	d1f1      	bne.n	8004faa <HAL_RCC_OscConfig+0x4ca>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	2220      	movs	r2, #32
 8004fcc:	4013      	ands	r3, r2
 8004fce:	d05c      	beq.n	800508a <HAL_RCC_OscConfig+0x5aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8004fd0:	4b62      	ldr	r3, [pc, #392]	; (800515c <HAL_RCC_OscConfig+0x67c>)
 8004fd2:	685b      	ldr	r3, [r3, #4]
 8004fd4:	220c      	movs	r2, #12
 8004fd6:	4013      	ands	r3, r2
 8004fd8:	2b0c      	cmp	r3, #12
 8004fda:	d00e      	beq.n	8004ffa <HAL_RCC_OscConfig+0x51a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8004fdc:	4b5f      	ldr	r3, [pc, #380]	; (800515c <HAL_RCC_OscConfig+0x67c>)
 8004fde:	685b      	ldr	r3, [r3, #4]
 8004fe0:	220c      	movs	r2, #12
 8004fe2:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8004fe4:	2b08      	cmp	r3, #8
 8004fe6:	d114      	bne.n	8005012 <HAL_RCC_OscConfig+0x532>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8004fe8:	4b5c      	ldr	r3, [pc, #368]	; (800515c <HAL_RCC_OscConfig+0x67c>)
 8004fea:	685a      	ldr	r2, [r3, #4]
 8004fec:	23c0      	movs	r3, #192	; 0xc0
 8004fee:	025b      	lsls	r3, r3, #9
 8004ff0:	401a      	ands	r2, r3
 8004ff2:	23c0      	movs	r3, #192	; 0xc0
 8004ff4:	025b      	lsls	r3, r3, #9
 8004ff6:	429a      	cmp	r2, r3
 8004ff8:	d10b      	bne.n	8005012 <HAL_RCC_OscConfig+0x532>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8004ffa:	4b58      	ldr	r3, [pc, #352]	; (800515c <HAL_RCC_OscConfig+0x67c>)
 8004ffc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004ffe:	2380      	movs	r3, #128	; 0x80
 8005000:	025b      	lsls	r3, r3, #9
 8005002:	4013      	ands	r3, r2
 8005004:	d040      	beq.n	8005088 <HAL_RCC_OscConfig+0x5a8>
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	6a1b      	ldr	r3, [r3, #32]
 800500a:	2b01      	cmp	r3, #1
 800500c:	d03c      	beq.n	8005088 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 800500e:	2301      	movs	r3, #1
 8005010:	e0e6      	b.n	80051e0 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	6a1b      	ldr	r3, [r3, #32]
 8005016:	2b00      	cmp	r3, #0
 8005018:	d01b      	beq.n	8005052 <HAL_RCC_OscConfig+0x572>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 800501a:	4b50      	ldr	r3, [pc, #320]	; (800515c <HAL_RCC_OscConfig+0x67c>)
 800501c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800501e:	4b4f      	ldr	r3, [pc, #316]	; (800515c <HAL_RCC_OscConfig+0x67c>)
 8005020:	2180      	movs	r1, #128	; 0x80
 8005022:	0249      	lsls	r1, r1, #9
 8005024:	430a      	orrs	r2, r1
 8005026:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005028:	f7fe fdfe 	bl	8003c28 <HAL_GetTick>
 800502c:	0003      	movs	r3, r0
 800502e:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8005030:	e008      	b.n	8005044 <HAL_RCC_OscConfig+0x564>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005032:	f7fe fdf9 	bl	8003c28 <HAL_GetTick>
 8005036:	0002      	movs	r2, r0
 8005038:	69bb      	ldr	r3, [r7, #24]
 800503a:	1ad3      	subs	r3, r2, r3
 800503c:	2b02      	cmp	r3, #2
 800503e:	d901      	bls.n	8005044 <HAL_RCC_OscConfig+0x564>
          {
            return HAL_TIMEOUT;
 8005040:	2303      	movs	r3, #3
 8005042:	e0cd      	b.n	80051e0 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8005044:	4b45      	ldr	r3, [pc, #276]	; (800515c <HAL_RCC_OscConfig+0x67c>)
 8005046:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005048:	2380      	movs	r3, #128	; 0x80
 800504a:	025b      	lsls	r3, r3, #9
 800504c:	4013      	ands	r3, r2
 800504e:	d0f0      	beq.n	8005032 <HAL_RCC_OscConfig+0x552>
 8005050:	e01b      	b.n	800508a <HAL_RCC_OscConfig+0x5aa>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8005052:	4b42      	ldr	r3, [pc, #264]	; (800515c <HAL_RCC_OscConfig+0x67c>)
 8005054:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005056:	4b41      	ldr	r3, [pc, #260]	; (800515c <HAL_RCC_OscConfig+0x67c>)
 8005058:	4943      	ldr	r1, [pc, #268]	; (8005168 <HAL_RCC_OscConfig+0x688>)
 800505a:	400a      	ands	r2, r1
 800505c:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800505e:	f7fe fde3 	bl	8003c28 <HAL_GetTick>
 8005062:	0003      	movs	r3, r0
 8005064:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8005066:	e008      	b.n	800507a <HAL_RCC_OscConfig+0x59a>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005068:	f7fe fdde 	bl	8003c28 <HAL_GetTick>
 800506c:	0002      	movs	r2, r0
 800506e:	69bb      	ldr	r3, [r7, #24]
 8005070:	1ad3      	subs	r3, r2, r3
 8005072:	2b02      	cmp	r3, #2
 8005074:	d901      	bls.n	800507a <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 8005076:	2303      	movs	r3, #3
 8005078:	e0b2      	b.n	80051e0 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 800507a:	4b38      	ldr	r3, [pc, #224]	; (800515c <HAL_RCC_OscConfig+0x67c>)
 800507c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800507e:	2380      	movs	r3, #128	; 0x80
 8005080:	025b      	lsls	r3, r3, #9
 8005082:	4013      	ands	r3, r2
 8005084:	d1f0      	bne.n	8005068 <HAL_RCC_OscConfig+0x588>
 8005086:	e000      	b.n	800508a <HAL_RCC_OscConfig+0x5aa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8005088:	46c0      	nop			; (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800508e:	2b00      	cmp	r3, #0
 8005090:	d100      	bne.n	8005094 <HAL_RCC_OscConfig+0x5b4>
 8005092:	e0a4      	b.n	80051de <HAL_RCC_OscConfig+0x6fe>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005094:	4b31      	ldr	r3, [pc, #196]	; (800515c <HAL_RCC_OscConfig+0x67c>)
 8005096:	685b      	ldr	r3, [r3, #4]
 8005098:	220c      	movs	r2, #12
 800509a:	4013      	ands	r3, r2
 800509c:	2b08      	cmp	r3, #8
 800509e:	d100      	bne.n	80050a2 <HAL_RCC_OscConfig+0x5c2>
 80050a0:	e078      	b.n	8005194 <HAL_RCC_OscConfig+0x6b4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050a6:	2b02      	cmp	r3, #2
 80050a8:	d14c      	bne.n	8005144 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80050aa:	4b2c      	ldr	r3, [pc, #176]	; (800515c <HAL_RCC_OscConfig+0x67c>)
 80050ac:	681a      	ldr	r2, [r3, #0]
 80050ae:	4b2b      	ldr	r3, [pc, #172]	; (800515c <HAL_RCC_OscConfig+0x67c>)
 80050b0:	492e      	ldr	r1, [pc, #184]	; (800516c <HAL_RCC_OscConfig+0x68c>)
 80050b2:	400a      	ands	r2, r1
 80050b4:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80050b6:	f7fe fdb7 	bl	8003c28 <HAL_GetTick>
 80050ba:	0003      	movs	r3, r0
 80050bc:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80050be:	e008      	b.n	80050d2 <HAL_RCC_OscConfig+0x5f2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80050c0:	f7fe fdb2 	bl	8003c28 <HAL_GetTick>
 80050c4:	0002      	movs	r2, r0
 80050c6:	69bb      	ldr	r3, [r7, #24]
 80050c8:	1ad3      	subs	r3, r2, r3
 80050ca:	2b02      	cmp	r3, #2
 80050cc:	d901      	bls.n	80050d2 <HAL_RCC_OscConfig+0x5f2>
          {
            return HAL_TIMEOUT;
 80050ce:	2303      	movs	r3, #3
 80050d0:	e086      	b.n	80051e0 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80050d2:	4b22      	ldr	r3, [pc, #136]	; (800515c <HAL_RCC_OscConfig+0x67c>)
 80050d4:	681a      	ldr	r2, [r3, #0]
 80050d6:	2380      	movs	r3, #128	; 0x80
 80050d8:	049b      	lsls	r3, r3, #18
 80050da:	4013      	ands	r3, r2
 80050dc:	d1f0      	bne.n	80050c0 <HAL_RCC_OscConfig+0x5e0>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80050de:	4b1f      	ldr	r3, [pc, #124]	; (800515c <HAL_RCC_OscConfig+0x67c>)
 80050e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050e2:	220f      	movs	r2, #15
 80050e4:	4393      	bics	r3, r2
 80050e6:	0019      	movs	r1, r3
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80050ec:	4b1b      	ldr	r3, [pc, #108]	; (800515c <HAL_RCC_OscConfig+0x67c>)
 80050ee:	430a      	orrs	r2, r1
 80050f0:	62da      	str	r2, [r3, #44]	; 0x2c
 80050f2:	4b1a      	ldr	r3, [pc, #104]	; (800515c <HAL_RCC_OscConfig+0x67c>)
 80050f4:	685b      	ldr	r3, [r3, #4]
 80050f6:	4a1e      	ldr	r2, [pc, #120]	; (8005170 <HAL_RCC_OscConfig+0x690>)
 80050f8:	4013      	ands	r3, r2
 80050fa:	0019      	movs	r1, r3
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005104:	431a      	orrs	r2, r3
 8005106:	4b15      	ldr	r3, [pc, #84]	; (800515c <HAL_RCC_OscConfig+0x67c>)
 8005108:	430a      	orrs	r2, r1
 800510a:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800510c:	4b13      	ldr	r3, [pc, #76]	; (800515c <HAL_RCC_OscConfig+0x67c>)
 800510e:	681a      	ldr	r2, [r3, #0]
 8005110:	4b12      	ldr	r3, [pc, #72]	; (800515c <HAL_RCC_OscConfig+0x67c>)
 8005112:	2180      	movs	r1, #128	; 0x80
 8005114:	0449      	lsls	r1, r1, #17
 8005116:	430a      	orrs	r2, r1
 8005118:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800511a:	f7fe fd85 	bl	8003c28 <HAL_GetTick>
 800511e:	0003      	movs	r3, r0
 8005120:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005122:	e008      	b.n	8005136 <HAL_RCC_OscConfig+0x656>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005124:	f7fe fd80 	bl	8003c28 <HAL_GetTick>
 8005128:	0002      	movs	r2, r0
 800512a:	69bb      	ldr	r3, [r7, #24]
 800512c:	1ad3      	subs	r3, r2, r3
 800512e:	2b02      	cmp	r3, #2
 8005130:	d901      	bls.n	8005136 <HAL_RCC_OscConfig+0x656>
          {
            return HAL_TIMEOUT;
 8005132:	2303      	movs	r3, #3
 8005134:	e054      	b.n	80051e0 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005136:	4b09      	ldr	r3, [pc, #36]	; (800515c <HAL_RCC_OscConfig+0x67c>)
 8005138:	681a      	ldr	r2, [r3, #0]
 800513a:	2380      	movs	r3, #128	; 0x80
 800513c:	049b      	lsls	r3, r3, #18
 800513e:	4013      	ands	r3, r2
 8005140:	d0f0      	beq.n	8005124 <HAL_RCC_OscConfig+0x644>
 8005142:	e04c      	b.n	80051de <HAL_RCC_OscConfig+0x6fe>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005144:	4b05      	ldr	r3, [pc, #20]	; (800515c <HAL_RCC_OscConfig+0x67c>)
 8005146:	681a      	ldr	r2, [r3, #0]
 8005148:	4b04      	ldr	r3, [pc, #16]	; (800515c <HAL_RCC_OscConfig+0x67c>)
 800514a:	4908      	ldr	r1, [pc, #32]	; (800516c <HAL_RCC_OscConfig+0x68c>)
 800514c:	400a      	ands	r2, r1
 800514e:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005150:	f7fe fd6a 	bl	8003c28 <HAL_GetTick>
 8005154:	0003      	movs	r3, r0
 8005156:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005158:	e015      	b.n	8005186 <HAL_RCC_OscConfig+0x6a6>
 800515a:	46c0      	nop			; (mov r8, r8)
 800515c:	40021000 	.word	0x40021000
 8005160:	00001388 	.word	0x00001388
 8005164:	efffffff 	.word	0xefffffff
 8005168:	fffeffff 	.word	0xfffeffff
 800516c:	feffffff 	.word	0xfeffffff
 8005170:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005174:	f7fe fd58 	bl	8003c28 <HAL_GetTick>
 8005178:	0002      	movs	r2, r0
 800517a:	69bb      	ldr	r3, [r7, #24]
 800517c:	1ad3      	subs	r3, r2, r3
 800517e:	2b02      	cmp	r3, #2
 8005180:	d901      	bls.n	8005186 <HAL_RCC_OscConfig+0x6a6>
          {
            return HAL_TIMEOUT;
 8005182:	2303      	movs	r3, #3
 8005184:	e02c      	b.n	80051e0 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005186:	4b18      	ldr	r3, [pc, #96]	; (80051e8 <HAL_RCC_OscConfig+0x708>)
 8005188:	681a      	ldr	r2, [r3, #0]
 800518a:	2380      	movs	r3, #128	; 0x80
 800518c:	049b      	lsls	r3, r3, #18
 800518e:	4013      	ands	r3, r2
 8005190:	d1f0      	bne.n	8005174 <HAL_RCC_OscConfig+0x694>
 8005192:	e024      	b.n	80051de <HAL_RCC_OscConfig+0x6fe>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005198:	2b01      	cmp	r3, #1
 800519a:	d101      	bne.n	80051a0 <HAL_RCC_OscConfig+0x6c0>
      {
        return HAL_ERROR;
 800519c:	2301      	movs	r3, #1
 800519e:	e01f      	b.n	80051e0 <HAL_RCC_OscConfig+0x700>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 80051a0:	4b11      	ldr	r3, [pc, #68]	; (80051e8 <HAL_RCC_OscConfig+0x708>)
 80051a2:	685b      	ldr	r3, [r3, #4]
 80051a4:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 80051a6:	4b10      	ldr	r3, [pc, #64]	; (80051e8 <HAL_RCC_OscConfig+0x708>)
 80051a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051aa:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80051ac:	697a      	ldr	r2, [r7, #20]
 80051ae:	23c0      	movs	r3, #192	; 0xc0
 80051b0:	025b      	lsls	r3, r3, #9
 80051b2:	401a      	ands	r2, r3
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051b8:	429a      	cmp	r2, r3
 80051ba:	d10e      	bne.n	80051da <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80051bc:	693b      	ldr	r3, [r7, #16]
 80051be:	220f      	movs	r2, #15
 80051c0:	401a      	ands	r2, r3
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80051c6:	429a      	cmp	r2, r3
 80051c8:	d107      	bne.n	80051da <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 80051ca:	697a      	ldr	r2, [r7, #20]
 80051cc:	23f0      	movs	r3, #240	; 0xf0
 80051ce:	039b      	lsls	r3, r3, #14
 80051d0:	401a      	ands	r2, r3
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80051d6:	429a      	cmp	r2, r3
 80051d8:	d001      	beq.n	80051de <HAL_RCC_OscConfig+0x6fe>
        {
          return HAL_ERROR;
 80051da:	2301      	movs	r3, #1
 80051dc:	e000      	b.n	80051e0 <HAL_RCC_OscConfig+0x700>
        }
      }
    }
  }

  return HAL_OK;
 80051de:	2300      	movs	r3, #0
}
 80051e0:	0018      	movs	r0, r3
 80051e2:	46bd      	mov	sp, r7
 80051e4:	b008      	add	sp, #32
 80051e6:	bd80      	pop	{r7, pc}
 80051e8:	40021000 	.word	0x40021000

080051ec <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80051ec:	b580      	push	{r7, lr}
 80051ee:	b084      	sub	sp, #16
 80051f0:	af00      	add	r7, sp, #0
 80051f2:	6078      	str	r0, [r7, #4]
 80051f4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d101      	bne.n	8005200 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80051fc:	2301      	movs	r3, #1
 80051fe:	e0bf      	b.n	8005380 <HAL_RCC_ClockConfig+0x194>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005200:	4b61      	ldr	r3, [pc, #388]	; (8005388 <HAL_RCC_ClockConfig+0x19c>)
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	2201      	movs	r2, #1
 8005206:	4013      	ands	r3, r2
 8005208:	683a      	ldr	r2, [r7, #0]
 800520a:	429a      	cmp	r2, r3
 800520c:	d911      	bls.n	8005232 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800520e:	4b5e      	ldr	r3, [pc, #376]	; (8005388 <HAL_RCC_ClockConfig+0x19c>)
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	2201      	movs	r2, #1
 8005214:	4393      	bics	r3, r2
 8005216:	0019      	movs	r1, r3
 8005218:	4b5b      	ldr	r3, [pc, #364]	; (8005388 <HAL_RCC_ClockConfig+0x19c>)
 800521a:	683a      	ldr	r2, [r7, #0]
 800521c:	430a      	orrs	r2, r1
 800521e:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005220:	4b59      	ldr	r3, [pc, #356]	; (8005388 <HAL_RCC_ClockConfig+0x19c>)
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	2201      	movs	r2, #1
 8005226:	4013      	ands	r3, r2
 8005228:	683a      	ldr	r2, [r7, #0]
 800522a:	429a      	cmp	r2, r3
 800522c:	d001      	beq.n	8005232 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 800522e:	2301      	movs	r3, #1
 8005230:	e0a6      	b.n	8005380 <HAL_RCC_ClockConfig+0x194>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	2202      	movs	r2, #2
 8005238:	4013      	ands	r3, r2
 800523a:	d015      	beq.n	8005268 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	2204      	movs	r2, #4
 8005242:	4013      	ands	r3, r2
 8005244:	d006      	beq.n	8005254 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8005246:	4b51      	ldr	r3, [pc, #324]	; (800538c <HAL_RCC_ClockConfig+0x1a0>)
 8005248:	685a      	ldr	r2, [r3, #4]
 800524a:	4b50      	ldr	r3, [pc, #320]	; (800538c <HAL_RCC_ClockConfig+0x1a0>)
 800524c:	21e0      	movs	r1, #224	; 0xe0
 800524e:	00c9      	lsls	r1, r1, #3
 8005250:	430a      	orrs	r2, r1
 8005252:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005254:	4b4d      	ldr	r3, [pc, #308]	; (800538c <HAL_RCC_ClockConfig+0x1a0>)
 8005256:	685b      	ldr	r3, [r3, #4]
 8005258:	22f0      	movs	r2, #240	; 0xf0
 800525a:	4393      	bics	r3, r2
 800525c:	0019      	movs	r1, r3
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	689a      	ldr	r2, [r3, #8]
 8005262:	4b4a      	ldr	r3, [pc, #296]	; (800538c <HAL_RCC_ClockConfig+0x1a0>)
 8005264:	430a      	orrs	r2, r1
 8005266:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	2201      	movs	r2, #1
 800526e:	4013      	ands	r3, r2
 8005270:	d04c      	beq.n	800530c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	685b      	ldr	r3, [r3, #4]
 8005276:	2b01      	cmp	r3, #1
 8005278:	d107      	bne.n	800528a <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800527a:	4b44      	ldr	r3, [pc, #272]	; (800538c <HAL_RCC_ClockConfig+0x1a0>)
 800527c:	681a      	ldr	r2, [r3, #0]
 800527e:	2380      	movs	r3, #128	; 0x80
 8005280:	029b      	lsls	r3, r3, #10
 8005282:	4013      	ands	r3, r2
 8005284:	d120      	bne.n	80052c8 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8005286:	2301      	movs	r3, #1
 8005288:	e07a      	b.n	8005380 <HAL_RCC_ClockConfig+0x194>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	685b      	ldr	r3, [r3, #4]
 800528e:	2b02      	cmp	r3, #2
 8005290:	d107      	bne.n	80052a2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005292:	4b3e      	ldr	r3, [pc, #248]	; (800538c <HAL_RCC_ClockConfig+0x1a0>)
 8005294:	681a      	ldr	r2, [r3, #0]
 8005296:	2380      	movs	r3, #128	; 0x80
 8005298:	049b      	lsls	r3, r3, #18
 800529a:	4013      	ands	r3, r2
 800529c:	d114      	bne.n	80052c8 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 800529e:	2301      	movs	r3, #1
 80052a0:	e06e      	b.n	8005380 <HAL_RCC_ClockConfig+0x194>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	685b      	ldr	r3, [r3, #4]
 80052a6:	2b03      	cmp	r3, #3
 80052a8:	d107      	bne.n	80052ba <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 80052aa:	4b38      	ldr	r3, [pc, #224]	; (800538c <HAL_RCC_ClockConfig+0x1a0>)
 80052ac:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80052ae:	2380      	movs	r3, #128	; 0x80
 80052b0:	025b      	lsls	r3, r3, #9
 80052b2:	4013      	ands	r3, r2
 80052b4:	d108      	bne.n	80052c8 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 80052b6:	2301      	movs	r3, #1
 80052b8:	e062      	b.n	8005380 <HAL_RCC_ClockConfig+0x194>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80052ba:	4b34      	ldr	r3, [pc, #208]	; (800538c <HAL_RCC_ClockConfig+0x1a0>)
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	2202      	movs	r2, #2
 80052c0:	4013      	ands	r3, r2
 80052c2:	d101      	bne.n	80052c8 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 80052c4:	2301      	movs	r3, #1
 80052c6:	e05b      	b.n	8005380 <HAL_RCC_ClockConfig+0x194>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80052c8:	4b30      	ldr	r3, [pc, #192]	; (800538c <HAL_RCC_ClockConfig+0x1a0>)
 80052ca:	685b      	ldr	r3, [r3, #4]
 80052cc:	2203      	movs	r2, #3
 80052ce:	4393      	bics	r3, r2
 80052d0:	0019      	movs	r1, r3
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	685a      	ldr	r2, [r3, #4]
 80052d6:	4b2d      	ldr	r3, [pc, #180]	; (800538c <HAL_RCC_ClockConfig+0x1a0>)
 80052d8:	430a      	orrs	r2, r1
 80052da:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80052dc:	f7fe fca4 	bl	8003c28 <HAL_GetTick>
 80052e0:	0003      	movs	r3, r0
 80052e2:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80052e4:	e009      	b.n	80052fa <HAL_RCC_ClockConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80052e6:	f7fe fc9f 	bl	8003c28 <HAL_GetTick>
 80052ea:	0002      	movs	r2, r0
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	1ad3      	subs	r3, r2, r3
 80052f0:	4a27      	ldr	r2, [pc, #156]	; (8005390 <HAL_RCC_ClockConfig+0x1a4>)
 80052f2:	4293      	cmp	r3, r2
 80052f4:	d901      	bls.n	80052fa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80052f6:	2303      	movs	r3, #3
 80052f8:	e042      	b.n	8005380 <HAL_RCC_ClockConfig+0x194>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80052fa:	4b24      	ldr	r3, [pc, #144]	; (800538c <HAL_RCC_ClockConfig+0x1a0>)
 80052fc:	685b      	ldr	r3, [r3, #4]
 80052fe:	220c      	movs	r2, #12
 8005300:	401a      	ands	r2, r3
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	685b      	ldr	r3, [r3, #4]
 8005306:	009b      	lsls	r3, r3, #2
 8005308:	429a      	cmp	r2, r3
 800530a:	d1ec      	bne.n	80052e6 <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800530c:	4b1e      	ldr	r3, [pc, #120]	; (8005388 <HAL_RCC_ClockConfig+0x19c>)
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	2201      	movs	r2, #1
 8005312:	4013      	ands	r3, r2
 8005314:	683a      	ldr	r2, [r7, #0]
 8005316:	429a      	cmp	r2, r3
 8005318:	d211      	bcs.n	800533e <HAL_RCC_ClockConfig+0x152>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800531a:	4b1b      	ldr	r3, [pc, #108]	; (8005388 <HAL_RCC_ClockConfig+0x19c>)
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	2201      	movs	r2, #1
 8005320:	4393      	bics	r3, r2
 8005322:	0019      	movs	r1, r3
 8005324:	4b18      	ldr	r3, [pc, #96]	; (8005388 <HAL_RCC_ClockConfig+0x19c>)
 8005326:	683a      	ldr	r2, [r7, #0]
 8005328:	430a      	orrs	r2, r1
 800532a:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800532c:	4b16      	ldr	r3, [pc, #88]	; (8005388 <HAL_RCC_ClockConfig+0x19c>)
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	2201      	movs	r2, #1
 8005332:	4013      	ands	r3, r2
 8005334:	683a      	ldr	r2, [r7, #0]
 8005336:	429a      	cmp	r2, r3
 8005338:	d001      	beq.n	800533e <HAL_RCC_ClockConfig+0x152>
    {
      return HAL_ERROR;
 800533a:	2301      	movs	r3, #1
 800533c:	e020      	b.n	8005380 <HAL_RCC_ClockConfig+0x194>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	2204      	movs	r2, #4
 8005344:	4013      	ands	r3, r2
 8005346:	d009      	beq.n	800535c <HAL_RCC_ClockConfig+0x170>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8005348:	4b10      	ldr	r3, [pc, #64]	; (800538c <HAL_RCC_ClockConfig+0x1a0>)
 800534a:	685b      	ldr	r3, [r3, #4]
 800534c:	4a11      	ldr	r2, [pc, #68]	; (8005394 <HAL_RCC_ClockConfig+0x1a8>)
 800534e:	4013      	ands	r3, r2
 8005350:	0019      	movs	r1, r3
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	68da      	ldr	r2, [r3, #12]
 8005356:	4b0d      	ldr	r3, [pc, #52]	; (800538c <HAL_RCC_ClockConfig+0x1a0>)
 8005358:	430a      	orrs	r2, r1
 800535a:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800535c:	f000 f820 	bl	80053a0 <HAL_RCC_GetSysClockFreq>
 8005360:	0001      	movs	r1, r0
 8005362:	4b0a      	ldr	r3, [pc, #40]	; (800538c <HAL_RCC_ClockConfig+0x1a0>)
 8005364:	685b      	ldr	r3, [r3, #4]
 8005366:	091b      	lsrs	r3, r3, #4
 8005368:	220f      	movs	r2, #15
 800536a:	4013      	ands	r3, r2
 800536c:	4a0a      	ldr	r2, [pc, #40]	; (8005398 <HAL_RCC_ClockConfig+0x1ac>)
 800536e:	5cd3      	ldrb	r3, [r2, r3]
 8005370:	000a      	movs	r2, r1
 8005372:	40da      	lsrs	r2, r3
 8005374:	4b09      	ldr	r3, [pc, #36]	; (800539c <HAL_RCC_ClockConfig+0x1b0>)
 8005376:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8005378:	2000      	movs	r0, #0
 800537a:	f7fe fc0f 	bl	8003b9c <HAL_InitTick>
  
  return HAL_OK;
 800537e:	2300      	movs	r3, #0
}
 8005380:	0018      	movs	r0, r3
 8005382:	46bd      	mov	sp, r7
 8005384:	b004      	add	sp, #16
 8005386:	bd80      	pop	{r7, pc}
 8005388:	40022000 	.word	0x40022000
 800538c:	40021000 	.word	0x40021000
 8005390:	00001388 	.word	0x00001388
 8005394:	fffff8ff 	.word	0xfffff8ff
 8005398:	08009424 	.word	0x08009424
 800539c:	2000201c 	.word	0x2000201c

080053a0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80053a0:	b590      	push	{r4, r7, lr}
 80053a2:	b08f      	sub	sp, #60	; 0x3c
 80053a4:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 80053a6:	2314      	movs	r3, #20
 80053a8:	18fb      	adds	r3, r7, r3
 80053aa:	4a38      	ldr	r2, [pc, #224]	; (800548c <HAL_RCC_GetSysClockFreq+0xec>)
 80053ac:	ca13      	ldmia	r2!, {r0, r1, r4}
 80053ae:	c313      	stmia	r3!, {r0, r1, r4}
 80053b0:	6812      	ldr	r2, [r2, #0]
 80053b2:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 80053b4:	1d3b      	adds	r3, r7, #4
 80053b6:	4a36      	ldr	r2, [pc, #216]	; (8005490 <HAL_RCC_GetSysClockFreq+0xf0>)
 80053b8:	ca13      	ldmia	r2!, {r0, r1, r4}
 80053ba:	c313      	stmia	r3!, {r0, r1, r4}
 80053bc:	6812      	ldr	r2, [r2, #0]
 80053be:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80053c0:	2300      	movs	r3, #0
 80053c2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80053c4:	2300      	movs	r3, #0
 80053c6:	62bb      	str	r3, [r7, #40]	; 0x28
 80053c8:	2300      	movs	r3, #0
 80053ca:	637b      	str	r3, [r7, #52]	; 0x34
 80053cc:	2300      	movs	r3, #0
 80053ce:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 80053d0:	2300      	movs	r3, #0
 80053d2:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 80053d4:	4b2f      	ldr	r3, [pc, #188]	; (8005494 <HAL_RCC_GetSysClockFreq+0xf4>)
 80053d6:	685b      	ldr	r3, [r3, #4]
 80053d8:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80053da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80053dc:	220c      	movs	r2, #12
 80053de:	4013      	ands	r3, r2
 80053e0:	2b0c      	cmp	r3, #12
 80053e2:	d047      	beq.n	8005474 <HAL_RCC_GetSysClockFreq+0xd4>
 80053e4:	d849      	bhi.n	800547a <HAL_RCC_GetSysClockFreq+0xda>
 80053e6:	2b04      	cmp	r3, #4
 80053e8:	d002      	beq.n	80053f0 <HAL_RCC_GetSysClockFreq+0x50>
 80053ea:	2b08      	cmp	r3, #8
 80053ec:	d003      	beq.n	80053f6 <HAL_RCC_GetSysClockFreq+0x56>
 80053ee:	e044      	b.n	800547a <HAL_RCC_GetSysClockFreq+0xda>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80053f0:	4b29      	ldr	r3, [pc, #164]	; (8005498 <HAL_RCC_GetSysClockFreq+0xf8>)
 80053f2:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80053f4:	e044      	b.n	8005480 <HAL_RCC_GetSysClockFreq+0xe0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 80053f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80053f8:	0c9b      	lsrs	r3, r3, #18
 80053fa:	220f      	movs	r2, #15
 80053fc:	4013      	ands	r3, r2
 80053fe:	2214      	movs	r2, #20
 8005400:	18ba      	adds	r2, r7, r2
 8005402:	5cd3      	ldrb	r3, [r2, r3]
 8005404:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8005406:	4b23      	ldr	r3, [pc, #140]	; (8005494 <HAL_RCC_GetSysClockFreq+0xf4>)
 8005408:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800540a:	220f      	movs	r2, #15
 800540c:	4013      	ands	r3, r2
 800540e:	1d3a      	adds	r2, r7, #4
 8005410:	5cd3      	ldrb	r3, [r2, r3]
 8005412:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8005414:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005416:	23c0      	movs	r3, #192	; 0xc0
 8005418:	025b      	lsls	r3, r3, #9
 800541a:	401a      	ands	r2, r3
 800541c:	2380      	movs	r3, #128	; 0x80
 800541e:	025b      	lsls	r3, r3, #9
 8005420:	429a      	cmp	r2, r3
 8005422:	d109      	bne.n	8005438 <HAL_RCC_GetSysClockFreq+0x98>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8005424:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005426:	481c      	ldr	r0, [pc, #112]	; (8005498 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005428:	f7fa fe88 	bl	800013c <__udivsi3>
 800542c:	0003      	movs	r3, r0
 800542e:	001a      	movs	r2, r3
 8005430:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005432:	4353      	muls	r3, r2
 8005434:	637b      	str	r3, [r7, #52]	; 0x34
 8005436:	e01a      	b.n	800546e <HAL_RCC_GetSysClockFreq+0xce>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 8005438:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800543a:	23c0      	movs	r3, #192	; 0xc0
 800543c:	025b      	lsls	r3, r3, #9
 800543e:	401a      	ands	r2, r3
 8005440:	23c0      	movs	r3, #192	; 0xc0
 8005442:	025b      	lsls	r3, r3, #9
 8005444:	429a      	cmp	r2, r3
 8005446:	d109      	bne.n	800545c <HAL_RCC_GetSysClockFreq+0xbc>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8005448:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800544a:	4814      	ldr	r0, [pc, #80]	; (800549c <HAL_RCC_GetSysClockFreq+0xfc>)
 800544c:	f7fa fe76 	bl	800013c <__udivsi3>
 8005450:	0003      	movs	r3, r0
 8005452:	001a      	movs	r2, r3
 8005454:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005456:	4353      	muls	r3, r2
 8005458:	637b      	str	r3, [r7, #52]	; 0x34
 800545a:	e008      	b.n	800546e <HAL_RCC_GetSysClockFreq+0xce>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800545c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800545e:	480e      	ldr	r0, [pc, #56]	; (8005498 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005460:	f7fa fe6c 	bl	800013c <__udivsi3>
 8005464:	0003      	movs	r3, r0
 8005466:	001a      	movs	r2, r3
 8005468:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800546a:	4353      	muls	r3, r2
 800546c:	637b      	str	r3, [r7, #52]	; 0x34
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 800546e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005470:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8005472:	e005      	b.n	8005480 <HAL_RCC_GetSysClockFreq+0xe0>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 8005474:	4b09      	ldr	r3, [pc, #36]	; (800549c <HAL_RCC_GetSysClockFreq+0xfc>)
 8005476:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8005478:	e002      	b.n	8005480 <HAL_RCC_GetSysClockFreq+0xe0>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800547a:	4b07      	ldr	r3, [pc, #28]	; (8005498 <HAL_RCC_GetSysClockFreq+0xf8>)
 800547c:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800547e:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8005480:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8005482:	0018      	movs	r0, r3
 8005484:	46bd      	mov	sp, r7
 8005486:	b00f      	add	sp, #60	; 0x3c
 8005488:	bd90      	pop	{r4, r7, pc}
 800548a:	46c0      	nop			; (mov r8, r8)
 800548c:	08008e50 	.word	0x08008e50
 8005490:	08008e60 	.word	0x08008e60
 8005494:	40021000 	.word	0x40021000
 8005498:	007a1200 	.word	0x007a1200
 800549c:	02dc6c00 	.word	0x02dc6c00

080054a0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80054a0:	b580      	push	{r7, lr}
 80054a2:	b084      	sub	sp, #16
 80054a4:	af00      	add	r7, sp, #0
 80054a6:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d101      	bne.n	80054b2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80054ae:	2301      	movs	r3, #1
 80054b0:	e0a8      	b.n	8005604 <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d109      	bne.n	80054ce <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	685a      	ldr	r2, [r3, #4]
 80054be:	2382      	movs	r3, #130	; 0x82
 80054c0:	005b      	lsls	r3, r3, #1
 80054c2:	429a      	cmp	r2, r3
 80054c4:	d009      	beq.n	80054da <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	2200      	movs	r2, #0
 80054ca:	61da      	str	r2, [r3, #28]
 80054cc:	e005      	b.n	80054da <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	2200      	movs	r2, #0
 80054d2:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	2200      	movs	r2, #0
 80054d8:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	2200      	movs	r2, #0
 80054de:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	225d      	movs	r2, #93	; 0x5d
 80054e4:	5c9b      	ldrb	r3, [r3, r2]
 80054e6:	b2db      	uxtb	r3, r3
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d107      	bne.n	80054fc <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	225c      	movs	r2, #92	; 0x5c
 80054f0:	2100      	movs	r1, #0
 80054f2:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	0018      	movs	r0, r3
 80054f8:	f7fe f9cc 	bl	8003894 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	225d      	movs	r2, #93	; 0x5d
 8005500:	2102      	movs	r1, #2
 8005502:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	681a      	ldr	r2, [r3, #0]
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	2140      	movs	r1, #64	; 0x40
 8005510:	438a      	bics	r2, r1
 8005512:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	68da      	ldr	r2, [r3, #12]
 8005518:	23e0      	movs	r3, #224	; 0xe0
 800551a:	00db      	lsls	r3, r3, #3
 800551c:	429a      	cmp	r2, r3
 800551e:	d902      	bls.n	8005526 <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8005520:	2300      	movs	r3, #0
 8005522:	60fb      	str	r3, [r7, #12]
 8005524:	e002      	b.n	800552c <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8005526:	2380      	movs	r3, #128	; 0x80
 8005528:	015b      	lsls	r3, r3, #5
 800552a:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	68da      	ldr	r2, [r3, #12]
 8005530:	23f0      	movs	r3, #240	; 0xf0
 8005532:	011b      	lsls	r3, r3, #4
 8005534:	429a      	cmp	r2, r3
 8005536:	d008      	beq.n	800554a <HAL_SPI_Init+0xaa>
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	68da      	ldr	r2, [r3, #12]
 800553c:	23e0      	movs	r3, #224	; 0xe0
 800553e:	00db      	lsls	r3, r3, #3
 8005540:	429a      	cmp	r2, r3
 8005542:	d002      	beq.n	800554a <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	2200      	movs	r2, #0
 8005548:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	685a      	ldr	r2, [r3, #4]
 800554e:	2382      	movs	r3, #130	; 0x82
 8005550:	005b      	lsls	r3, r3, #1
 8005552:	401a      	ands	r2, r3
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	6899      	ldr	r1, [r3, #8]
 8005558:	2384      	movs	r3, #132	; 0x84
 800555a:	021b      	lsls	r3, r3, #8
 800555c:	400b      	ands	r3, r1
 800555e:	431a      	orrs	r2, r3
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	691b      	ldr	r3, [r3, #16]
 8005564:	2102      	movs	r1, #2
 8005566:	400b      	ands	r3, r1
 8005568:	431a      	orrs	r2, r3
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	695b      	ldr	r3, [r3, #20]
 800556e:	2101      	movs	r1, #1
 8005570:	400b      	ands	r3, r1
 8005572:	431a      	orrs	r2, r3
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	6999      	ldr	r1, [r3, #24]
 8005578:	2380      	movs	r3, #128	; 0x80
 800557a:	009b      	lsls	r3, r3, #2
 800557c:	400b      	ands	r3, r1
 800557e:	431a      	orrs	r2, r3
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	69db      	ldr	r3, [r3, #28]
 8005584:	2138      	movs	r1, #56	; 0x38
 8005586:	400b      	ands	r3, r1
 8005588:	431a      	orrs	r2, r3
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	6a1b      	ldr	r3, [r3, #32]
 800558e:	2180      	movs	r1, #128	; 0x80
 8005590:	400b      	ands	r3, r1
 8005592:	431a      	orrs	r2, r3
 8005594:	0011      	movs	r1, r2
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800559a:	2380      	movs	r3, #128	; 0x80
 800559c:	019b      	lsls	r3, r3, #6
 800559e:	401a      	ands	r2, r3
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	430a      	orrs	r2, r1
 80055a6:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	699b      	ldr	r3, [r3, #24]
 80055ac:	0c1b      	lsrs	r3, r3, #16
 80055ae:	2204      	movs	r2, #4
 80055b0:	401a      	ands	r2, r3
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055b6:	2110      	movs	r1, #16
 80055b8:	400b      	ands	r3, r1
 80055ba:	431a      	orrs	r2, r3
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80055c0:	2108      	movs	r1, #8
 80055c2:	400b      	ands	r3, r1
 80055c4:	431a      	orrs	r2, r3
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	68d9      	ldr	r1, [r3, #12]
 80055ca:	23f0      	movs	r3, #240	; 0xf0
 80055cc:	011b      	lsls	r3, r3, #4
 80055ce:	400b      	ands	r3, r1
 80055d0:	431a      	orrs	r2, r3
 80055d2:	0011      	movs	r1, r2
 80055d4:	68fa      	ldr	r2, [r7, #12]
 80055d6:	2380      	movs	r3, #128	; 0x80
 80055d8:	015b      	lsls	r3, r3, #5
 80055da:	401a      	ands	r2, r3
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	430a      	orrs	r2, r1
 80055e2:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	69da      	ldr	r2, [r3, #28]
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	4907      	ldr	r1, [pc, #28]	; (800560c <HAL_SPI_Init+0x16c>)
 80055f0:	400a      	ands	r2, r1
 80055f2:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	2200      	movs	r2, #0
 80055f8:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	225d      	movs	r2, #93	; 0x5d
 80055fe:	2101      	movs	r1, #1
 8005600:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005602:	2300      	movs	r3, #0
}
 8005604:	0018      	movs	r0, r3
 8005606:	46bd      	mov	sp, r7
 8005608:	b004      	add	sp, #16
 800560a:	bd80      	pop	{r7, pc}
 800560c:	fffff7ff 	.word	0xfffff7ff

08005610 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005610:	b580      	push	{r7, lr}
 8005612:	b088      	sub	sp, #32
 8005614:	af00      	add	r7, sp, #0
 8005616:	60f8      	str	r0, [r7, #12]
 8005618:	60b9      	str	r1, [r7, #8]
 800561a:	603b      	str	r3, [r7, #0]
 800561c:	1dbb      	adds	r3, r7, #6
 800561e:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005620:	231f      	movs	r3, #31
 8005622:	18fb      	adds	r3, r7, r3
 8005624:	2200      	movs	r2, #0
 8005626:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	225c      	movs	r2, #92	; 0x5c
 800562c:	5c9b      	ldrb	r3, [r3, r2]
 800562e:	2b01      	cmp	r3, #1
 8005630:	d101      	bne.n	8005636 <HAL_SPI_Transmit+0x26>
 8005632:	2302      	movs	r3, #2
 8005634:	e140      	b.n	80058b8 <HAL_SPI_Transmit+0x2a8>
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	225c      	movs	r2, #92	; 0x5c
 800563a:	2101      	movs	r1, #1
 800563c:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800563e:	f7fe faf3 	bl	8003c28 <HAL_GetTick>
 8005642:	0003      	movs	r3, r0
 8005644:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8005646:	2316      	movs	r3, #22
 8005648:	18fb      	adds	r3, r7, r3
 800564a:	1dba      	adds	r2, r7, #6
 800564c:	8812      	ldrh	r2, [r2, #0]
 800564e:	801a      	strh	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	225d      	movs	r2, #93	; 0x5d
 8005654:	5c9b      	ldrb	r3, [r3, r2]
 8005656:	b2db      	uxtb	r3, r3
 8005658:	2b01      	cmp	r3, #1
 800565a:	d004      	beq.n	8005666 <HAL_SPI_Transmit+0x56>
  {
    errorcode = HAL_BUSY;
 800565c:	231f      	movs	r3, #31
 800565e:	18fb      	adds	r3, r7, r3
 8005660:	2202      	movs	r2, #2
 8005662:	701a      	strb	r2, [r3, #0]
    goto error;
 8005664:	e11d      	b.n	80058a2 <HAL_SPI_Transmit+0x292>
  }

  if ((pData == NULL) || (Size == 0U))
 8005666:	68bb      	ldr	r3, [r7, #8]
 8005668:	2b00      	cmp	r3, #0
 800566a:	d003      	beq.n	8005674 <HAL_SPI_Transmit+0x64>
 800566c:	1dbb      	adds	r3, r7, #6
 800566e:	881b      	ldrh	r3, [r3, #0]
 8005670:	2b00      	cmp	r3, #0
 8005672:	d104      	bne.n	800567e <HAL_SPI_Transmit+0x6e>
  {
    errorcode = HAL_ERROR;
 8005674:	231f      	movs	r3, #31
 8005676:	18fb      	adds	r3, r7, r3
 8005678:	2201      	movs	r2, #1
 800567a:	701a      	strb	r2, [r3, #0]
    goto error;
 800567c:	e111      	b.n	80058a2 <HAL_SPI_Transmit+0x292>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	225d      	movs	r2, #93	; 0x5d
 8005682:	2103      	movs	r1, #3
 8005684:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	2200      	movs	r2, #0
 800568a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	68ba      	ldr	r2, [r7, #8]
 8005690:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	1dba      	adds	r2, r7, #6
 8005696:	8812      	ldrh	r2, [r2, #0]
 8005698:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	1dba      	adds	r2, r7, #6
 800569e:	8812      	ldrh	r2, [r2, #0]
 80056a0:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	2200      	movs	r2, #0
 80056a6:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	2244      	movs	r2, #68	; 0x44
 80056ac:	2100      	movs	r1, #0
 80056ae:	5299      	strh	r1, [r3, r2]
  hspi->RxXferCount = 0U;
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	2246      	movs	r2, #70	; 0x46
 80056b4:	2100      	movs	r1, #0
 80056b6:	5299      	strh	r1, [r3, r2]
  hspi->TxISR       = NULL;
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	2200      	movs	r2, #0
 80056bc:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	2200      	movs	r2, #0
 80056c2:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	689a      	ldr	r2, [r3, #8]
 80056c8:	2380      	movs	r3, #128	; 0x80
 80056ca:	021b      	lsls	r3, r3, #8
 80056cc:	429a      	cmp	r2, r3
 80056ce:	d110      	bne.n	80056f2 <HAL_SPI_Transmit+0xe2>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	681a      	ldr	r2, [r3, #0]
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	2140      	movs	r1, #64	; 0x40
 80056dc:	438a      	bics	r2, r1
 80056de:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	681a      	ldr	r2, [r3, #0]
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	2180      	movs	r1, #128	; 0x80
 80056ec:	01c9      	lsls	r1, r1, #7
 80056ee:	430a      	orrs	r2, r1
 80056f0:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	2240      	movs	r2, #64	; 0x40
 80056fa:	4013      	ands	r3, r2
 80056fc:	2b40      	cmp	r3, #64	; 0x40
 80056fe:	d007      	beq.n	8005710 <HAL_SPI_Transmit+0x100>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	681a      	ldr	r2, [r3, #0]
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	2140      	movs	r1, #64	; 0x40
 800570c:	430a      	orrs	r2, r1
 800570e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	68da      	ldr	r2, [r3, #12]
 8005714:	23e0      	movs	r3, #224	; 0xe0
 8005716:	00db      	lsls	r3, r3, #3
 8005718:	429a      	cmp	r2, r3
 800571a:	d94e      	bls.n	80057ba <HAL_SPI_Transmit+0x1aa>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	685b      	ldr	r3, [r3, #4]
 8005720:	2b00      	cmp	r3, #0
 8005722:	d004      	beq.n	800572e <HAL_SPI_Transmit+0x11e>
 8005724:	2316      	movs	r3, #22
 8005726:	18fb      	adds	r3, r7, r3
 8005728:	881b      	ldrh	r3, [r3, #0]
 800572a:	2b01      	cmp	r3, #1
 800572c:	d13f      	bne.n	80057ae <HAL_SPI_Transmit+0x19e>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005732:	881a      	ldrh	r2, [r3, #0]
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800573e:	1c9a      	adds	r2, r3, #2
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005748:	b29b      	uxth	r3, r3
 800574a:	3b01      	subs	r3, #1
 800574c:	b29a      	uxth	r2, r3
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005752:	e02c      	b.n	80057ae <HAL_SPI_Transmit+0x19e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	689b      	ldr	r3, [r3, #8]
 800575a:	2202      	movs	r2, #2
 800575c:	4013      	ands	r3, r2
 800575e:	2b02      	cmp	r3, #2
 8005760:	d112      	bne.n	8005788 <HAL_SPI_Transmit+0x178>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005766:	881a      	ldrh	r2, [r3, #0]
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005772:	1c9a      	adds	r2, r3, #2
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800577c:	b29b      	uxth	r3, r3
 800577e:	3b01      	subs	r3, #1
 8005780:	b29a      	uxth	r2, r3
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005786:	e012      	b.n	80057ae <HAL_SPI_Transmit+0x19e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005788:	f7fe fa4e 	bl	8003c28 <HAL_GetTick>
 800578c:	0002      	movs	r2, r0
 800578e:	69bb      	ldr	r3, [r7, #24]
 8005790:	1ad3      	subs	r3, r2, r3
 8005792:	683a      	ldr	r2, [r7, #0]
 8005794:	429a      	cmp	r2, r3
 8005796:	d802      	bhi.n	800579e <HAL_SPI_Transmit+0x18e>
 8005798:	683b      	ldr	r3, [r7, #0]
 800579a:	3301      	adds	r3, #1
 800579c:	d102      	bne.n	80057a4 <HAL_SPI_Transmit+0x194>
 800579e:	683b      	ldr	r3, [r7, #0]
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	d104      	bne.n	80057ae <HAL_SPI_Transmit+0x19e>
        {
          errorcode = HAL_TIMEOUT;
 80057a4:	231f      	movs	r3, #31
 80057a6:	18fb      	adds	r3, r7, r3
 80057a8:	2203      	movs	r2, #3
 80057aa:	701a      	strb	r2, [r3, #0]
          goto error;
 80057ac:	e079      	b.n	80058a2 <HAL_SPI_Transmit+0x292>
    while (hspi->TxXferCount > 0U)
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80057b2:	b29b      	uxth	r3, r3
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	d1cd      	bne.n	8005754 <HAL_SPI_Transmit+0x144>
 80057b8:	e04f      	b.n	800585a <HAL_SPI_Transmit+0x24a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	685b      	ldr	r3, [r3, #4]
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d004      	beq.n	80057cc <HAL_SPI_Transmit+0x1bc>
 80057c2:	2316      	movs	r3, #22
 80057c4:	18fb      	adds	r3, r7, r3
 80057c6:	881b      	ldrh	r3, [r3, #0]
 80057c8:	2b01      	cmp	r3, #1
 80057ca:	d141      	bne.n	8005850 <HAL_SPI_Transmit+0x240>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	330c      	adds	r3, #12
 80057d6:	7812      	ldrb	r2, [r2, #0]
 80057d8:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057de:	1c5a      	adds	r2, r3, #1
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80057e8:	b29b      	uxth	r3, r3
 80057ea:	3b01      	subs	r3, #1
 80057ec:	b29a      	uxth	r2, r3
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while (hspi->TxXferCount > 0U)
 80057f2:	e02d      	b.n	8005850 <HAL_SPI_Transmit+0x240>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	689b      	ldr	r3, [r3, #8]
 80057fa:	2202      	movs	r2, #2
 80057fc:	4013      	ands	r3, r2
 80057fe:	2b02      	cmp	r3, #2
 8005800:	d113      	bne.n	800582a <HAL_SPI_Transmit+0x21a>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	330c      	adds	r3, #12
 800580c:	7812      	ldrb	r2, [r2, #0]
 800580e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005814:	1c5a      	adds	r2, r3, #1
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800581e:	b29b      	uxth	r3, r3
 8005820:	3b01      	subs	r3, #1
 8005822:	b29a      	uxth	r2, r3
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005828:	e012      	b.n	8005850 <HAL_SPI_Transmit+0x240>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800582a:	f7fe f9fd 	bl	8003c28 <HAL_GetTick>
 800582e:	0002      	movs	r2, r0
 8005830:	69bb      	ldr	r3, [r7, #24]
 8005832:	1ad3      	subs	r3, r2, r3
 8005834:	683a      	ldr	r2, [r7, #0]
 8005836:	429a      	cmp	r2, r3
 8005838:	d802      	bhi.n	8005840 <HAL_SPI_Transmit+0x230>
 800583a:	683b      	ldr	r3, [r7, #0]
 800583c:	3301      	adds	r3, #1
 800583e:	d102      	bne.n	8005846 <HAL_SPI_Transmit+0x236>
 8005840:	683b      	ldr	r3, [r7, #0]
 8005842:	2b00      	cmp	r3, #0
 8005844:	d104      	bne.n	8005850 <HAL_SPI_Transmit+0x240>
        {
          errorcode = HAL_TIMEOUT;
 8005846:	231f      	movs	r3, #31
 8005848:	18fb      	adds	r3, r7, r3
 800584a:	2203      	movs	r2, #3
 800584c:	701a      	strb	r2, [r3, #0]
          goto error;
 800584e:	e028      	b.n	80058a2 <HAL_SPI_Transmit+0x292>
    while (hspi->TxXferCount > 0U)
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005854:	b29b      	uxth	r3, r3
 8005856:	2b00      	cmp	r3, #0
 8005858:	d1cc      	bne.n	80057f4 <HAL_SPI_Transmit+0x1e4>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800585a:	69ba      	ldr	r2, [r7, #24]
 800585c:	6839      	ldr	r1, [r7, #0]
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	0018      	movs	r0, r3
 8005862:	f000 f95d 	bl	8005b20 <SPI_EndRxTxTransaction>
 8005866:	1e03      	subs	r3, r0, #0
 8005868:	d002      	beq.n	8005870 <HAL_SPI_Transmit+0x260>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	2220      	movs	r2, #32
 800586e:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	689b      	ldr	r3, [r3, #8]
 8005874:	2b00      	cmp	r3, #0
 8005876:	d10a      	bne.n	800588e <HAL_SPI_Transmit+0x27e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005878:	2300      	movs	r3, #0
 800587a:	613b      	str	r3, [r7, #16]
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	68db      	ldr	r3, [r3, #12]
 8005882:	613b      	str	r3, [r7, #16]
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	689b      	ldr	r3, [r3, #8]
 800588a:	613b      	str	r3, [r7, #16]
 800588c:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005892:	2b00      	cmp	r3, #0
 8005894:	d004      	beq.n	80058a0 <HAL_SPI_Transmit+0x290>
  {
    errorcode = HAL_ERROR;
 8005896:	231f      	movs	r3, #31
 8005898:	18fb      	adds	r3, r7, r3
 800589a:	2201      	movs	r2, #1
 800589c:	701a      	strb	r2, [r3, #0]
 800589e:	e000      	b.n	80058a2 <HAL_SPI_Transmit+0x292>
  }

error:
 80058a0:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	225d      	movs	r2, #93	; 0x5d
 80058a6:	2101      	movs	r1, #1
 80058a8:	5499      	strb	r1, [r3, r2]
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	225c      	movs	r2, #92	; 0x5c
 80058ae:	2100      	movs	r1, #0
 80058b0:	5499      	strb	r1, [r3, r2]
  return errorcode;
 80058b2:	231f      	movs	r3, #31
 80058b4:	18fb      	adds	r3, r7, r3
 80058b6:	781b      	ldrb	r3, [r3, #0]
}
 80058b8:	0018      	movs	r0, r3
 80058ba:	46bd      	mov	sp, r7
 80058bc:	b008      	add	sp, #32
 80058be:	bd80      	pop	{r7, pc}

080058c0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80058c0:	b580      	push	{r7, lr}
 80058c2:	b088      	sub	sp, #32
 80058c4:	af00      	add	r7, sp, #0
 80058c6:	60f8      	str	r0, [r7, #12]
 80058c8:	60b9      	str	r1, [r7, #8]
 80058ca:	603b      	str	r3, [r7, #0]
 80058cc:	1dfb      	adds	r3, r7, #7
 80058ce:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80058d0:	f7fe f9aa 	bl	8003c28 <HAL_GetTick>
 80058d4:	0002      	movs	r2, r0
 80058d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058d8:	1a9b      	subs	r3, r3, r2
 80058da:	683a      	ldr	r2, [r7, #0]
 80058dc:	18d3      	adds	r3, r2, r3
 80058de:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80058e0:	f7fe f9a2 	bl	8003c28 <HAL_GetTick>
 80058e4:	0003      	movs	r3, r0
 80058e6:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80058e8:	4b3a      	ldr	r3, [pc, #232]	; (80059d4 <SPI_WaitFlagStateUntilTimeout+0x114>)
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	015b      	lsls	r3, r3, #5
 80058ee:	0d1b      	lsrs	r3, r3, #20
 80058f0:	69fa      	ldr	r2, [r7, #28]
 80058f2:	4353      	muls	r3, r2
 80058f4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80058f6:	e058      	b.n	80059aa <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 80058f8:	683b      	ldr	r3, [r7, #0]
 80058fa:	3301      	adds	r3, #1
 80058fc:	d055      	beq.n	80059aa <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80058fe:	f7fe f993 	bl	8003c28 <HAL_GetTick>
 8005902:	0002      	movs	r2, r0
 8005904:	69bb      	ldr	r3, [r7, #24]
 8005906:	1ad3      	subs	r3, r2, r3
 8005908:	69fa      	ldr	r2, [r7, #28]
 800590a:	429a      	cmp	r2, r3
 800590c:	d902      	bls.n	8005914 <SPI_WaitFlagStateUntilTimeout+0x54>
 800590e:	69fb      	ldr	r3, [r7, #28]
 8005910:	2b00      	cmp	r3, #0
 8005912:	d142      	bne.n	800599a <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	685a      	ldr	r2, [r3, #4]
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	21e0      	movs	r1, #224	; 0xe0
 8005920:	438a      	bics	r2, r1
 8005922:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	685a      	ldr	r2, [r3, #4]
 8005928:	2382      	movs	r3, #130	; 0x82
 800592a:	005b      	lsls	r3, r3, #1
 800592c:	429a      	cmp	r2, r3
 800592e:	d113      	bne.n	8005958 <SPI_WaitFlagStateUntilTimeout+0x98>
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	689a      	ldr	r2, [r3, #8]
 8005934:	2380      	movs	r3, #128	; 0x80
 8005936:	021b      	lsls	r3, r3, #8
 8005938:	429a      	cmp	r2, r3
 800593a:	d005      	beq.n	8005948 <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	689a      	ldr	r2, [r3, #8]
 8005940:	2380      	movs	r3, #128	; 0x80
 8005942:	00db      	lsls	r3, r3, #3
 8005944:	429a      	cmp	r2, r3
 8005946:	d107      	bne.n	8005958 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	681a      	ldr	r2, [r3, #0]
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	2140      	movs	r1, #64	; 0x40
 8005954:	438a      	bics	r2, r1
 8005956:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800595c:	2380      	movs	r3, #128	; 0x80
 800595e:	019b      	lsls	r3, r3, #6
 8005960:	429a      	cmp	r2, r3
 8005962:	d110      	bne.n	8005986 <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	681a      	ldr	r2, [r3, #0]
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	491a      	ldr	r1, [pc, #104]	; (80059d8 <SPI_WaitFlagStateUntilTimeout+0x118>)
 8005970:	400a      	ands	r2, r1
 8005972:	601a      	str	r2, [r3, #0]
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	681a      	ldr	r2, [r3, #0]
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	2180      	movs	r1, #128	; 0x80
 8005980:	0189      	lsls	r1, r1, #6
 8005982:	430a      	orrs	r2, r1
 8005984:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	225d      	movs	r2, #93	; 0x5d
 800598a:	2101      	movs	r1, #1
 800598c:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	225c      	movs	r2, #92	; 0x5c
 8005992:	2100      	movs	r1, #0
 8005994:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8005996:	2303      	movs	r3, #3
 8005998:	e017      	b.n	80059ca <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800599a:	697b      	ldr	r3, [r7, #20]
 800599c:	2b00      	cmp	r3, #0
 800599e:	d101      	bne.n	80059a4 <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 80059a0:	2300      	movs	r3, #0
 80059a2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80059a4:	697b      	ldr	r3, [r7, #20]
 80059a6:	3b01      	subs	r3, #1
 80059a8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	689b      	ldr	r3, [r3, #8]
 80059b0:	68ba      	ldr	r2, [r7, #8]
 80059b2:	4013      	ands	r3, r2
 80059b4:	68ba      	ldr	r2, [r7, #8]
 80059b6:	1ad3      	subs	r3, r2, r3
 80059b8:	425a      	negs	r2, r3
 80059ba:	4153      	adcs	r3, r2
 80059bc:	b2db      	uxtb	r3, r3
 80059be:	001a      	movs	r2, r3
 80059c0:	1dfb      	adds	r3, r7, #7
 80059c2:	781b      	ldrb	r3, [r3, #0]
 80059c4:	429a      	cmp	r2, r3
 80059c6:	d197      	bne.n	80058f8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80059c8:	2300      	movs	r3, #0
}
 80059ca:	0018      	movs	r0, r3
 80059cc:	46bd      	mov	sp, r7
 80059ce:	b008      	add	sp, #32
 80059d0:	bd80      	pop	{r7, pc}
 80059d2:	46c0      	nop			; (mov r8, r8)
 80059d4:	2000201c 	.word	0x2000201c
 80059d8:	ffffdfff 	.word	0xffffdfff

080059dc <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80059dc:	b580      	push	{r7, lr}
 80059de:	b08a      	sub	sp, #40	; 0x28
 80059e0:	af00      	add	r7, sp, #0
 80059e2:	60f8      	str	r0, [r7, #12]
 80059e4:	60b9      	str	r1, [r7, #8]
 80059e6:	607a      	str	r2, [r7, #4]
 80059e8:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  * ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80059ea:	2317      	movs	r3, #23
 80059ec:	18fb      	adds	r3, r7, r3
 80059ee:	2200      	movs	r2, #0
 80059f0:	701a      	strb	r2, [r3, #0]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80059f2:	f7fe f919 	bl	8003c28 <HAL_GetTick>
 80059f6:	0002      	movs	r2, r0
 80059f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059fa:	1a9b      	subs	r3, r3, r2
 80059fc:	683a      	ldr	r2, [r7, #0]
 80059fe:	18d3      	adds	r3, r2, r3
 8005a00:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8005a02:	f7fe f911 	bl	8003c28 <HAL_GetTick>
 8005a06:	0003      	movs	r3, r0
 8005a08:	623b      	str	r3, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	330c      	adds	r3, #12
 8005a10:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8005a12:	4b41      	ldr	r3, [pc, #260]	; (8005b18 <SPI_WaitFifoStateUntilTimeout+0x13c>)
 8005a14:	681a      	ldr	r2, [r3, #0]
 8005a16:	0013      	movs	r3, r2
 8005a18:	009b      	lsls	r3, r3, #2
 8005a1a:	189b      	adds	r3, r3, r2
 8005a1c:	00da      	lsls	r2, r3, #3
 8005a1e:	1ad3      	subs	r3, r2, r3
 8005a20:	0d1b      	lsrs	r3, r3, #20
 8005a22:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005a24:	4353      	muls	r3, r2
 8005a26:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8005a28:	e068      	b.n	8005afc <SPI_WaitFifoStateUntilTimeout+0x120>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8005a2a:	68ba      	ldr	r2, [r7, #8]
 8005a2c:	23c0      	movs	r3, #192	; 0xc0
 8005a2e:	00db      	lsls	r3, r3, #3
 8005a30:	429a      	cmp	r2, r3
 8005a32:	d10a      	bne.n	8005a4a <SPI_WaitFifoStateUntilTimeout+0x6e>
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d107      	bne.n	8005a4a <SPI_WaitFifoStateUntilTimeout+0x6e>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8005a3a:	69fb      	ldr	r3, [r7, #28]
 8005a3c:	781b      	ldrb	r3, [r3, #0]
 8005a3e:	b2da      	uxtb	r2, r3
 8005a40:	2117      	movs	r1, #23
 8005a42:	187b      	adds	r3, r7, r1
 8005a44:	701a      	strb	r2, [r3, #0]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8005a46:	187b      	adds	r3, r7, r1
 8005a48:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 8005a4a:	683b      	ldr	r3, [r7, #0]
 8005a4c:	3301      	adds	r3, #1
 8005a4e:	d055      	beq.n	8005afc <SPI_WaitFifoStateUntilTimeout+0x120>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005a50:	f7fe f8ea 	bl	8003c28 <HAL_GetTick>
 8005a54:	0002      	movs	r2, r0
 8005a56:	6a3b      	ldr	r3, [r7, #32]
 8005a58:	1ad3      	subs	r3, r2, r3
 8005a5a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005a5c:	429a      	cmp	r2, r3
 8005a5e:	d902      	bls.n	8005a66 <SPI_WaitFifoStateUntilTimeout+0x8a>
 8005a60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d142      	bne.n	8005aec <SPI_WaitFifoStateUntilTimeout+0x110>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	685a      	ldr	r2, [r3, #4]
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	21e0      	movs	r1, #224	; 0xe0
 8005a72:	438a      	bics	r2, r1
 8005a74:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	685a      	ldr	r2, [r3, #4]
 8005a7a:	2382      	movs	r3, #130	; 0x82
 8005a7c:	005b      	lsls	r3, r3, #1
 8005a7e:	429a      	cmp	r2, r3
 8005a80:	d113      	bne.n	8005aaa <SPI_WaitFifoStateUntilTimeout+0xce>
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	689a      	ldr	r2, [r3, #8]
 8005a86:	2380      	movs	r3, #128	; 0x80
 8005a88:	021b      	lsls	r3, r3, #8
 8005a8a:	429a      	cmp	r2, r3
 8005a8c:	d005      	beq.n	8005a9a <SPI_WaitFifoStateUntilTimeout+0xbe>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	689a      	ldr	r2, [r3, #8]
 8005a92:	2380      	movs	r3, #128	; 0x80
 8005a94:	00db      	lsls	r3, r3, #3
 8005a96:	429a      	cmp	r2, r3
 8005a98:	d107      	bne.n	8005aaa <SPI_WaitFifoStateUntilTimeout+0xce>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	681a      	ldr	r2, [r3, #0]
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	2140      	movs	r1, #64	; 0x40
 8005aa6:	438a      	bics	r2, r1
 8005aa8:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005aae:	2380      	movs	r3, #128	; 0x80
 8005ab0:	019b      	lsls	r3, r3, #6
 8005ab2:	429a      	cmp	r2, r3
 8005ab4:	d110      	bne.n	8005ad8 <SPI_WaitFifoStateUntilTimeout+0xfc>
        {
          SPI_RESET_CRC(hspi);
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	681a      	ldr	r2, [r3, #0]
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	4916      	ldr	r1, [pc, #88]	; (8005b1c <SPI_WaitFifoStateUntilTimeout+0x140>)
 8005ac2:	400a      	ands	r2, r1
 8005ac4:	601a      	str	r2, [r3, #0]
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	681a      	ldr	r2, [r3, #0]
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	2180      	movs	r1, #128	; 0x80
 8005ad2:	0189      	lsls	r1, r1, #6
 8005ad4:	430a      	orrs	r2, r1
 8005ad6:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	225d      	movs	r2, #93	; 0x5d
 8005adc:	2101      	movs	r1, #1
 8005ade:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	225c      	movs	r2, #92	; 0x5c
 8005ae4:	2100      	movs	r1, #0
 8005ae6:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8005ae8:	2303      	movs	r3, #3
 8005aea:	e010      	b.n	8005b0e <SPI_WaitFifoStateUntilTimeout+0x132>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8005aec:	69bb      	ldr	r3, [r7, #24]
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d101      	bne.n	8005af6 <SPI_WaitFifoStateUntilTimeout+0x11a>
      {
        tmp_timeout = 0U;
 8005af2:	2300      	movs	r3, #0
 8005af4:	627b      	str	r3, [r7, #36]	; 0x24
      }      
      count--;
 8005af6:	69bb      	ldr	r3, [r7, #24]
 8005af8:	3b01      	subs	r3, #1
 8005afa:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	689b      	ldr	r3, [r3, #8]
 8005b02:	68ba      	ldr	r2, [r7, #8]
 8005b04:	4013      	ands	r3, r2
 8005b06:	687a      	ldr	r2, [r7, #4]
 8005b08:	429a      	cmp	r2, r3
 8005b0a:	d18e      	bne.n	8005a2a <SPI_WaitFifoStateUntilTimeout+0x4e>
    }
  }

  return HAL_OK;
 8005b0c:	2300      	movs	r3, #0
}
 8005b0e:	0018      	movs	r0, r3
 8005b10:	46bd      	mov	sp, r7
 8005b12:	b00a      	add	sp, #40	; 0x28
 8005b14:	bd80      	pop	{r7, pc}
 8005b16:	46c0      	nop			; (mov r8, r8)
 8005b18:	2000201c 	.word	0x2000201c
 8005b1c:	ffffdfff 	.word	0xffffdfff

08005b20 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005b20:	b580      	push	{r7, lr}
 8005b22:	b086      	sub	sp, #24
 8005b24:	af02      	add	r7, sp, #8
 8005b26:	60f8      	str	r0, [r7, #12]
 8005b28:	60b9      	str	r1, [r7, #8]
 8005b2a:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005b2c:	68ba      	ldr	r2, [r7, #8]
 8005b2e:	23c0      	movs	r3, #192	; 0xc0
 8005b30:	0159      	lsls	r1, r3, #5
 8005b32:	68f8      	ldr	r0, [r7, #12]
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	9300      	str	r3, [sp, #0]
 8005b38:	0013      	movs	r3, r2
 8005b3a:	2200      	movs	r2, #0
 8005b3c:	f7ff ff4e 	bl	80059dc <SPI_WaitFifoStateUntilTimeout>
 8005b40:	1e03      	subs	r3, r0, #0
 8005b42:	d007      	beq.n	8005b54 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005b48:	2220      	movs	r2, #32
 8005b4a:	431a      	orrs	r2, r3
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005b50:	2303      	movs	r3, #3
 8005b52:	e027      	b.n	8005ba4 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005b54:	68ba      	ldr	r2, [r7, #8]
 8005b56:	68f8      	ldr	r0, [r7, #12]
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	9300      	str	r3, [sp, #0]
 8005b5c:	0013      	movs	r3, r2
 8005b5e:	2200      	movs	r2, #0
 8005b60:	2180      	movs	r1, #128	; 0x80
 8005b62:	f7ff fead 	bl	80058c0 <SPI_WaitFlagStateUntilTimeout>
 8005b66:	1e03      	subs	r3, r0, #0
 8005b68:	d007      	beq.n	8005b7a <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005b6e:	2220      	movs	r2, #32
 8005b70:	431a      	orrs	r2, r3
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005b76:	2303      	movs	r3, #3
 8005b78:	e014      	b.n	8005ba4 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005b7a:	68ba      	ldr	r2, [r7, #8]
 8005b7c:	23c0      	movs	r3, #192	; 0xc0
 8005b7e:	00d9      	lsls	r1, r3, #3
 8005b80:	68f8      	ldr	r0, [r7, #12]
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	9300      	str	r3, [sp, #0]
 8005b86:	0013      	movs	r3, r2
 8005b88:	2200      	movs	r2, #0
 8005b8a:	f7ff ff27 	bl	80059dc <SPI_WaitFifoStateUntilTimeout>
 8005b8e:	1e03      	subs	r3, r0, #0
 8005b90:	d007      	beq.n	8005ba2 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005b96:	2220      	movs	r2, #32
 8005b98:	431a      	orrs	r2, r3
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005b9e:	2303      	movs	r3, #3
 8005ba0:	e000      	b.n	8005ba4 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8005ba2:	2300      	movs	r3, #0
}
 8005ba4:	0018      	movs	r0, r3
 8005ba6:	46bd      	mov	sp, r7
 8005ba8:	b004      	add	sp, #16
 8005baa:	bd80      	pop	{r7, pc}

08005bac <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005bac:	b580      	push	{r7, lr}
 8005bae:	b082      	sub	sp, #8
 8005bb0:	af00      	add	r7, sp, #0
 8005bb2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d101      	bne.n	8005bbe <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005bba:	2301      	movs	r3, #1
 8005bbc:	e042      	b.n	8005c44 <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	223d      	movs	r2, #61	; 0x3d
 8005bc2:	5c9b      	ldrb	r3, [r3, r2]
 8005bc4:	b2db      	uxtb	r3, r3
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d107      	bne.n	8005bda <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	223c      	movs	r2, #60	; 0x3c
 8005bce:	2100      	movs	r1, #0
 8005bd0:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	0018      	movs	r0, r3
 8005bd6:	f7fd fea9 	bl	800392c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	223d      	movs	r2, #61	; 0x3d
 8005bde:	2102      	movs	r1, #2
 8005be0:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	681a      	ldr	r2, [r3, #0]
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	3304      	adds	r3, #4
 8005bea:	0019      	movs	r1, r3
 8005bec:	0010      	movs	r0, r2
 8005bee:	f000 f877 	bl	8005ce0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	2246      	movs	r2, #70	; 0x46
 8005bf6:	2101      	movs	r1, #1
 8005bf8:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	223e      	movs	r2, #62	; 0x3e
 8005bfe:	2101      	movs	r1, #1
 8005c00:	5499      	strb	r1, [r3, r2]
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	223f      	movs	r2, #63	; 0x3f
 8005c06:	2101      	movs	r1, #1
 8005c08:	5499      	strb	r1, [r3, r2]
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	2240      	movs	r2, #64	; 0x40
 8005c0e:	2101      	movs	r1, #1
 8005c10:	5499      	strb	r1, [r3, r2]
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	2241      	movs	r2, #65	; 0x41
 8005c16:	2101      	movs	r1, #1
 8005c18:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	2242      	movs	r2, #66	; 0x42
 8005c1e:	2101      	movs	r1, #1
 8005c20:	5499      	strb	r1, [r3, r2]
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	2243      	movs	r2, #67	; 0x43
 8005c26:	2101      	movs	r1, #1
 8005c28:	5499      	strb	r1, [r3, r2]
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	2244      	movs	r2, #68	; 0x44
 8005c2e:	2101      	movs	r1, #1
 8005c30:	5499      	strb	r1, [r3, r2]
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	2245      	movs	r2, #69	; 0x45
 8005c36:	2101      	movs	r1, #1
 8005c38:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	223d      	movs	r2, #61	; 0x3d
 8005c3e:	2101      	movs	r1, #1
 8005c40:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005c42:	2300      	movs	r3, #0
}
 8005c44:	0018      	movs	r0, r3
 8005c46:	46bd      	mov	sp, r7
 8005c48:	b002      	add	sp, #8
 8005c4a:	bd80      	pop	{r7, pc}

08005c4c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8005c4c:	b580      	push	{r7, lr}
 8005c4e:	b084      	sub	sp, #16
 8005c50:	af00      	add	r7, sp, #0
 8005c52:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	223d      	movs	r2, #61	; 0x3d
 8005c58:	5c9b      	ldrb	r3, [r3, r2]
 8005c5a:	b2db      	uxtb	r3, r3
 8005c5c:	2b01      	cmp	r3, #1
 8005c5e:	d001      	beq.n	8005c64 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8005c60:	2301      	movs	r3, #1
 8005c62:	e033      	b.n	8005ccc <HAL_TIM_Base_Start+0x80>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	223d      	movs	r2, #61	; 0x3d
 8005c68:	2102      	movs	r1, #2
 8005c6a:	5499      	strb	r1, [r3, r2]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	4a18      	ldr	r2, [pc, #96]	; (8005cd4 <HAL_TIM_Base_Start+0x88>)
 8005c72:	4293      	cmp	r3, r2
 8005c74:	d00f      	beq.n	8005c96 <HAL_TIM_Base_Start+0x4a>
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	681a      	ldr	r2, [r3, #0]
 8005c7a:	2380      	movs	r3, #128	; 0x80
 8005c7c:	05db      	lsls	r3, r3, #23
 8005c7e:	429a      	cmp	r2, r3
 8005c80:	d009      	beq.n	8005c96 <HAL_TIM_Base_Start+0x4a>
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	4a14      	ldr	r2, [pc, #80]	; (8005cd8 <HAL_TIM_Base_Start+0x8c>)
 8005c88:	4293      	cmp	r3, r2
 8005c8a:	d004      	beq.n	8005c96 <HAL_TIM_Base_Start+0x4a>
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	4a12      	ldr	r2, [pc, #72]	; (8005cdc <HAL_TIM_Base_Start+0x90>)
 8005c92:	4293      	cmp	r3, r2
 8005c94:	d111      	bne.n	8005cba <HAL_TIM_Base_Start+0x6e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	689b      	ldr	r3, [r3, #8]
 8005c9c:	2207      	movs	r2, #7
 8005c9e:	4013      	ands	r3, r2
 8005ca0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	2b06      	cmp	r3, #6
 8005ca6:	d010      	beq.n	8005cca <HAL_TIM_Base_Start+0x7e>
    {
      __HAL_TIM_ENABLE(htim);
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	681a      	ldr	r2, [r3, #0]
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	2101      	movs	r1, #1
 8005cb4:	430a      	orrs	r2, r1
 8005cb6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005cb8:	e007      	b.n	8005cca <HAL_TIM_Base_Start+0x7e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	681a      	ldr	r2, [r3, #0]
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	2101      	movs	r1, #1
 8005cc6:	430a      	orrs	r2, r1
 8005cc8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005cca:	2300      	movs	r3, #0
}
 8005ccc:	0018      	movs	r0, r3
 8005cce:	46bd      	mov	sp, r7
 8005cd0:	b004      	add	sp, #16
 8005cd2:	bd80      	pop	{r7, pc}
 8005cd4:	40012c00 	.word	0x40012c00
 8005cd8:	40000400 	.word	0x40000400
 8005cdc:	40014000 	.word	0x40014000

08005ce0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005ce0:	b580      	push	{r7, lr}
 8005ce2:	b084      	sub	sp, #16
 8005ce4:	af00      	add	r7, sp, #0
 8005ce6:	6078      	str	r0, [r7, #4]
 8005ce8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	4a34      	ldr	r2, [pc, #208]	; (8005dc4 <TIM_Base_SetConfig+0xe4>)
 8005cf4:	4293      	cmp	r3, r2
 8005cf6:	d008      	beq.n	8005d0a <TIM_Base_SetConfig+0x2a>
 8005cf8:	687a      	ldr	r2, [r7, #4]
 8005cfa:	2380      	movs	r3, #128	; 0x80
 8005cfc:	05db      	lsls	r3, r3, #23
 8005cfe:	429a      	cmp	r2, r3
 8005d00:	d003      	beq.n	8005d0a <TIM_Base_SetConfig+0x2a>
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	4a30      	ldr	r2, [pc, #192]	; (8005dc8 <TIM_Base_SetConfig+0xe8>)
 8005d06:	4293      	cmp	r3, r2
 8005d08:	d108      	bne.n	8005d1c <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	2270      	movs	r2, #112	; 0x70
 8005d0e:	4393      	bics	r3, r2
 8005d10:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005d12:	683b      	ldr	r3, [r7, #0]
 8005d14:	685b      	ldr	r3, [r3, #4]
 8005d16:	68fa      	ldr	r2, [r7, #12]
 8005d18:	4313      	orrs	r3, r2
 8005d1a:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	4a29      	ldr	r2, [pc, #164]	; (8005dc4 <TIM_Base_SetConfig+0xe4>)
 8005d20:	4293      	cmp	r3, r2
 8005d22:	d018      	beq.n	8005d56 <TIM_Base_SetConfig+0x76>
 8005d24:	687a      	ldr	r2, [r7, #4]
 8005d26:	2380      	movs	r3, #128	; 0x80
 8005d28:	05db      	lsls	r3, r3, #23
 8005d2a:	429a      	cmp	r2, r3
 8005d2c:	d013      	beq.n	8005d56 <TIM_Base_SetConfig+0x76>
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	4a25      	ldr	r2, [pc, #148]	; (8005dc8 <TIM_Base_SetConfig+0xe8>)
 8005d32:	4293      	cmp	r3, r2
 8005d34:	d00f      	beq.n	8005d56 <TIM_Base_SetConfig+0x76>
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	4a24      	ldr	r2, [pc, #144]	; (8005dcc <TIM_Base_SetConfig+0xec>)
 8005d3a:	4293      	cmp	r3, r2
 8005d3c:	d00b      	beq.n	8005d56 <TIM_Base_SetConfig+0x76>
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	4a23      	ldr	r2, [pc, #140]	; (8005dd0 <TIM_Base_SetConfig+0xf0>)
 8005d42:	4293      	cmp	r3, r2
 8005d44:	d007      	beq.n	8005d56 <TIM_Base_SetConfig+0x76>
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	4a22      	ldr	r2, [pc, #136]	; (8005dd4 <TIM_Base_SetConfig+0xf4>)
 8005d4a:	4293      	cmp	r3, r2
 8005d4c:	d003      	beq.n	8005d56 <TIM_Base_SetConfig+0x76>
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	4a21      	ldr	r2, [pc, #132]	; (8005dd8 <TIM_Base_SetConfig+0xf8>)
 8005d52:	4293      	cmp	r3, r2
 8005d54:	d108      	bne.n	8005d68 <TIM_Base_SetConfig+0x88>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	4a20      	ldr	r2, [pc, #128]	; (8005ddc <TIM_Base_SetConfig+0xfc>)
 8005d5a:	4013      	ands	r3, r2
 8005d5c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005d5e:	683b      	ldr	r3, [r7, #0]
 8005d60:	68db      	ldr	r3, [r3, #12]
 8005d62:	68fa      	ldr	r2, [r7, #12]
 8005d64:	4313      	orrs	r3, r2
 8005d66:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	2280      	movs	r2, #128	; 0x80
 8005d6c:	4393      	bics	r3, r2
 8005d6e:	001a      	movs	r2, r3
 8005d70:	683b      	ldr	r3, [r7, #0]
 8005d72:	695b      	ldr	r3, [r3, #20]
 8005d74:	4313      	orrs	r3, r2
 8005d76:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	68fa      	ldr	r2, [r7, #12]
 8005d7c:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005d7e:	683b      	ldr	r3, [r7, #0]
 8005d80:	689a      	ldr	r2, [r3, #8]
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005d86:	683b      	ldr	r3, [r7, #0]
 8005d88:	681a      	ldr	r2, [r3, #0]
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	4a0c      	ldr	r2, [pc, #48]	; (8005dc4 <TIM_Base_SetConfig+0xe4>)
 8005d92:	4293      	cmp	r3, r2
 8005d94:	d00b      	beq.n	8005dae <TIM_Base_SetConfig+0xce>
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	4a0d      	ldr	r2, [pc, #52]	; (8005dd0 <TIM_Base_SetConfig+0xf0>)
 8005d9a:	4293      	cmp	r3, r2
 8005d9c:	d007      	beq.n	8005dae <TIM_Base_SetConfig+0xce>
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	4a0c      	ldr	r2, [pc, #48]	; (8005dd4 <TIM_Base_SetConfig+0xf4>)
 8005da2:	4293      	cmp	r3, r2
 8005da4:	d003      	beq.n	8005dae <TIM_Base_SetConfig+0xce>
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	4a0b      	ldr	r2, [pc, #44]	; (8005dd8 <TIM_Base_SetConfig+0xf8>)
 8005daa:	4293      	cmp	r3, r2
 8005dac:	d103      	bne.n	8005db6 <TIM_Base_SetConfig+0xd6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005dae:	683b      	ldr	r3, [r7, #0]
 8005db0:	691a      	ldr	r2, [r3, #16]
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	2201      	movs	r2, #1
 8005dba:	615a      	str	r2, [r3, #20]
}
 8005dbc:	46c0      	nop			; (mov r8, r8)
 8005dbe:	46bd      	mov	sp, r7
 8005dc0:	b004      	add	sp, #16
 8005dc2:	bd80      	pop	{r7, pc}
 8005dc4:	40012c00 	.word	0x40012c00
 8005dc8:	40000400 	.word	0x40000400
 8005dcc:	40002000 	.word	0x40002000
 8005dd0:	40014000 	.word	0x40014000
 8005dd4:	40014400 	.word	0x40014400
 8005dd8:	40014800 	.word	0x40014800
 8005ddc:	fffffcff 	.word	0xfffffcff

08005de0 <__errno>:
 8005de0:	4b01      	ldr	r3, [pc, #4]	; (8005de8 <__errno+0x8>)
 8005de2:	6818      	ldr	r0, [r3, #0]
 8005de4:	4770      	bx	lr
 8005de6:	46c0      	nop			; (mov r8, r8)
 8005de8:	20002028 	.word	0x20002028

08005dec <__libc_init_array>:
 8005dec:	b570      	push	{r4, r5, r6, lr}
 8005dee:	2600      	movs	r6, #0
 8005df0:	4d0c      	ldr	r5, [pc, #48]	; (8005e24 <__libc_init_array+0x38>)
 8005df2:	4c0d      	ldr	r4, [pc, #52]	; (8005e28 <__libc_init_array+0x3c>)
 8005df4:	1b64      	subs	r4, r4, r5
 8005df6:	10a4      	asrs	r4, r4, #2
 8005df8:	42a6      	cmp	r6, r4
 8005dfa:	d109      	bne.n	8005e10 <__libc_init_array+0x24>
 8005dfc:	2600      	movs	r6, #0
 8005dfe:	f002 ffbd 	bl	8008d7c <_init>
 8005e02:	4d0a      	ldr	r5, [pc, #40]	; (8005e2c <__libc_init_array+0x40>)
 8005e04:	4c0a      	ldr	r4, [pc, #40]	; (8005e30 <__libc_init_array+0x44>)
 8005e06:	1b64      	subs	r4, r4, r5
 8005e08:	10a4      	asrs	r4, r4, #2
 8005e0a:	42a6      	cmp	r6, r4
 8005e0c:	d105      	bne.n	8005e1a <__libc_init_array+0x2e>
 8005e0e:	bd70      	pop	{r4, r5, r6, pc}
 8005e10:	00b3      	lsls	r3, r6, #2
 8005e12:	58eb      	ldr	r3, [r5, r3]
 8005e14:	4798      	blx	r3
 8005e16:	3601      	adds	r6, #1
 8005e18:	e7ee      	b.n	8005df8 <__libc_init_array+0xc>
 8005e1a:	00b3      	lsls	r3, r6, #2
 8005e1c:	58eb      	ldr	r3, [r5, r3]
 8005e1e:	4798      	blx	r3
 8005e20:	3601      	adds	r6, #1
 8005e22:	e7f2      	b.n	8005e0a <__libc_init_array+0x1e>
 8005e24:	08009814 	.word	0x08009814
 8005e28:	08009814 	.word	0x08009814
 8005e2c:	08009814 	.word	0x08009814
 8005e30:	08009818 	.word	0x08009818

08005e34 <memset>:
 8005e34:	0003      	movs	r3, r0
 8005e36:	1882      	adds	r2, r0, r2
 8005e38:	4293      	cmp	r3, r2
 8005e3a:	d100      	bne.n	8005e3e <memset+0xa>
 8005e3c:	4770      	bx	lr
 8005e3e:	7019      	strb	r1, [r3, #0]
 8005e40:	3301      	adds	r3, #1
 8005e42:	e7f9      	b.n	8005e38 <memset+0x4>

08005e44 <__cvt>:
 8005e44:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005e46:	001e      	movs	r6, r3
 8005e48:	2300      	movs	r3, #0
 8005e4a:	0014      	movs	r4, r2
 8005e4c:	b08b      	sub	sp, #44	; 0x2c
 8005e4e:	429e      	cmp	r6, r3
 8005e50:	da04      	bge.n	8005e5c <__cvt+0x18>
 8005e52:	2180      	movs	r1, #128	; 0x80
 8005e54:	0609      	lsls	r1, r1, #24
 8005e56:	1873      	adds	r3, r6, r1
 8005e58:	001e      	movs	r6, r3
 8005e5a:	232d      	movs	r3, #45	; 0x2d
 8005e5c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8005e5e:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8005e60:	7013      	strb	r3, [r2, #0]
 8005e62:	2320      	movs	r3, #32
 8005e64:	2203      	movs	r2, #3
 8005e66:	439f      	bics	r7, r3
 8005e68:	2f46      	cmp	r7, #70	; 0x46
 8005e6a:	d007      	beq.n	8005e7c <__cvt+0x38>
 8005e6c:	003b      	movs	r3, r7
 8005e6e:	3b45      	subs	r3, #69	; 0x45
 8005e70:	4259      	negs	r1, r3
 8005e72:	414b      	adcs	r3, r1
 8005e74:	9910      	ldr	r1, [sp, #64]	; 0x40
 8005e76:	3a01      	subs	r2, #1
 8005e78:	18cb      	adds	r3, r1, r3
 8005e7a:	9310      	str	r3, [sp, #64]	; 0x40
 8005e7c:	ab09      	add	r3, sp, #36	; 0x24
 8005e7e:	9304      	str	r3, [sp, #16]
 8005e80:	ab08      	add	r3, sp, #32
 8005e82:	9303      	str	r3, [sp, #12]
 8005e84:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8005e86:	9200      	str	r2, [sp, #0]
 8005e88:	9302      	str	r3, [sp, #8]
 8005e8a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8005e8c:	0022      	movs	r2, r4
 8005e8e:	9301      	str	r3, [sp, #4]
 8005e90:	0033      	movs	r3, r6
 8005e92:	f000 fd0f 	bl	80068b4 <_dtoa_r>
 8005e96:	0005      	movs	r5, r0
 8005e98:	2f47      	cmp	r7, #71	; 0x47
 8005e9a:	d102      	bne.n	8005ea2 <__cvt+0x5e>
 8005e9c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005e9e:	07db      	lsls	r3, r3, #31
 8005ea0:	d528      	bpl.n	8005ef4 <__cvt+0xb0>
 8005ea2:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8005ea4:	18eb      	adds	r3, r5, r3
 8005ea6:	9307      	str	r3, [sp, #28]
 8005ea8:	2f46      	cmp	r7, #70	; 0x46
 8005eaa:	d114      	bne.n	8005ed6 <__cvt+0x92>
 8005eac:	782b      	ldrb	r3, [r5, #0]
 8005eae:	2b30      	cmp	r3, #48	; 0x30
 8005eb0:	d10c      	bne.n	8005ecc <__cvt+0x88>
 8005eb2:	2200      	movs	r2, #0
 8005eb4:	2300      	movs	r3, #0
 8005eb6:	0020      	movs	r0, r4
 8005eb8:	0031      	movs	r1, r6
 8005eba:	f7fa fac5 	bl	8000448 <__aeabi_dcmpeq>
 8005ebe:	2800      	cmp	r0, #0
 8005ec0:	d104      	bne.n	8005ecc <__cvt+0x88>
 8005ec2:	2301      	movs	r3, #1
 8005ec4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8005ec6:	1a9b      	subs	r3, r3, r2
 8005ec8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8005eca:	6013      	str	r3, [r2, #0]
 8005ecc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8005ece:	9a07      	ldr	r2, [sp, #28]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	18d3      	adds	r3, r2, r3
 8005ed4:	9307      	str	r3, [sp, #28]
 8005ed6:	2200      	movs	r2, #0
 8005ed8:	2300      	movs	r3, #0
 8005eda:	0020      	movs	r0, r4
 8005edc:	0031      	movs	r1, r6
 8005ede:	f7fa fab3 	bl	8000448 <__aeabi_dcmpeq>
 8005ee2:	2800      	cmp	r0, #0
 8005ee4:	d001      	beq.n	8005eea <__cvt+0xa6>
 8005ee6:	9b07      	ldr	r3, [sp, #28]
 8005ee8:	9309      	str	r3, [sp, #36]	; 0x24
 8005eea:	2230      	movs	r2, #48	; 0x30
 8005eec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005eee:	9907      	ldr	r1, [sp, #28]
 8005ef0:	428b      	cmp	r3, r1
 8005ef2:	d306      	bcc.n	8005f02 <__cvt+0xbe>
 8005ef4:	0028      	movs	r0, r5
 8005ef6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005ef8:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8005efa:	1b5b      	subs	r3, r3, r5
 8005efc:	6013      	str	r3, [r2, #0]
 8005efe:	b00b      	add	sp, #44	; 0x2c
 8005f00:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005f02:	1c59      	adds	r1, r3, #1
 8005f04:	9109      	str	r1, [sp, #36]	; 0x24
 8005f06:	701a      	strb	r2, [r3, #0]
 8005f08:	e7f0      	b.n	8005eec <__cvt+0xa8>

08005f0a <__exponent>:
 8005f0a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005f0c:	1c83      	adds	r3, r0, #2
 8005f0e:	b087      	sub	sp, #28
 8005f10:	9303      	str	r3, [sp, #12]
 8005f12:	0005      	movs	r5, r0
 8005f14:	000c      	movs	r4, r1
 8005f16:	232b      	movs	r3, #43	; 0x2b
 8005f18:	7002      	strb	r2, [r0, #0]
 8005f1a:	2900      	cmp	r1, #0
 8005f1c:	da01      	bge.n	8005f22 <__exponent+0x18>
 8005f1e:	424c      	negs	r4, r1
 8005f20:	3302      	adds	r3, #2
 8005f22:	706b      	strb	r3, [r5, #1]
 8005f24:	2c09      	cmp	r4, #9
 8005f26:	dd31      	ble.n	8005f8c <__exponent+0x82>
 8005f28:	270a      	movs	r7, #10
 8005f2a:	ab04      	add	r3, sp, #16
 8005f2c:	1dde      	adds	r6, r3, #7
 8005f2e:	0020      	movs	r0, r4
 8005f30:	0039      	movs	r1, r7
 8005f32:	9601      	str	r6, [sp, #4]
 8005f34:	f7fa fa72 	bl	800041c <__aeabi_idivmod>
 8005f38:	3e01      	subs	r6, #1
 8005f3a:	3130      	adds	r1, #48	; 0x30
 8005f3c:	0020      	movs	r0, r4
 8005f3e:	7031      	strb	r1, [r6, #0]
 8005f40:	0039      	movs	r1, r7
 8005f42:	9402      	str	r4, [sp, #8]
 8005f44:	f7fa f984 	bl	8000250 <__divsi3>
 8005f48:	9b02      	ldr	r3, [sp, #8]
 8005f4a:	0004      	movs	r4, r0
 8005f4c:	2b63      	cmp	r3, #99	; 0x63
 8005f4e:	dcee      	bgt.n	8005f2e <__exponent+0x24>
 8005f50:	9b01      	ldr	r3, [sp, #4]
 8005f52:	3430      	adds	r4, #48	; 0x30
 8005f54:	1e9a      	subs	r2, r3, #2
 8005f56:	0013      	movs	r3, r2
 8005f58:	9903      	ldr	r1, [sp, #12]
 8005f5a:	7014      	strb	r4, [r2, #0]
 8005f5c:	a804      	add	r0, sp, #16
 8005f5e:	3007      	adds	r0, #7
 8005f60:	4298      	cmp	r0, r3
 8005f62:	d80e      	bhi.n	8005f82 <__exponent+0x78>
 8005f64:	ab04      	add	r3, sp, #16
 8005f66:	3307      	adds	r3, #7
 8005f68:	2000      	movs	r0, #0
 8005f6a:	429a      	cmp	r2, r3
 8005f6c:	d804      	bhi.n	8005f78 <__exponent+0x6e>
 8005f6e:	ab04      	add	r3, sp, #16
 8005f70:	3009      	adds	r0, #9
 8005f72:	18c0      	adds	r0, r0, r3
 8005f74:	9b01      	ldr	r3, [sp, #4]
 8005f76:	1ac0      	subs	r0, r0, r3
 8005f78:	9b03      	ldr	r3, [sp, #12]
 8005f7a:	1818      	adds	r0, r3, r0
 8005f7c:	1b40      	subs	r0, r0, r5
 8005f7e:	b007      	add	sp, #28
 8005f80:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005f82:	7818      	ldrb	r0, [r3, #0]
 8005f84:	3301      	adds	r3, #1
 8005f86:	7008      	strb	r0, [r1, #0]
 8005f88:	3101      	adds	r1, #1
 8005f8a:	e7e7      	b.n	8005f5c <__exponent+0x52>
 8005f8c:	2330      	movs	r3, #48	; 0x30
 8005f8e:	18e4      	adds	r4, r4, r3
 8005f90:	70ab      	strb	r3, [r5, #2]
 8005f92:	1d28      	adds	r0, r5, #4
 8005f94:	70ec      	strb	r4, [r5, #3]
 8005f96:	e7f1      	b.n	8005f7c <__exponent+0x72>

08005f98 <_printf_float>:
 8005f98:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005f9a:	b095      	sub	sp, #84	; 0x54
 8005f9c:	000c      	movs	r4, r1
 8005f9e:	9209      	str	r2, [sp, #36]	; 0x24
 8005fa0:	001e      	movs	r6, r3
 8005fa2:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 8005fa4:	0007      	movs	r7, r0
 8005fa6:	f001 faaf 	bl	8007508 <_localeconv_r>
 8005faa:	6803      	ldr	r3, [r0, #0]
 8005fac:	0018      	movs	r0, r3
 8005fae:	930c      	str	r3, [sp, #48]	; 0x30
 8005fb0:	f7fa f8a8 	bl	8000104 <strlen>
 8005fb4:	2300      	movs	r3, #0
 8005fb6:	9312      	str	r3, [sp, #72]	; 0x48
 8005fb8:	7e23      	ldrb	r3, [r4, #24]
 8005fba:	2207      	movs	r2, #7
 8005fbc:	930a      	str	r3, [sp, #40]	; 0x28
 8005fbe:	6823      	ldr	r3, [r4, #0]
 8005fc0:	900e      	str	r0, [sp, #56]	; 0x38
 8005fc2:	930d      	str	r3, [sp, #52]	; 0x34
 8005fc4:	990d      	ldr	r1, [sp, #52]	; 0x34
 8005fc6:	682b      	ldr	r3, [r5, #0]
 8005fc8:	05c9      	lsls	r1, r1, #23
 8005fca:	d547      	bpl.n	800605c <_printf_float+0xc4>
 8005fcc:	189b      	adds	r3, r3, r2
 8005fce:	4393      	bics	r3, r2
 8005fd0:	001a      	movs	r2, r3
 8005fd2:	3208      	adds	r2, #8
 8005fd4:	602a      	str	r2, [r5, #0]
 8005fd6:	681a      	ldr	r2, [r3, #0]
 8005fd8:	685b      	ldr	r3, [r3, #4]
 8005fda:	64a2      	str	r2, [r4, #72]	; 0x48
 8005fdc:	64e3      	str	r3, [r4, #76]	; 0x4c
 8005fde:	2201      	movs	r2, #1
 8005fe0:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8005fe2:	6ce5      	ldr	r5, [r4, #76]	; 0x4c
 8005fe4:	930b      	str	r3, [sp, #44]	; 0x2c
 8005fe6:	006b      	lsls	r3, r5, #1
 8005fe8:	085b      	lsrs	r3, r3, #1
 8005fea:	930f      	str	r3, [sp, #60]	; 0x3c
 8005fec:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8005fee:	4ba7      	ldr	r3, [pc, #668]	; (800628c <_printf_float+0x2f4>)
 8005ff0:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8005ff2:	4252      	negs	r2, r2
 8005ff4:	f7fb ff92 	bl	8001f1c <__aeabi_dcmpun>
 8005ff8:	2800      	cmp	r0, #0
 8005ffa:	d131      	bne.n	8006060 <_printf_float+0xc8>
 8005ffc:	2201      	movs	r2, #1
 8005ffe:	4ba3      	ldr	r3, [pc, #652]	; (800628c <_printf_float+0x2f4>)
 8006000:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8006002:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8006004:	4252      	negs	r2, r2
 8006006:	f7fa fa2f 	bl	8000468 <__aeabi_dcmple>
 800600a:	2800      	cmp	r0, #0
 800600c:	d128      	bne.n	8006060 <_printf_float+0xc8>
 800600e:	2200      	movs	r2, #0
 8006010:	2300      	movs	r3, #0
 8006012:	0029      	movs	r1, r5
 8006014:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8006016:	f7fa fa1d 	bl	8000454 <__aeabi_dcmplt>
 800601a:	2800      	cmp	r0, #0
 800601c:	d003      	beq.n	8006026 <_printf_float+0x8e>
 800601e:	0023      	movs	r3, r4
 8006020:	222d      	movs	r2, #45	; 0x2d
 8006022:	3343      	adds	r3, #67	; 0x43
 8006024:	701a      	strb	r2, [r3, #0]
 8006026:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006028:	4d99      	ldr	r5, [pc, #612]	; (8006290 <_printf_float+0x2f8>)
 800602a:	2b47      	cmp	r3, #71	; 0x47
 800602c:	d900      	bls.n	8006030 <_printf_float+0x98>
 800602e:	4d99      	ldr	r5, [pc, #612]	; (8006294 <_printf_float+0x2fc>)
 8006030:	2303      	movs	r3, #3
 8006032:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006034:	6123      	str	r3, [r4, #16]
 8006036:	3301      	adds	r3, #1
 8006038:	439a      	bics	r2, r3
 800603a:	2300      	movs	r3, #0
 800603c:	6022      	str	r2, [r4, #0]
 800603e:	930b      	str	r3, [sp, #44]	; 0x2c
 8006040:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006042:	0021      	movs	r1, r4
 8006044:	0038      	movs	r0, r7
 8006046:	9600      	str	r6, [sp, #0]
 8006048:	aa13      	add	r2, sp, #76	; 0x4c
 800604a:	f000 f9e7 	bl	800641c <_printf_common>
 800604e:	1c43      	adds	r3, r0, #1
 8006050:	d000      	beq.n	8006054 <_printf_float+0xbc>
 8006052:	e0a2      	b.n	800619a <_printf_float+0x202>
 8006054:	2001      	movs	r0, #1
 8006056:	4240      	negs	r0, r0
 8006058:	b015      	add	sp, #84	; 0x54
 800605a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800605c:	3307      	adds	r3, #7
 800605e:	e7b6      	b.n	8005fce <_printf_float+0x36>
 8006060:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006062:	002b      	movs	r3, r5
 8006064:	0010      	movs	r0, r2
 8006066:	0029      	movs	r1, r5
 8006068:	f7fb ff58 	bl	8001f1c <__aeabi_dcmpun>
 800606c:	2800      	cmp	r0, #0
 800606e:	d00b      	beq.n	8006088 <_printf_float+0xf0>
 8006070:	2d00      	cmp	r5, #0
 8006072:	da03      	bge.n	800607c <_printf_float+0xe4>
 8006074:	0023      	movs	r3, r4
 8006076:	222d      	movs	r2, #45	; 0x2d
 8006078:	3343      	adds	r3, #67	; 0x43
 800607a:	701a      	strb	r2, [r3, #0]
 800607c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800607e:	4d86      	ldr	r5, [pc, #536]	; (8006298 <_printf_float+0x300>)
 8006080:	2b47      	cmp	r3, #71	; 0x47
 8006082:	d9d5      	bls.n	8006030 <_printf_float+0x98>
 8006084:	4d85      	ldr	r5, [pc, #532]	; (800629c <_printf_float+0x304>)
 8006086:	e7d3      	b.n	8006030 <_printf_float+0x98>
 8006088:	2220      	movs	r2, #32
 800608a:	990a      	ldr	r1, [sp, #40]	; 0x28
 800608c:	6863      	ldr	r3, [r4, #4]
 800608e:	4391      	bics	r1, r2
 8006090:	910f      	str	r1, [sp, #60]	; 0x3c
 8006092:	1c5a      	adds	r2, r3, #1
 8006094:	d149      	bne.n	800612a <_printf_float+0x192>
 8006096:	3307      	adds	r3, #7
 8006098:	6063      	str	r3, [r4, #4]
 800609a:	2380      	movs	r3, #128	; 0x80
 800609c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800609e:	00db      	lsls	r3, r3, #3
 80060a0:	4313      	orrs	r3, r2
 80060a2:	2200      	movs	r2, #0
 80060a4:	9206      	str	r2, [sp, #24]
 80060a6:	aa12      	add	r2, sp, #72	; 0x48
 80060a8:	9205      	str	r2, [sp, #20]
 80060aa:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80060ac:	a908      	add	r1, sp, #32
 80060ae:	9204      	str	r2, [sp, #16]
 80060b0:	aa11      	add	r2, sp, #68	; 0x44
 80060b2:	9203      	str	r2, [sp, #12]
 80060b4:	2223      	movs	r2, #35	; 0x23
 80060b6:	6023      	str	r3, [r4, #0]
 80060b8:	9301      	str	r3, [sp, #4]
 80060ba:	6863      	ldr	r3, [r4, #4]
 80060bc:	1852      	adds	r2, r2, r1
 80060be:	9202      	str	r2, [sp, #8]
 80060c0:	9300      	str	r3, [sp, #0]
 80060c2:	0038      	movs	r0, r7
 80060c4:	002b      	movs	r3, r5
 80060c6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80060c8:	f7ff febc 	bl	8005e44 <__cvt>
 80060cc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80060ce:	0005      	movs	r5, r0
 80060d0:	9911      	ldr	r1, [sp, #68]	; 0x44
 80060d2:	2b47      	cmp	r3, #71	; 0x47
 80060d4:	d108      	bne.n	80060e8 <_printf_float+0x150>
 80060d6:	1ccb      	adds	r3, r1, #3
 80060d8:	db02      	blt.n	80060e0 <_printf_float+0x148>
 80060da:	6863      	ldr	r3, [r4, #4]
 80060dc:	4299      	cmp	r1, r3
 80060de:	dd48      	ble.n	8006172 <_printf_float+0x1da>
 80060e0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80060e2:	3b02      	subs	r3, #2
 80060e4:	b2db      	uxtb	r3, r3
 80060e6:	930a      	str	r3, [sp, #40]	; 0x28
 80060e8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80060ea:	2b65      	cmp	r3, #101	; 0x65
 80060ec:	d824      	bhi.n	8006138 <_printf_float+0x1a0>
 80060ee:	0020      	movs	r0, r4
 80060f0:	001a      	movs	r2, r3
 80060f2:	3901      	subs	r1, #1
 80060f4:	3050      	adds	r0, #80	; 0x50
 80060f6:	9111      	str	r1, [sp, #68]	; 0x44
 80060f8:	f7ff ff07 	bl	8005f0a <__exponent>
 80060fc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80060fe:	900b      	str	r0, [sp, #44]	; 0x2c
 8006100:	1813      	adds	r3, r2, r0
 8006102:	6123      	str	r3, [r4, #16]
 8006104:	2a01      	cmp	r2, #1
 8006106:	dc02      	bgt.n	800610e <_printf_float+0x176>
 8006108:	6822      	ldr	r2, [r4, #0]
 800610a:	07d2      	lsls	r2, r2, #31
 800610c:	d501      	bpl.n	8006112 <_printf_float+0x17a>
 800610e:	3301      	adds	r3, #1
 8006110:	6123      	str	r3, [r4, #16]
 8006112:	2323      	movs	r3, #35	; 0x23
 8006114:	aa08      	add	r2, sp, #32
 8006116:	189b      	adds	r3, r3, r2
 8006118:	781b      	ldrb	r3, [r3, #0]
 800611a:	2b00      	cmp	r3, #0
 800611c:	d100      	bne.n	8006120 <_printf_float+0x188>
 800611e:	e78f      	b.n	8006040 <_printf_float+0xa8>
 8006120:	0023      	movs	r3, r4
 8006122:	222d      	movs	r2, #45	; 0x2d
 8006124:	3343      	adds	r3, #67	; 0x43
 8006126:	701a      	strb	r2, [r3, #0]
 8006128:	e78a      	b.n	8006040 <_printf_float+0xa8>
 800612a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800612c:	2a47      	cmp	r2, #71	; 0x47
 800612e:	d1b4      	bne.n	800609a <_printf_float+0x102>
 8006130:	2b00      	cmp	r3, #0
 8006132:	d1b2      	bne.n	800609a <_printf_float+0x102>
 8006134:	3301      	adds	r3, #1
 8006136:	e7af      	b.n	8006098 <_printf_float+0x100>
 8006138:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800613a:	2b66      	cmp	r3, #102	; 0x66
 800613c:	d11b      	bne.n	8006176 <_printf_float+0x1de>
 800613e:	6863      	ldr	r3, [r4, #4]
 8006140:	2900      	cmp	r1, #0
 8006142:	dd0d      	ble.n	8006160 <_printf_float+0x1c8>
 8006144:	6121      	str	r1, [r4, #16]
 8006146:	2b00      	cmp	r3, #0
 8006148:	d102      	bne.n	8006150 <_printf_float+0x1b8>
 800614a:	6822      	ldr	r2, [r4, #0]
 800614c:	07d2      	lsls	r2, r2, #31
 800614e:	d502      	bpl.n	8006156 <_printf_float+0x1be>
 8006150:	3301      	adds	r3, #1
 8006152:	1859      	adds	r1, r3, r1
 8006154:	6121      	str	r1, [r4, #16]
 8006156:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006158:	65a3      	str	r3, [r4, #88]	; 0x58
 800615a:	2300      	movs	r3, #0
 800615c:	930b      	str	r3, [sp, #44]	; 0x2c
 800615e:	e7d8      	b.n	8006112 <_printf_float+0x17a>
 8006160:	2b00      	cmp	r3, #0
 8006162:	d103      	bne.n	800616c <_printf_float+0x1d4>
 8006164:	2201      	movs	r2, #1
 8006166:	6821      	ldr	r1, [r4, #0]
 8006168:	4211      	tst	r1, r2
 800616a:	d000      	beq.n	800616e <_printf_float+0x1d6>
 800616c:	1c9a      	adds	r2, r3, #2
 800616e:	6122      	str	r2, [r4, #16]
 8006170:	e7f1      	b.n	8006156 <_printf_float+0x1be>
 8006172:	2367      	movs	r3, #103	; 0x67
 8006174:	930a      	str	r3, [sp, #40]	; 0x28
 8006176:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006178:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800617a:	4293      	cmp	r3, r2
 800617c:	db06      	blt.n	800618c <_printf_float+0x1f4>
 800617e:	6822      	ldr	r2, [r4, #0]
 8006180:	6123      	str	r3, [r4, #16]
 8006182:	07d2      	lsls	r2, r2, #31
 8006184:	d5e7      	bpl.n	8006156 <_printf_float+0x1be>
 8006186:	3301      	adds	r3, #1
 8006188:	6123      	str	r3, [r4, #16]
 800618a:	e7e4      	b.n	8006156 <_printf_float+0x1be>
 800618c:	2101      	movs	r1, #1
 800618e:	2b00      	cmp	r3, #0
 8006190:	dc01      	bgt.n	8006196 <_printf_float+0x1fe>
 8006192:	1849      	adds	r1, r1, r1
 8006194:	1ac9      	subs	r1, r1, r3
 8006196:	1852      	adds	r2, r2, r1
 8006198:	e7e9      	b.n	800616e <_printf_float+0x1d6>
 800619a:	6822      	ldr	r2, [r4, #0]
 800619c:	0553      	lsls	r3, r2, #21
 800619e:	d407      	bmi.n	80061b0 <_printf_float+0x218>
 80061a0:	6923      	ldr	r3, [r4, #16]
 80061a2:	002a      	movs	r2, r5
 80061a4:	0038      	movs	r0, r7
 80061a6:	9909      	ldr	r1, [sp, #36]	; 0x24
 80061a8:	47b0      	blx	r6
 80061aa:	1c43      	adds	r3, r0, #1
 80061ac:	d128      	bne.n	8006200 <_printf_float+0x268>
 80061ae:	e751      	b.n	8006054 <_printf_float+0xbc>
 80061b0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80061b2:	2b65      	cmp	r3, #101	; 0x65
 80061b4:	d800      	bhi.n	80061b8 <_printf_float+0x220>
 80061b6:	e0e1      	b.n	800637c <_printf_float+0x3e4>
 80061b8:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 80061ba:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 80061bc:	2200      	movs	r2, #0
 80061be:	2300      	movs	r3, #0
 80061c0:	f7fa f942 	bl	8000448 <__aeabi_dcmpeq>
 80061c4:	2800      	cmp	r0, #0
 80061c6:	d031      	beq.n	800622c <_printf_float+0x294>
 80061c8:	2301      	movs	r3, #1
 80061ca:	0038      	movs	r0, r7
 80061cc:	4a34      	ldr	r2, [pc, #208]	; (80062a0 <_printf_float+0x308>)
 80061ce:	9909      	ldr	r1, [sp, #36]	; 0x24
 80061d0:	47b0      	blx	r6
 80061d2:	1c43      	adds	r3, r0, #1
 80061d4:	d100      	bne.n	80061d8 <_printf_float+0x240>
 80061d6:	e73d      	b.n	8006054 <_printf_float+0xbc>
 80061d8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80061da:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80061dc:	4293      	cmp	r3, r2
 80061de:	db02      	blt.n	80061e6 <_printf_float+0x24e>
 80061e0:	6823      	ldr	r3, [r4, #0]
 80061e2:	07db      	lsls	r3, r3, #31
 80061e4:	d50c      	bpl.n	8006200 <_printf_float+0x268>
 80061e6:	0038      	movs	r0, r7
 80061e8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80061ea:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80061ec:	9909      	ldr	r1, [sp, #36]	; 0x24
 80061ee:	47b0      	blx	r6
 80061f0:	2500      	movs	r5, #0
 80061f2:	1c43      	adds	r3, r0, #1
 80061f4:	d100      	bne.n	80061f8 <_printf_float+0x260>
 80061f6:	e72d      	b.n	8006054 <_printf_float+0xbc>
 80061f8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80061fa:	3b01      	subs	r3, #1
 80061fc:	42ab      	cmp	r3, r5
 80061fe:	dc0a      	bgt.n	8006216 <_printf_float+0x27e>
 8006200:	6823      	ldr	r3, [r4, #0]
 8006202:	079b      	lsls	r3, r3, #30
 8006204:	d500      	bpl.n	8006208 <_printf_float+0x270>
 8006206:	e106      	b.n	8006416 <_printf_float+0x47e>
 8006208:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800620a:	68e0      	ldr	r0, [r4, #12]
 800620c:	4298      	cmp	r0, r3
 800620e:	db00      	blt.n	8006212 <_printf_float+0x27a>
 8006210:	e722      	b.n	8006058 <_printf_float+0xc0>
 8006212:	0018      	movs	r0, r3
 8006214:	e720      	b.n	8006058 <_printf_float+0xc0>
 8006216:	0022      	movs	r2, r4
 8006218:	2301      	movs	r3, #1
 800621a:	0038      	movs	r0, r7
 800621c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800621e:	321a      	adds	r2, #26
 8006220:	47b0      	blx	r6
 8006222:	1c43      	adds	r3, r0, #1
 8006224:	d100      	bne.n	8006228 <_printf_float+0x290>
 8006226:	e715      	b.n	8006054 <_printf_float+0xbc>
 8006228:	3501      	adds	r5, #1
 800622a:	e7e5      	b.n	80061f8 <_printf_float+0x260>
 800622c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800622e:	2b00      	cmp	r3, #0
 8006230:	dc38      	bgt.n	80062a4 <_printf_float+0x30c>
 8006232:	2301      	movs	r3, #1
 8006234:	0038      	movs	r0, r7
 8006236:	4a1a      	ldr	r2, [pc, #104]	; (80062a0 <_printf_float+0x308>)
 8006238:	9909      	ldr	r1, [sp, #36]	; 0x24
 800623a:	47b0      	blx	r6
 800623c:	1c43      	adds	r3, r0, #1
 800623e:	d100      	bne.n	8006242 <_printf_float+0x2aa>
 8006240:	e708      	b.n	8006054 <_printf_float+0xbc>
 8006242:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006244:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8006246:	4313      	orrs	r3, r2
 8006248:	d102      	bne.n	8006250 <_printf_float+0x2b8>
 800624a:	6823      	ldr	r3, [r4, #0]
 800624c:	07db      	lsls	r3, r3, #31
 800624e:	d5d7      	bpl.n	8006200 <_printf_float+0x268>
 8006250:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006252:	0038      	movs	r0, r7
 8006254:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006256:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006258:	47b0      	blx	r6
 800625a:	1c43      	adds	r3, r0, #1
 800625c:	d100      	bne.n	8006260 <_printf_float+0x2c8>
 800625e:	e6f9      	b.n	8006054 <_printf_float+0xbc>
 8006260:	2300      	movs	r3, #0
 8006262:	930a      	str	r3, [sp, #40]	; 0x28
 8006264:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006266:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006268:	425b      	negs	r3, r3
 800626a:	4293      	cmp	r3, r2
 800626c:	dc01      	bgt.n	8006272 <_printf_float+0x2da>
 800626e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006270:	e797      	b.n	80061a2 <_printf_float+0x20a>
 8006272:	0022      	movs	r2, r4
 8006274:	2301      	movs	r3, #1
 8006276:	0038      	movs	r0, r7
 8006278:	9909      	ldr	r1, [sp, #36]	; 0x24
 800627a:	321a      	adds	r2, #26
 800627c:	47b0      	blx	r6
 800627e:	1c43      	adds	r3, r0, #1
 8006280:	d100      	bne.n	8006284 <_printf_float+0x2ec>
 8006282:	e6e7      	b.n	8006054 <_printf_float+0xbc>
 8006284:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006286:	3301      	adds	r3, #1
 8006288:	e7eb      	b.n	8006262 <_printf_float+0x2ca>
 800628a:	46c0      	nop			; (mov r8, r8)
 800628c:	7fefffff 	.word	0x7fefffff
 8006290:	08009438 	.word	0x08009438
 8006294:	0800943c 	.word	0x0800943c
 8006298:	08009440 	.word	0x08009440
 800629c:	08009444 	.word	0x08009444
 80062a0:	08009448 	.word	0x08009448
 80062a4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80062a6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80062a8:	920a      	str	r2, [sp, #40]	; 0x28
 80062aa:	429a      	cmp	r2, r3
 80062ac:	dd00      	ble.n	80062b0 <_printf_float+0x318>
 80062ae:	930a      	str	r3, [sp, #40]	; 0x28
 80062b0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	dc3c      	bgt.n	8006330 <_printf_float+0x398>
 80062b6:	2300      	movs	r3, #0
 80062b8:	930d      	str	r3, [sp, #52]	; 0x34
 80062ba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80062bc:	43db      	mvns	r3, r3
 80062be:	17db      	asrs	r3, r3, #31
 80062c0:	930f      	str	r3, [sp, #60]	; 0x3c
 80062c2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80062c4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80062c6:	930b      	str	r3, [sp, #44]	; 0x2c
 80062c8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80062ca:	4013      	ands	r3, r2
 80062cc:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80062ce:	1ad3      	subs	r3, r2, r3
 80062d0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80062d2:	4293      	cmp	r3, r2
 80062d4:	dc34      	bgt.n	8006340 <_printf_float+0x3a8>
 80062d6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80062d8:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80062da:	4293      	cmp	r3, r2
 80062dc:	db3d      	blt.n	800635a <_printf_float+0x3c2>
 80062de:	6823      	ldr	r3, [r4, #0]
 80062e0:	07db      	lsls	r3, r3, #31
 80062e2:	d43a      	bmi.n	800635a <_printf_float+0x3c2>
 80062e4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80062e6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80062e8:	9911      	ldr	r1, [sp, #68]	; 0x44
 80062ea:	1ad3      	subs	r3, r2, r3
 80062ec:	1a52      	subs	r2, r2, r1
 80062ee:	920a      	str	r2, [sp, #40]	; 0x28
 80062f0:	429a      	cmp	r2, r3
 80062f2:	dd00      	ble.n	80062f6 <_printf_float+0x35e>
 80062f4:	930a      	str	r3, [sp, #40]	; 0x28
 80062f6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80062f8:	2b00      	cmp	r3, #0
 80062fa:	dc36      	bgt.n	800636a <_printf_float+0x3d2>
 80062fc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80062fe:	2500      	movs	r5, #0
 8006300:	43db      	mvns	r3, r3
 8006302:	17db      	asrs	r3, r3, #31
 8006304:	930b      	str	r3, [sp, #44]	; 0x2c
 8006306:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8006308:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800630a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800630c:	1a9b      	subs	r3, r3, r2
 800630e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006310:	400a      	ands	r2, r1
 8006312:	1a9b      	subs	r3, r3, r2
 8006314:	42ab      	cmp	r3, r5
 8006316:	dc00      	bgt.n	800631a <_printf_float+0x382>
 8006318:	e772      	b.n	8006200 <_printf_float+0x268>
 800631a:	0022      	movs	r2, r4
 800631c:	2301      	movs	r3, #1
 800631e:	0038      	movs	r0, r7
 8006320:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006322:	321a      	adds	r2, #26
 8006324:	47b0      	blx	r6
 8006326:	1c43      	adds	r3, r0, #1
 8006328:	d100      	bne.n	800632c <_printf_float+0x394>
 800632a:	e693      	b.n	8006054 <_printf_float+0xbc>
 800632c:	3501      	adds	r5, #1
 800632e:	e7ea      	b.n	8006306 <_printf_float+0x36e>
 8006330:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006332:	002a      	movs	r2, r5
 8006334:	0038      	movs	r0, r7
 8006336:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006338:	47b0      	blx	r6
 800633a:	1c43      	adds	r3, r0, #1
 800633c:	d1bb      	bne.n	80062b6 <_printf_float+0x31e>
 800633e:	e689      	b.n	8006054 <_printf_float+0xbc>
 8006340:	0022      	movs	r2, r4
 8006342:	2301      	movs	r3, #1
 8006344:	0038      	movs	r0, r7
 8006346:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006348:	321a      	adds	r2, #26
 800634a:	47b0      	blx	r6
 800634c:	1c43      	adds	r3, r0, #1
 800634e:	d100      	bne.n	8006352 <_printf_float+0x3ba>
 8006350:	e680      	b.n	8006054 <_printf_float+0xbc>
 8006352:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006354:	3301      	adds	r3, #1
 8006356:	930d      	str	r3, [sp, #52]	; 0x34
 8006358:	e7b3      	b.n	80062c2 <_printf_float+0x32a>
 800635a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800635c:	0038      	movs	r0, r7
 800635e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006360:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006362:	47b0      	blx	r6
 8006364:	1c43      	adds	r3, r0, #1
 8006366:	d1bd      	bne.n	80062e4 <_printf_float+0x34c>
 8006368:	e674      	b.n	8006054 <_printf_float+0xbc>
 800636a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800636c:	0038      	movs	r0, r7
 800636e:	18ea      	adds	r2, r5, r3
 8006370:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006372:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006374:	47b0      	blx	r6
 8006376:	1c43      	adds	r3, r0, #1
 8006378:	d1c0      	bne.n	80062fc <_printf_float+0x364>
 800637a:	e66b      	b.n	8006054 <_printf_float+0xbc>
 800637c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800637e:	2b01      	cmp	r3, #1
 8006380:	dc02      	bgt.n	8006388 <_printf_float+0x3f0>
 8006382:	2301      	movs	r3, #1
 8006384:	421a      	tst	r2, r3
 8006386:	d034      	beq.n	80063f2 <_printf_float+0x45a>
 8006388:	2301      	movs	r3, #1
 800638a:	002a      	movs	r2, r5
 800638c:	0038      	movs	r0, r7
 800638e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006390:	47b0      	blx	r6
 8006392:	1c43      	adds	r3, r0, #1
 8006394:	d100      	bne.n	8006398 <_printf_float+0x400>
 8006396:	e65d      	b.n	8006054 <_printf_float+0xbc>
 8006398:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800639a:	0038      	movs	r0, r7
 800639c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800639e:	9909      	ldr	r1, [sp, #36]	; 0x24
 80063a0:	47b0      	blx	r6
 80063a2:	1c43      	adds	r3, r0, #1
 80063a4:	d100      	bne.n	80063a8 <_printf_float+0x410>
 80063a6:	e655      	b.n	8006054 <_printf_float+0xbc>
 80063a8:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 80063aa:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 80063ac:	2200      	movs	r2, #0
 80063ae:	2300      	movs	r3, #0
 80063b0:	f7fa f84a 	bl	8000448 <__aeabi_dcmpeq>
 80063b4:	2800      	cmp	r0, #0
 80063b6:	d11a      	bne.n	80063ee <_printf_float+0x456>
 80063b8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80063ba:	1c6a      	adds	r2, r5, #1
 80063bc:	3b01      	subs	r3, #1
 80063be:	0038      	movs	r0, r7
 80063c0:	9909      	ldr	r1, [sp, #36]	; 0x24
 80063c2:	47b0      	blx	r6
 80063c4:	1c43      	adds	r3, r0, #1
 80063c6:	d10e      	bne.n	80063e6 <_printf_float+0x44e>
 80063c8:	e644      	b.n	8006054 <_printf_float+0xbc>
 80063ca:	0022      	movs	r2, r4
 80063cc:	2301      	movs	r3, #1
 80063ce:	0038      	movs	r0, r7
 80063d0:	9909      	ldr	r1, [sp, #36]	; 0x24
 80063d2:	321a      	adds	r2, #26
 80063d4:	47b0      	blx	r6
 80063d6:	1c43      	adds	r3, r0, #1
 80063d8:	d100      	bne.n	80063dc <_printf_float+0x444>
 80063da:	e63b      	b.n	8006054 <_printf_float+0xbc>
 80063dc:	3501      	adds	r5, #1
 80063de:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80063e0:	3b01      	subs	r3, #1
 80063e2:	42ab      	cmp	r3, r5
 80063e4:	dcf1      	bgt.n	80063ca <_printf_float+0x432>
 80063e6:	0022      	movs	r2, r4
 80063e8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80063ea:	3250      	adds	r2, #80	; 0x50
 80063ec:	e6da      	b.n	80061a4 <_printf_float+0x20c>
 80063ee:	2500      	movs	r5, #0
 80063f0:	e7f5      	b.n	80063de <_printf_float+0x446>
 80063f2:	002a      	movs	r2, r5
 80063f4:	e7e3      	b.n	80063be <_printf_float+0x426>
 80063f6:	0022      	movs	r2, r4
 80063f8:	2301      	movs	r3, #1
 80063fa:	0038      	movs	r0, r7
 80063fc:	9909      	ldr	r1, [sp, #36]	; 0x24
 80063fe:	3219      	adds	r2, #25
 8006400:	47b0      	blx	r6
 8006402:	1c43      	adds	r3, r0, #1
 8006404:	d100      	bne.n	8006408 <_printf_float+0x470>
 8006406:	e625      	b.n	8006054 <_printf_float+0xbc>
 8006408:	3501      	adds	r5, #1
 800640a:	68e3      	ldr	r3, [r4, #12]
 800640c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800640e:	1a9b      	subs	r3, r3, r2
 8006410:	42ab      	cmp	r3, r5
 8006412:	dcf0      	bgt.n	80063f6 <_printf_float+0x45e>
 8006414:	e6f8      	b.n	8006208 <_printf_float+0x270>
 8006416:	2500      	movs	r5, #0
 8006418:	e7f7      	b.n	800640a <_printf_float+0x472>
 800641a:	46c0      	nop			; (mov r8, r8)

0800641c <_printf_common>:
 800641c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800641e:	0015      	movs	r5, r2
 8006420:	9301      	str	r3, [sp, #4]
 8006422:	688a      	ldr	r2, [r1, #8]
 8006424:	690b      	ldr	r3, [r1, #16]
 8006426:	000c      	movs	r4, r1
 8006428:	9000      	str	r0, [sp, #0]
 800642a:	4293      	cmp	r3, r2
 800642c:	da00      	bge.n	8006430 <_printf_common+0x14>
 800642e:	0013      	movs	r3, r2
 8006430:	0022      	movs	r2, r4
 8006432:	602b      	str	r3, [r5, #0]
 8006434:	3243      	adds	r2, #67	; 0x43
 8006436:	7812      	ldrb	r2, [r2, #0]
 8006438:	2a00      	cmp	r2, #0
 800643a:	d001      	beq.n	8006440 <_printf_common+0x24>
 800643c:	3301      	adds	r3, #1
 800643e:	602b      	str	r3, [r5, #0]
 8006440:	6823      	ldr	r3, [r4, #0]
 8006442:	069b      	lsls	r3, r3, #26
 8006444:	d502      	bpl.n	800644c <_printf_common+0x30>
 8006446:	682b      	ldr	r3, [r5, #0]
 8006448:	3302      	adds	r3, #2
 800644a:	602b      	str	r3, [r5, #0]
 800644c:	6822      	ldr	r2, [r4, #0]
 800644e:	2306      	movs	r3, #6
 8006450:	0017      	movs	r7, r2
 8006452:	401f      	ands	r7, r3
 8006454:	421a      	tst	r2, r3
 8006456:	d027      	beq.n	80064a8 <_printf_common+0x8c>
 8006458:	0023      	movs	r3, r4
 800645a:	3343      	adds	r3, #67	; 0x43
 800645c:	781b      	ldrb	r3, [r3, #0]
 800645e:	1e5a      	subs	r2, r3, #1
 8006460:	4193      	sbcs	r3, r2
 8006462:	6822      	ldr	r2, [r4, #0]
 8006464:	0692      	lsls	r2, r2, #26
 8006466:	d430      	bmi.n	80064ca <_printf_common+0xae>
 8006468:	0022      	movs	r2, r4
 800646a:	9901      	ldr	r1, [sp, #4]
 800646c:	9800      	ldr	r0, [sp, #0]
 800646e:	9e08      	ldr	r6, [sp, #32]
 8006470:	3243      	adds	r2, #67	; 0x43
 8006472:	47b0      	blx	r6
 8006474:	1c43      	adds	r3, r0, #1
 8006476:	d025      	beq.n	80064c4 <_printf_common+0xa8>
 8006478:	2306      	movs	r3, #6
 800647a:	6820      	ldr	r0, [r4, #0]
 800647c:	682a      	ldr	r2, [r5, #0]
 800647e:	68e1      	ldr	r1, [r4, #12]
 8006480:	2500      	movs	r5, #0
 8006482:	4003      	ands	r3, r0
 8006484:	2b04      	cmp	r3, #4
 8006486:	d103      	bne.n	8006490 <_printf_common+0x74>
 8006488:	1a8d      	subs	r5, r1, r2
 800648a:	43eb      	mvns	r3, r5
 800648c:	17db      	asrs	r3, r3, #31
 800648e:	401d      	ands	r5, r3
 8006490:	68a3      	ldr	r3, [r4, #8]
 8006492:	6922      	ldr	r2, [r4, #16]
 8006494:	4293      	cmp	r3, r2
 8006496:	dd01      	ble.n	800649c <_printf_common+0x80>
 8006498:	1a9b      	subs	r3, r3, r2
 800649a:	18ed      	adds	r5, r5, r3
 800649c:	2700      	movs	r7, #0
 800649e:	42bd      	cmp	r5, r7
 80064a0:	d120      	bne.n	80064e4 <_printf_common+0xc8>
 80064a2:	2000      	movs	r0, #0
 80064a4:	e010      	b.n	80064c8 <_printf_common+0xac>
 80064a6:	3701      	adds	r7, #1
 80064a8:	68e3      	ldr	r3, [r4, #12]
 80064aa:	682a      	ldr	r2, [r5, #0]
 80064ac:	1a9b      	subs	r3, r3, r2
 80064ae:	42bb      	cmp	r3, r7
 80064b0:	ddd2      	ble.n	8006458 <_printf_common+0x3c>
 80064b2:	0022      	movs	r2, r4
 80064b4:	2301      	movs	r3, #1
 80064b6:	9901      	ldr	r1, [sp, #4]
 80064b8:	9800      	ldr	r0, [sp, #0]
 80064ba:	9e08      	ldr	r6, [sp, #32]
 80064bc:	3219      	adds	r2, #25
 80064be:	47b0      	blx	r6
 80064c0:	1c43      	adds	r3, r0, #1
 80064c2:	d1f0      	bne.n	80064a6 <_printf_common+0x8a>
 80064c4:	2001      	movs	r0, #1
 80064c6:	4240      	negs	r0, r0
 80064c8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80064ca:	2030      	movs	r0, #48	; 0x30
 80064cc:	18e1      	adds	r1, r4, r3
 80064ce:	3143      	adds	r1, #67	; 0x43
 80064d0:	7008      	strb	r0, [r1, #0]
 80064d2:	0021      	movs	r1, r4
 80064d4:	1c5a      	adds	r2, r3, #1
 80064d6:	3145      	adds	r1, #69	; 0x45
 80064d8:	7809      	ldrb	r1, [r1, #0]
 80064da:	18a2      	adds	r2, r4, r2
 80064dc:	3243      	adds	r2, #67	; 0x43
 80064de:	3302      	adds	r3, #2
 80064e0:	7011      	strb	r1, [r2, #0]
 80064e2:	e7c1      	b.n	8006468 <_printf_common+0x4c>
 80064e4:	0022      	movs	r2, r4
 80064e6:	2301      	movs	r3, #1
 80064e8:	9901      	ldr	r1, [sp, #4]
 80064ea:	9800      	ldr	r0, [sp, #0]
 80064ec:	9e08      	ldr	r6, [sp, #32]
 80064ee:	321a      	adds	r2, #26
 80064f0:	47b0      	blx	r6
 80064f2:	1c43      	adds	r3, r0, #1
 80064f4:	d0e6      	beq.n	80064c4 <_printf_common+0xa8>
 80064f6:	3701      	adds	r7, #1
 80064f8:	e7d1      	b.n	800649e <_printf_common+0x82>
	...

080064fc <_printf_i>:
 80064fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80064fe:	b08b      	sub	sp, #44	; 0x2c
 8006500:	9206      	str	r2, [sp, #24]
 8006502:	000a      	movs	r2, r1
 8006504:	3243      	adds	r2, #67	; 0x43
 8006506:	9307      	str	r3, [sp, #28]
 8006508:	9005      	str	r0, [sp, #20]
 800650a:	9204      	str	r2, [sp, #16]
 800650c:	7e0a      	ldrb	r2, [r1, #24]
 800650e:	000c      	movs	r4, r1
 8006510:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006512:	2a78      	cmp	r2, #120	; 0x78
 8006514:	d807      	bhi.n	8006526 <_printf_i+0x2a>
 8006516:	2a62      	cmp	r2, #98	; 0x62
 8006518:	d809      	bhi.n	800652e <_printf_i+0x32>
 800651a:	2a00      	cmp	r2, #0
 800651c:	d100      	bne.n	8006520 <_printf_i+0x24>
 800651e:	e0c1      	b.n	80066a4 <_printf_i+0x1a8>
 8006520:	2a58      	cmp	r2, #88	; 0x58
 8006522:	d100      	bne.n	8006526 <_printf_i+0x2a>
 8006524:	e08c      	b.n	8006640 <_printf_i+0x144>
 8006526:	0026      	movs	r6, r4
 8006528:	3642      	adds	r6, #66	; 0x42
 800652a:	7032      	strb	r2, [r6, #0]
 800652c:	e022      	b.n	8006574 <_printf_i+0x78>
 800652e:	0010      	movs	r0, r2
 8006530:	3863      	subs	r0, #99	; 0x63
 8006532:	2815      	cmp	r0, #21
 8006534:	d8f7      	bhi.n	8006526 <_printf_i+0x2a>
 8006536:	f7f9 fdf7 	bl	8000128 <__gnu_thumb1_case_shi>
 800653a:	0016      	.short	0x0016
 800653c:	fff6001f 	.word	0xfff6001f
 8006540:	fff6fff6 	.word	0xfff6fff6
 8006544:	001ffff6 	.word	0x001ffff6
 8006548:	fff6fff6 	.word	0xfff6fff6
 800654c:	fff6fff6 	.word	0xfff6fff6
 8006550:	003600a8 	.word	0x003600a8
 8006554:	fff6009a 	.word	0xfff6009a
 8006558:	00b9fff6 	.word	0x00b9fff6
 800655c:	0036fff6 	.word	0x0036fff6
 8006560:	fff6fff6 	.word	0xfff6fff6
 8006564:	009e      	.short	0x009e
 8006566:	0026      	movs	r6, r4
 8006568:	681a      	ldr	r2, [r3, #0]
 800656a:	3642      	adds	r6, #66	; 0x42
 800656c:	1d11      	adds	r1, r2, #4
 800656e:	6019      	str	r1, [r3, #0]
 8006570:	6813      	ldr	r3, [r2, #0]
 8006572:	7033      	strb	r3, [r6, #0]
 8006574:	2301      	movs	r3, #1
 8006576:	e0a7      	b.n	80066c8 <_printf_i+0x1cc>
 8006578:	6808      	ldr	r0, [r1, #0]
 800657a:	6819      	ldr	r1, [r3, #0]
 800657c:	1d0a      	adds	r2, r1, #4
 800657e:	0605      	lsls	r5, r0, #24
 8006580:	d50b      	bpl.n	800659a <_printf_i+0x9e>
 8006582:	680d      	ldr	r5, [r1, #0]
 8006584:	601a      	str	r2, [r3, #0]
 8006586:	2d00      	cmp	r5, #0
 8006588:	da03      	bge.n	8006592 <_printf_i+0x96>
 800658a:	232d      	movs	r3, #45	; 0x2d
 800658c:	9a04      	ldr	r2, [sp, #16]
 800658e:	426d      	negs	r5, r5
 8006590:	7013      	strb	r3, [r2, #0]
 8006592:	4b61      	ldr	r3, [pc, #388]	; (8006718 <_printf_i+0x21c>)
 8006594:	270a      	movs	r7, #10
 8006596:	9303      	str	r3, [sp, #12]
 8006598:	e01b      	b.n	80065d2 <_printf_i+0xd6>
 800659a:	680d      	ldr	r5, [r1, #0]
 800659c:	601a      	str	r2, [r3, #0]
 800659e:	0641      	lsls	r1, r0, #25
 80065a0:	d5f1      	bpl.n	8006586 <_printf_i+0x8a>
 80065a2:	b22d      	sxth	r5, r5
 80065a4:	e7ef      	b.n	8006586 <_printf_i+0x8a>
 80065a6:	680d      	ldr	r5, [r1, #0]
 80065a8:	6819      	ldr	r1, [r3, #0]
 80065aa:	1d08      	adds	r0, r1, #4
 80065ac:	6018      	str	r0, [r3, #0]
 80065ae:	062e      	lsls	r6, r5, #24
 80065b0:	d501      	bpl.n	80065b6 <_printf_i+0xba>
 80065b2:	680d      	ldr	r5, [r1, #0]
 80065b4:	e003      	b.n	80065be <_printf_i+0xc2>
 80065b6:	066d      	lsls	r5, r5, #25
 80065b8:	d5fb      	bpl.n	80065b2 <_printf_i+0xb6>
 80065ba:	680d      	ldr	r5, [r1, #0]
 80065bc:	b2ad      	uxth	r5, r5
 80065be:	4b56      	ldr	r3, [pc, #344]	; (8006718 <_printf_i+0x21c>)
 80065c0:	2708      	movs	r7, #8
 80065c2:	9303      	str	r3, [sp, #12]
 80065c4:	2a6f      	cmp	r2, #111	; 0x6f
 80065c6:	d000      	beq.n	80065ca <_printf_i+0xce>
 80065c8:	3702      	adds	r7, #2
 80065ca:	0023      	movs	r3, r4
 80065cc:	2200      	movs	r2, #0
 80065ce:	3343      	adds	r3, #67	; 0x43
 80065d0:	701a      	strb	r2, [r3, #0]
 80065d2:	6863      	ldr	r3, [r4, #4]
 80065d4:	60a3      	str	r3, [r4, #8]
 80065d6:	2b00      	cmp	r3, #0
 80065d8:	db03      	blt.n	80065e2 <_printf_i+0xe6>
 80065da:	2204      	movs	r2, #4
 80065dc:	6821      	ldr	r1, [r4, #0]
 80065de:	4391      	bics	r1, r2
 80065e0:	6021      	str	r1, [r4, #0]
 80065e2:	2d00      	cmp	r5, #0
 80065e4:	d102      	bne.n	80065ec <_printf_i+0xf0>
 80065e6:	9e04      	ldr	r6, [sp, #16]
 80065e8:	2b00      	cmp	r3, #0
 80065ea:	d00c      	beq.n	8006606 <_printf_i+0x10a>
 80065ec:	9e04      	ldr	r6, [sp, #16]
 80065ee:	0028      	movs	r0, r5
 80065f0:	0039      	movs	r1, r7
 80065f2:	f7f9 fe29 	bl	8000248 <__aeabi_uidivmod>
 80065f6:	9b03      	ldr	r3, [sp, #12]
 80065f8:	3e01      	subs	r6, #1
 80065fa:	5c5b      	ldrb	r3, [r3, r1]
 80065fc:	7033      	strb	r3, [r6, #0]
 80065fe:	002b      	movs	r3, r5
 8006600:	0005      	movs	r5, r0
 8006602:	429f      	cmp	r7, r3
 8006604:	d9f3      	bls.n	80065ee <_printf_i+0xf2>
 8006606:	2f08      	cmp	r7, #8
 8006608:	d109      	bne.n	800661e <_printf_i+0x122>
 800660a:	6823      	ldr	r3, [r4, #0]
 800660c:	07db      	lsls	r3, r3, #31
 800660e:	d506      	bpl.n	800661e <_printf_i+0x122>
 8006610:	6863      	ldr	r3, [r4, #4]
 8006612:	6922      	ldr	r2, [r4, #16]
 8006614:	4293      	cmp	r3, r2
 8006616:	dc02      	bgt.n	800661e <_printf_i+0x122>
 8006618:	2330      	movs	r3, #48	; 0x30
 800661a:	3e01      	subs	r6, #1
 800661c:	7033      	strb	r3, [r6, #0]
 800661e:	9b04      	ldr	r3, [sp, #16]
 8006620:	1b9b      	subs	r3, r3, r6
 8006622:	6123      	str	r3, [r4, #16]
 8006624:	9b07      	ldr	r3, [sp, #28]
 8006626:	0021      	movs	r1, r4
 8006628:	9300      	str	r3, [sp, #0]
 800662a:	9805      	ldr	r0, [sp, #20]
 800662c:	9b06      	ldr	r3, [sp, #24]
 800662e:	aa09      	add	r2, sp, #36	; 0x24
 8006630:	f7ff fef4 	bl	800641c <_printf_common>
 8006634:	1c43      	adds	r3, r0, #1
 8006636:	d14c      	bne.n	80066d2 <_printf_i+0x1d6>
 8006638:	2001      	movs	r0, #1
 800663a:	4240      	negs	r0, r0
 800663c:	b00b      	add	sp, #44	; 0x2c
 800663e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006640:	3145      	adds	r1, #69	; 0x45
 8006642:	700a      	strb	r2, [r1, #0]
 8006644:	4a34      	ldr	r2, [pc, #208]	; (8006718 <_printf_i+0x21c>)
 8006646:	9203      	str	r2, [sp, #12]
 8006648:	681a      	ldr	r2, [r3, #0]
 800664a:	6821      	ldr	r1, [r4, #0]
 800664c:	ca20      	ldmia	r2!, {r5}
 800664e:	601a      	str	r2, [r3, #0]
 8006650:	0608      	lsls	r0, r1, #24
 8006652:	d516      	bpl.n	8006682 <_printf_i+0x186>
 8006654:	07cb      	lsls	r3, r1, #31
 8006656:	d502      	bpl.n	800665e <_printf_i+0x162>
 8006658:	2320      	movs	r3, #32
 800665a:	4319      	orrs	r1, r3
 800665c:	6021      	str	r1, [r4, #0]
 800665e:	2710      	movs	r7, #16
 8006660:	2d00      	cmp	r5, #0
 8006662:	d1b2      	bne.n	80065ca <_printf_i+0xce>
 8006664:	2320      	movs	r3, #32
 8006666:	6822      	ldr	r2, [r4, #0]
 8006668:	439a      	bics	r2, r3
 800666a:	6022      	str	r2, [r4, #0]
 800666c:	e7ad      	b.n	80065ca <_printf_i+0xce>
 800666e:	2220      	movs	r2, #32
 8006670:	6809      	ldr	r1, [r1, #0]
 8006672:	430a      	orrs	r2, r1
 8006674:	6022      	str	r2, [r4, #0]
 8006676:	0022      	movs	r2, r4
 8006678:	2178      	movs	r1, #120	; 0x78
 800667a:	3245      	adds	r2, #69	; 0x45
 800667c:	7011      	strb	r1, [r2, #0]
 800667e:	4a27      	ldr	r2, [pc, #156]	; (800671c <_printf_i+0x220>)
 8006680:	e7e1      	b.n	8006646 <_printf_i+0x14a>
 8006682:	0648      	lsls	r0, r1, #25
 8006684:	d5e6      	bpl.n	8006654 <_printf_i+0x158>
 8006686:	b2ad      	uxth	r5, r5
 8006688:	e7e4      	b.n	8006654 <_printf_i+0x158>
 800668a:	681a      	ldr	r2, [r3, #0]
 800668c:	680d      	ldr	r5, [r1, #0]
 800668e:	1d10      	adds	r0, r2, #4
 8006690:	6949      	ldr	r1, [r1, #20]
 8006692:	6018      	str	r0, [r3, #0]
 8006694:	6813      	ldr	r3, [r2, #0]
 8006696:	062e      	lsls	r6, r5, #24
 8006698:	d501      	bpl.n	800669e <_printf_i+0x1a2>
 800669a:	6019      	str	r1, [r3, #0]
 800669c:	e002      	b.n	80066a4 <_printf_i+0x1a8>
 800669e:	066d      	lsls	r5, r5, #25
 80066a0:	d5fb      	bpl.n	800669a <_printf_i+0x19e>
 80066a2:	8019      	strh	r1, [r3, #0]
 80066a4:	2300      	movs	r3, #0
 80066a6:	9e04      	ldr	r6, [sp, #16]
 80066a8:	6123      	str	r3, [r4, #16]
 80066aa:	e7bb      	b.n	8006624 <_printf_i+0x128>
 80066ac:	681a      	ldr	r2, [r3, #0]
 80066ae:	1d11      	adds	r1, r2, #4
 80066b0:	6019      	str	r1, [r3, #0]
 80066b2:	6816      	ldr	r6, [r2, #0]
 80066b4:	2100      	movs	r1, #0
 80066b6:	0030      	movs	r0, r6
 80066b8:	6862      	ldr	r2, [r4, #4]
 80066ba:	f000 ff33 	bl	8007524 <memchr>
 80066be:	2800      	cmp	r0, #0
 80066c0:	d001      	beq.n	80066c6 <_printf_i+0x1ca>
 80066c2:	1b80      	subs	r0, r0, r6
 80066c4:	6060      	str	r0, [r4, #4]
 80066c6:	6863      	ldr	r3, [r4, #4]
 80066c8:	6123      	str	r3, [r4, #16]
 80066ca:	2300      	movs	r3, #0
 80066cc:	9a04      	ldr	r2, [sp, #16]
 80066ce:	7013      	strb	r3, [r2, #0]
 80066d0:	e7a8      	b.n	8006624 <_printf_i+0x128>
 80066d2:	6923      	ldr	r3, [r4, #16]
 80066d4:	0032      	movs	r2, r6
 80066d6:	9906      	ldr	r1, [sp, #24]
 80066d8:	9805      	ldr	r0, [sp, #20]
 80066da:	9d07      	ldr	r5, [sp, #28]
 80066dc:	47a8      	blx	r5
 80066de:	1c43      	adds	r3, r0, #1
 80066e0:	d0aa      	beq.n	8006638 <_printf_i+0x13c>
 80066e2:	6823      	ldr	r3, [r4, #0]
 80066e4:	079b      	lsls	r3, r3, #30
 80066e6:	d415      	bmi.n	8006714 <_printf_i+0x218>
 80066e8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80066ea:	68e0      	ldr	r0, [r4, #12]
 80066ec:	4298      	cmp	r0, r3
 80066ee:	daa5      	bge.n	800663c <_printf_i+0x140>
 80066f0:	0018      	movs	r0, r3
 80066f2:	e7a3      	b.n	800663c <_printf_i+0x140>
 80066f4:	0022      	movs	r2, r4
 80066f6:	2301      	movs	r3, #1
 80066f8:	9906      	ldr	r1, [sp, #24]
 80066fa:	9805      	ldr	r0, [sp, #20]
 80066fc:	9e07      	ldr	r6, [sp, #28]
 80066fe:	3219      	adds	r2, #25
 8006700:	47b0      	blx	r6
 8006702:	1c43      	adds	r3, r0, #1
 8006704:	d098      	beq.n	8006638 <_printf_i+0x13c>
 8006706:	3501      	adds	r5, #1
 8006708:	68e3      	ldr	r3, [r4, #12]
 800670a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800670c:	1a9b      	subs	r3, r3, r2
 800670e:	42ab      	cmp	r3, r5
 8006710:	dcf0      	bgt.n	80066f4 <_printf_i+0x1f8>
 8006712:	e7e9      	b.n	80066e8 <_printf_i+0x1ec>
 8006714:	2500      	movs	r5, #0
 8006716:	e7f7      	b.n	8006708 <_printf_i+0x20c>
 8006718:	0800944a 	.word	0x0800944a
 800671c:	0800945b 	.word	0x0800945b

08006720 <siprintf>:
 8006720:	b40e      	push	{r1, r2, r3}
 8006722:	b500      	push	{lr}
 8006724:	490b      	ldr	r1, [pc, #44]	; (8006754 <siprintf+0x34>)
 8006726:	b09c      	sub	sp, #112	; 0x70
 8006728:	ab1d      	add	r3, sp, #116	; 0x74
 800672a:	9002      	str	r0, [sp, #8]
 800672c:	9006      	str	r0, [sp, #24]
 800672e:	9107      	str	r1, [sp, #28]
 8006730:	9104      	str	r1, [sp, #16]
 8006732:	4809      	ldr	r0, [pc, #36]	; (8006758 <siprintf+0x38>)
 8006734:	4909      	ldr	r1, [pc, #36]	; (800675c <siprintf+0x3c>)
 8006736:	cb04      	ldmia	r3!, {r2}
 8006738:	9105      	str	r1, [sp, #20]
 800673a:	6800      	ldr	r0, [r0, #0]
 800673c:	a902      	add	r1, sp, #8
 800673e:	9301      	str	r3, [sp, #4]
 8006740:	f001 fc10 	bl	8007f64 <_svfiprintf_r>
 8006744:	2300      	movs	r3, #0
 8006746:	9a02      	ldr	r2, [sp, #8]
 8006748:	7013      	strb	r3, [r2, #0]
 800674a:	b01c      	add	sp, #112	; 0x70
 800674c:	bc08      	pop	{r3}
 800674e:	b003      	add	sp, #12
 8006750:	4718      	bx	r3
 8006752:	46c0      	nop			; (mov r8, r8)
 8006754:	7fffffff 	.word	0x7fffffff
 8006758:	20002028 	.word	0x20002028
 800675c:	ffff0208 	.word	0xffff0208

08006760 <__assert_func>:
 8006760:	b530      	push	{r4, r5, lr}
 8006762:	0014      	movs	r4, r2
 8006764:	001a      	movs	r2, r3
 8006766:	4b09      	ldr	r3, [pc, #36]	; (800678c <__assert_func+0x2c>)
 8006768:	0005      	movs	r5, r0
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	b085      	sub	sp, #20
 800676e:	68d8      	ldr	r0, [r3, #12]
 8006770:	4b07      	ldr	r3, [pc, #28]	; (8006790 <__assert_func+0x30>)
 8006772:	2c00      	cmp	r4, #0
 8006774:	d101      	bne.n	800677a <__assert_func+0x1a>
 8006776:	4b07      	ldr	r3, [pc, #28]	; (8006794 <__assert_func+0x34>)
 8006778:	001c      	movs	r4, r3
 800677a:	9301      	str	r3, [sp, #4]
 800677c:	9100      	str	r1, [sp, #0]
 800677e:	002b      	movs	r3, r5
 8006780:	4905      	ldr	r1, [pc, #20]	; (8006798 <__assert_func+0x38>)
 8006782:	9402      	str	r4, [sp, #8]
 8006784:	f000 feb0 	bl	80074e8 <fiprintf>
 8006788:	f001 ff2e 	bl	80085e8 <abort>
 800678c:	20002028 	.word	0x20002028
 8006790:	0800946c 	.word	0x0800946c
 8006794:	080094a7 	.word	0x080094a7
 8006798:	08009479 	.word	0x08009479

0800679c <quorem>:
 800679c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800679e:	0006      	movs	r6, r0
 80067a0:	690b      	ldr	r3, [r1, #16]
 80067a2:	6932      	ldr	r2, [r6, #16]
 80067a4:	b087      	sub	sp, #28
 80067a6:	2000      	movs	r0, #0
 80067a8:	9103      	str	r1, [sp, #12]
 80067aa:	429a      	cmp	r2, r3
 80067ac:	db65      	blt.n	800687a <quorem+0xde>
 80067ae:	3b01      	subs	r3, #1
 80067b0:	009c      	lsls	r4, r3, #2
 80067b2:	9300      	str	r3, [sp, #0]
 80067b4:	000b      	movs	r3, r1
 80067b6:	3314      	adds	r3, #20
 80067b8:	9305      	str	r3, [sp, #20]
 80067ba:	191b      	adds	r3, r3, r4
 80067bc:	9304      	str	r3, [sp, #16]
 80067be:	0033      	movs	r3, r6
 80067c0:	3314      	adds	r3, #20
 80067c2:	9302      	str	r3, [sp, #8]
 80067c4:	191c      	adds	r4, r3, r4
 80067c6:	9b04      	ldr	r3, [sp, #16]
 80067c8:	6827      	ldr	r7, [r4, #0]
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	0038      	movs	r0, r7
 80067ce:	1c5d      	adds	r5, r3, #1
 80067d0:	0029      	movs	r1, r5
 80067d2:	9301      	str	r3, [sp, #4]
 80067d4:	f7f9 fcb2 	bl	800013c <__udivsi3>
 80067d8:	9001      	str	r0, [sp, #4]
 80067da:	42af      	cmp	r7, r5
 80067dc:	d324      	bcc.n	8006828 <quorem+0x8c>
 80067de:	2500      	movs	r5, #0
 80067e0:	46ac      	mov	ip, r5
 80067e2:	9802      	ldr	r0, [sp, #8]
 80067e4:	9f05      	ldr	r7, [sp, #20]
 80067e6:	cf08      	ldmia	r7!, {r3}
 80067e8:	9a01      	ldr	r2, [sp, #4]
 80067ea:	b299      	uxth	r1, r3
 80067ec:	4351      	muls	r1, r2
 80067ee:	0c1b      	lsrs	r3, r3, #16
 80067f0:	4353      	muls	r3, r2
 80067f2:	1949      	adds	r1, r1, r5
 80067f4:	0c0a      	lsrs	r2, r1, #16
 80067f6:	189b      	adds	r3, r3, r2
 80067f8:	6802      	ldr	r2, [r0, #0]
 80067fa:	b289      	uxth	r1, r1
 80067fc:	b292      	uxth	r2, r2
 80067fe:	4462      	add	r2, ip
 8006800:	1a52      	subs	r2, r2, r1
 8006802:	6801      	ldr	r1, [r0, #0]
 8006804:	0c1d      	lsrs	r5, r3, #16
 8006806:	0c09      	lsrs	r1, r1, #16
 8006808:	b29b      	uxth	r3, r3
 800680a:	1acb      	subs	r3, r1, r3
 800680c:	1411      	asrs	r1, r2, #16
 800680e:	185b      	adds	r3, r3, r1
 8006810:	1419      	asrs	r1, r3, #16
 8006812:	b292      	uxth	r2, r2
 8006814:	041b      	lsls	r3, r3, #16
 8006816:	431a      	orrs	r2, r3
 8006818:	9b04      	ldr	r3, [sp, #16]
 800681a:	468c      	mov	ip, r1
 800681c:	c004      	stmia	r0!, {r2}
 800681e:	42bb      	cmp	r3, r7
 8006820:	d2e1      	bcs.n	80067e6 <quorem+0x4a>
 8006822:	6823      	ldr	r3, [r4, #0]
 8006824:	2b00      	cmp	r3, #0
 8006826:	d030      	beq.n	800688a <quorem+0xee>
 8006828:	0030      	movs	r0, r6
 800682a:	9903      	ldr	r1, [sp, #12]
 800682c:	f001 f912 	bl	8007a54 <__mcmp>
 8006830:	2800      	cmp	r0, #0
 8006832:	db21      	blt.n	8006878 <quorem+0xdc>
 8006834:	0030      	movs	r0, r6
 8006836:	2400      	movs	r4, #0
 8006838:	9b01      	ldr	r3, [sp, #4]
 800683a:	9903      	ldr	r1, [sp, #12]
 800683c:	3301      	adds	r3, #1
 800683e:	9301      	str	r3, [sp, #4]
 8006840:	3014      	adds	r0, #20
 8006842:	3114      	adds	r1, #20
 8006844:	6803      	ldr	r3, [r0, #0]
 8006846:	c920      	ldmia	r1!, {r5}
 8006848:	b29a      	uxth	r2, r3
 800684a:	1914      	adds	r4, r2, r4
 800684c:	b2aa      	uxth	r2, r5
 800684e:	1aa2      	subs	r2, r4, r2
 8006850:	0c1b      	lsrs	r3, r3, #16
 8006852:	0c2d      	lsrs	r5, r5, #16
 8006854:	1414      	asrs	r4, r2, #16
 8006856:	1b5b      	subs	r3, r3, r5
 8006858:	191b      	adds	r3, r3, r4
 800685a:	141c      	asrs	r4, r3, #16
 800685c:	b292      	uxth	r2, r2
 800685e:	041b      	lsls	r3, r3, #16
 8006860:	4313      	orrs	r3, r2
 8006862:	c008      	stmia	r0!, {r3}
 8006864:	9b04      	ldr	r3, [sp, #16]
 8006866:	428b      	cmp	r3, r1
 8006868:	d2ec      	bcs.n	8006844 <quorem+0xa8>
 800686a:	9b00      	ldr	r3, [sp, #0]
 800686c:	9a02      	ldr	r2, [sp, #8]
 800686e:	009b      	lsls	r3, r3, #2
 8006870:	18d3      	adds	r3, r2, r3
 8006872:	681a      	ldr	r2, [r3, #0]
 8006874:	2a00      	cmp	r2, #0
 8006876:	d015      	beq.n	80068a4 <quorem+0x108>
 8006878:	9801      	ldr	r0, [sp, #4]
 800687a:	b007      	add	sp, #28
 800687c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800687e:	6823      	ldr	r3, [r4, #0]
 8006880:	2b00      	cmp	r3, #0
 8006882:	d106      	bne.n	8006892 <quorem+0xf6>
 8006884:	9b00      	ldr	r3, [sp, #0]
 8006886:	3b01      	subs	r3, #1
 8006888:	9300      	str	r3, [sp, #0]
 800688a:	9b02      	ldr	r3, [sp, #8]
 800688c:	3c04      	subs	r4, #4
 800688e:	42a3      	cmp	r3, r4
 8006890:	d3f5      	bcc.n	800687e <quorem+0xe2>
 8006892:	9b00      	ldr	r3, [sp, #0]
 8006894:	6133      	str	r3, [r6, #16]
 8006896:	e7c7      	b.n	8006828 <quorem+0x8c>
 8006898:	681a      	ldr	r2, [r3, #0]
 800689a:	2a00      	cmp	r2, #0
 800689c:	d106      	bne.n	80068ac <quorem+0x110>
 800689e:	9a00      	ldr	r2, [sp, #0]
 80068a0:	3a01      	subs	r2, #1
 80068a2:	9200      	str	r2, [sp, #0]
 80068a4:	9a02      	ldr	r2, [sp, #8]
 80068a6:	3b04      	subs	r3, #4
 80068a8:	429a      	cmp	r2, r3
 80068aa:	d3f5      	bcc.n	8006898 <quorem+0xfc>
 80068ac:	9b00      	ldr	r3, [sp, #0]
 80068ae:	6133      	str	r3, [r6, #16]
 80068b0:	e7e2      	b.n	8006878 <quorem+0xdc>
	...

080068b4 <_dtoa_r>:
 80068b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80068b6:	b09d      	sub	sp, #116	; 0x74
 80068b8:	9202      	str	r2, [sp, #8]
 80068ba:	9303      	str	r3, [sp, #12]
 80068bc:	9b02      	ldr	r3, [sp, #8]
 80068be:	9c03      	ldr	r4, [sp, #12]
 80068c0:	9308      	str	r3, [sp, #32]
 80068c2:	9409      	str	r4, [sp, #36]	; 0x24
 80068c4:	6a44      	ldr	r4, [r0, #36]	; 0x24
 80068c6:	0007      	movs	r7, r0
 80068c8:	9d25      	ldr	r5, [sp, #148]	; 0x94
 80068ca:	2c00      	cmp	r4, #0
 80068cc:	d10e      	bne.n	80068ec <_dtoa_r+0x38>
 80068ce:	2010      	movs	r0, #16
 80068d0:	f000 fe1e 	bl	8007510 <malloc>
 80068d4:	1e02      	subs	r2, r0, #0
 80068d6:	6278      	str	r0, [r7, #36]	; 0x24
 80068d8:	d104      	bne.n	80068e4 <_dtoa_r+0x30>
 80068da:	21ea      	movs	r1, #234	; 0xea
 80068dc:	4bc7      	ldr	r3, [pc, #796]	; (8006bfc <_dtoa_r+0x348>)
 80068de:	48c8      	ldr	r0, [pc, #800]	; (8006c00 <_dtoa_r+0x34c>)
 80068e0:	f7ff ff3e 	bl	8006760 <__assert_func>
 80068e4:	6044      	str	r4, [r0, #4]
 80068e6:	6084      	str	r4, [r0, #8]
 80068e8:	6004      	str	r4, [r0, #0]
 80068ea:	60c4      	str	r4, [r0, #12]
 80068ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068ee:	6819      	ldr	r1, [r3, #0]
 80068f0:	2900      	cmp	r1, #0
 80068f2:	d00a      	beq.n	800690a <_dtoa_r+0x56>
 80068f4:	685a      	ldr	r2, [r3, #4]
 80068f6:	2301      	movs	r3, #1
 80068f8:	4093      	lsls	r3, r2
 80068fa:	604a      	str	r2, [r1, #4]
 80068fc:	608b      	str	r3, [r1, #8]
 80068fe:	0038      	movs	r0, r7
 8006900:	f000 fe68 	bl	80075d4 <_Bfree>
 8006904:	2200      	movs	r2, #0
 8006906:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006908:	601a      	str	r2, [r3, #0]
 800690a:	9b03      	ldr	r3, [sp, #12]
 800690c:	2b00      	cmp	r3, #0
 800690e:	da20      	bge.n	8006952 <_dtoa_r+0x9e>
 8006910:	2301      	movs	r3, #1
 8006912:	602b      	str	r3, [r5, #0]
 8006914:	9b03      	ldr	r3, [sp, #12]
 8006916:	005b      	lsls	r3, r3, #1
 8006918:	085b      	lsrs	r3, r3, #1
 800691a:	9309      	str	r3, [sp, #36]	; 0x24
 800691c:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800691e:	4bb9      	ldr	r3, [pc, #740]	; (8006c04 <_dtoa_r+0x350>)
 8006920:	4ab8      	ldr	r2, [pc, #736]	; (8006c04 <_dtoa_r+0x350>)
 8006922:	402b      	ands	r3, r5
 8006924:	4293      	cmp	r3, r2
 8006926:	d117      	bne.n	8006958 <_dtoa_r+0xa4>
 8006928:	4bb7      	ldr	r3, [pc, #732]	; (8006c08 <_dtoa_r+0x354>)
 800692a:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800692c:	0328      	lsls	r0, r5, #12
 800692e:	6013      	str	r3, [r2, #0]
 8006930:	9b02      	ldr	r3, [sp, #8]
 8006932:	0b00      	lsrs	r0, r0, #12
 8006934:	4318      	orrs	r0, r3
 8006936:	d101      	bne.n	800693c <_dtoa_r+0x88>
 8006938:	f000 fdbf 	bl	80074ba <_dtoa_r+0xc06>
 800693c:	48b3      	ldr	r0, [pc, #716]	; (8006c0c <_dtoa_r+0x358>)
 800693e:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8006940:	9006      	str	r0, [sp, #24]
 8006942:	2b00      	cmp	r3, #0
 8006944:	d002      	beq.n	800694c <_dtoa_r+0x98>
 8006946:	4bb2      	ldr	r3, [pc, #712]	; (8006c10 <_dtoa_r+0x35c>)
 8006948:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800694a:	6013      	str	r3, [r2, #0]
 800694c:	9806      	ldr	r0, [sp, #24]
 800694e:	b01d      	add	sp, #116	; 0x74
 8006950:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006952:	2300      	movs	r3, #0
 8006954:	602b      	str	r3, [r5, #0]
 8006956:	e7e1      	b.n	800691c <_dtoa_r+0x68>
 8006958:	9b08      	ldr	r3, [sp, #32]
 800695a:	9c09      	ldr	r4, [sp, #36]	; 0x24
 800695c:	9312      	str	r3, [sp, #72]	; 0x48
 800695e:	9413      	str	r4, [sp, #76]	; 0x4c
 8006960:	9812      	ldr	r0, [sp, #72]	; 0x48
 8006962:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8006964:	2200      	movs	r2, #0
 8006966:	2300      	movs	r3, #0
 8006968:	f7f9 fd6e 	bl	8000448 <__aeabi_dcmpeq>
 800696c:	1e04      	subs	r4, r0, #0
 800696e:	d009      	beq.n	8006984 <_dtoa_r+0xd0>
 8006970:	2301      	movs	r3, #1
 8006972:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8006974:	6013      	str	r3, [r2, #0]
 8006976:	4ba7      	ldr	r3, [pc, #668]	; (8006c14 <_dtoa_r+0x360>)
 8006978:	9306      	str	r3, [sp, #24]
 800697a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800697c:	2b00      	cmp	r3, #0
 800697e:	d0e5      	beq.n	800694c <_dtoa_r+0x98>
 8006980:	4ba5      	ldr	r3, [pc, #660]	; (8006c18 <_dtoa_r+0x364>)
 8006982:	e7e1      	b.n	8006948 <_dtoa_r+0x94>
 8006984:	ab1a      	add	r3, sp, #104	; 0x68
 8006986:	9301      	str	r3, [sp, #4]
 8006988:	ab1b      	add	r3, sp, #108	; 0x6c
 800698a:	9300      	str	r3, [sp, #0]
 800698c:	0038      	movs	r0, r7
 800698e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8006990:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8006992:	f001 f913 	bl	8007bbc <__d2b>
 8006996:	006e      	lsls	r6, r5, #1
 8006998:	9005      	str	r0, [sp, #20]
 800699a:	0d76      	lsrs	r6, r6, #21
 800699c:	d100      	bne.n	80069a0 <_dtoa_r+0xec>
 800699e:	e07c      	b.n	8006a9a <_dtoa_r+0x1e6>
 80069a0:	9812      	ldr	r0, [sp, #72]	; 0x48
 80069a2:	9913      	ldr	r1, [sp, #76]	; 0x4c
 80069a4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80069a6:	4a9d      	ldr	r2, [pc, #628]	; (8006c1c <_dtoa_r+0x368>)
 80069a8:	031b      	lsls	r3, r3, #12
 80069aa:	0b1b      	lsrs	r3, r3, #12
 80069ac:	431a      	orrs	r2, r3
 80069ae:	0011      	movs	r1, r2
 80069b0:	4b9b      	ldr	r3, [pc, #620]	; (8006c20 <_dtoa_r+0x36c>)
 80069b2:	9418      	str	r4, [sp, #96]	; 0x60
 80069b4:	18f6      	adds	r6, r6, r3
 80069b6:	2200      	movs	r2, #0
 80069b8:	4b9a      	ldr	r3, [pc, #616]	; (8006c24 <_dtoa_r+0x370>)
 80069ba:	f7fa ff1d 	bl	80017f8 <__aeabi_dsub>
 80069be:	4a9a      	ldr	r2, [pc, #616]	; (8006c28 <_dtoa_r+0x374>)
 80069c0:	4b9a      	ldr	r3, [pc, #616]	; (8006c2c <_dtoa_r+0x378>)
 80069c2:	f7fa fcad 	bl	8001320 <__aeabi_dmul>
 80069c6:	4a9a      	ldr	r2, [pc, #616]	; (8006c30 <_dtoa_r+0x37c>)
 80069c8:	4b9a      	ldr	r3, [pc, #616]	; (8006c34 <_dtoa_r+0x380>)
 80069ca:	f7f9 fd6b 	bl	80004a4 <__aeabi_dadd>
 80069ce:	0004      	movs	r4, r0
 80069d0:	0030      	movs	r0, r6
 80069d2:	000d      	movs	r5, r1
 80069d4:	f7fb faf6 	bl	8001fc4 <__aeabi_i2d>
 80069d8:	4a97      	ldr	r2, [pc, #604]	; (8006c38 <_dtoa_r+0x384>)
 80069da:	4b98      	ldr	r3, [pc, #608]	; (8006c3c <_dtoa_r+0x388>)
 80069dc:	f7fa fca0 	bl	8001320 <__aeabi_dmul>
 80069e0:	0002      	movs	r2, r0
 80069e2:	000b      	movs	r3, r1
 80069e4:	0020      	movs	r0, r4
 80069e6:	0029      	movs	r1, r5
 80069e8:	f7f9 fd5c 	bl	80004a4 <__aeabi_dadd>
 80069ec:	0004      	movs	r4, r0
 80069ee:	000d      	movs	r5, r1
 80069f0:	f7fb fab2 	bl	8001f58 <__aeabi_d2iz>
 80069f4:	2200      	movs	r2, #0
 80069f6:	9002      	str	r0, [sp, #8]
 80069f8:	2300      	movs	r3, #0
 80069fa:	0020      	movs	r0, r4
 80069fc:	0029      	movs	r1, r5
 80069fe:	f7f9 fd29 	bl	8000454 <__aeabi_dcmplt>
 8006a02:	2800      	cmp	r0, #0
 8006a04:	d00b      	beq.n	8006a1e <_dtoa_r+0x16a>
 8006a06:	9802      	ldr	r0, [sp, #8]
 8006a08:	f7fb fadc 	bl	8001fc4 <__aeabi_i2d>
 8006a0c:	002b      	movs	r3, r5
 8006a0e:	0022      	movs	r2, r4
 8006a10:	f7f9 fd1a 	bl	8000448 <__aeabi_dcmpeq>
 8006a14:	4243      	negs	r3, r0
 8006a16:	4158      	adcs	r0, r3
 8006a18:	9b02      	ldr	r3, [sp, #8]
 8006a1a:	1a1b      	subs	r3, r3, r0
 8006a1c:	9302      	str	r3, [sp, #8]
 8006a1e:	2301      	movs	r3, #1
 8006a20:	9316      	str	r3, [sp, #88]	; 0x58
 8006a22:	9b02      	ldr	r3, [sp, #8]
 8006a24:	2b16      	cmp	r3, #22
 8006a26:	d80f      	bhi.n	8006a48 <_dtoa_r+0x194>
 8006a28:	9812      	ldr	r0, [sp, #72]	; 0x48
 8006a2a:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8006a2c:	00da      	lsls	r2, r3, #3
 8006a2e:	4b84      	ldr	r3, [pc, #528]	; (8006c40 <_dtoa_r+0x38c>)
 8006a30:	189b      	adds	r3, r3, r2
 8006a32:	681a      	ldr	r2, [r3, #0]
 8006a34:	685b      	ldr	r3, [r3, #4]
 8006a36:	f7f9 fd0d 	bl	8000454 <__aeabi_dcmplt>
 8006a3a:	2800      	cmp	r0, #0
 8006a3c:	d049      	beq.n	8006ad2 <_dtoa_r+0x21e>
 8006a3e:	9b02      	ldr	r3, [sp, #8]
 8006a40:	3b01      	subs	r3, #1
 8006a42:	9302      	str	r3, [sp, #8]
 8006a44:	2300      	movs	r3, #0
 8006a46:	9316      	str	r3, [sp, #88]	; 0x58
 8006a48:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8006a4a:	1b9e      	subs	r6, r3, r6
 8006a4c:	2300      	movs	r3, #0
 8006a4e:	930a      	str	r3, [sp, #40]	; 0x28
 8006a50:	0033      	movs	r3, r6
 8006a52:	3b01      	subs	r3, #1
 8006a54:	930d      	str	r3, [sp, #52]	; 0x34
 8006a56:	d504      	bpl.n	8006a62 <_dtoa_r+0x1ae>
 8006a58:	2301      	movs	r3, #1
 8006a5a:	1b9b      	subs	r3, r3, r6
 8006a5c:	930a      	str	r3, [sp, #40]	; 0x28
 8006a5e:	2300      	movs	r3, #0
 8006a60:	930d      	str	r3, [sp, #52]	; 0x34
 8006a62:	9b02      	ldr	r3, [sp, #8]
 8006a64:	2b00      	cmp	r3, #0
 8006a66:	db36      	blt.n	8006ad6 <_dtoa_r+0x222>
 8006a68:	9a02      	ldr	r2, [sp, #8]
 8006a6a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006a6c:	4694      	mov	ip, r2
 8006a6e:	4463      	add	r3, ip
 8006a70:	930d      	str	r3, [sp, #52]	; 0x34
 8006a72:	2300      	movs	r3, #0
 8006a74:	9215      	str	r2, [sp, #84]	; 0x54
 8006a76:	930e      	str	r3, [sp, #56]	; 0x38
 8006a78:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006a7a:	2401      	movs	r4, #1
 8006a7c:	2b09      	cmp	r3, #9
 8006a7e:	d864      	bhi.n	8006b4a <_dtoa_r+0x296>
 8006a80:	2b05      	cmp	r3, #5
 8006a82:	dd02      	ble.n	8006a8a <_dtoa_r+0x1d6>
 8006a84:	2400      	movs	r4, #0
 8006a86:	3b04      	subs	r3, #4
 8006a88:	9322      	str	r3, [sp, #136]	; 0x88
 8006a8a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006a8c:	1e98      	subs	r0, r3, #2
 8006a8e:	2803      	cmp	r0, #3
 8006a90:	d864      	bhi.n	8006b5c <_dtoa_r+0x2a8>
 8006a92:	f7f9 fb3f 	bl	8000114 <__gnu_thumb1_case_uqi>
 8006a96:	3829      	.short	0x3829
 8006a98:	5836      	.short	0x5836
 8006a9a:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8006a9c:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8006a9e:	189e      	adds	r6, r3, r2
 8006aa0:	4b68      	ldr	r3, [pc, #416]	; (8006c44 <_dtoa_r+0x390>)
 8006aa2:	18f2      	adds	r2, r6, r3
 8006aa4:	2a20      	cmp	r2, #32
 8006aa6:	dd0f      	ble.n	8006ac8 <_dtoa_r+0x214>
 8006aa8:	2340      	movs	r3, #64	; 0x40
 8006aaa:	1a9b      	subs	r3, r3, r2
 8006aac:	409d      	lsls	r5, r3
 8006aae:	4b66      	ldr	r3, [pc, #408]	; (8006c48 <_dtoa_r+0x394>)
 8006ab0:	9802      	ldr	r0, [sp, #8]
 8006ab2:	18f3      	adds	r3, r6, r3
 8006ab4:	40d8      	lsrs	r0, r3
 8006ab6:	4328      	orrs	r0, r5
 8006ab8:	f7fb fab4 	bl	8002024 <__aeabi_ui2d>
 8006abc:	2301      	movs	r3, #1
 8006abe:	4c63      	ldr	r4, [pc, #396]	; (8006c4c <_dtoa_r+0x398>)
 8006ac0:	3e01      	subs	r6, #1
 8006ac2:	1909      	adds	r1, r1, r4
 8006ac4:	9318      	str	r3, [sp, #96]	; 0x60
 8006ac6:	e776      	b.n	80069b6 <_dtoa_r+0x102>
 8006ac8:	2320      	movs	r3, #32
 8006aca:	9802      	ldr	r0, [sp, #8]
 8006acc:	1a9b      	subs	r3, r3, r2
 8006ace:	4098      	lsls	r0, r3
 8006ad0:	e7f2      	b.n	8006ab8 <_dtoa_r+0x204>
 8006ad2:	9016      	str	r0, [sp, #88]	; 0x58
 8006ad4:	e7b8      	b.n	8006a48 <_dtoa_r+0x194>
 8006ad6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006ad8:	9a02      	ldr	r2, [sp, #8]
 8006ada:	1a9b      	subs	r3, r3, r2
 8006adc:	930a      	str	r3, [sp, #40]	; 0x28
 8006ade:	4253      	negs	r3, r2
 8006ae0:	930e      	str	r3, [sp, #56]	; 0x38
 8006ae2:	2300      	movs	r3, #0
 8006ae4:	9315      	str	r3, [sp, #84]	; 0x54
 8006ae6:	e7c7      	b.n	8006a78 <_dtoa_r+0x1c4>
 8006ae8:	2300      	movs	r3, #0
 8006aea:	930f      	str	r3, [sp, #60]	; 0x3c
 8006aec:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8006aee:	930c      	str	r3, [sp, #48]	; 0x30
 8006af0:	9307      	str	r3, [sp, #28]
 8006af2:	2b00      	cmp	r3, #0
 8006af4:	dc13      	bgt.n	8006b1e <_dtoa_r+0x26a>
 8006af6:	2301      	movs	r3, #1
 8006af8:	001a      	movs	r2, r3
 8006afa:	930c      	str	r3, [sp, #48]	; 0x30
 8006afc:	9307      	str	r3, [sp, #28]
 8006afe:	9223      	str	r2, [sp, #140]	; 0x8c
 8006b00:	e00d      	b.n	8006b1e <_dtoa_r+0x26a>
 8006b02:	2301      	movs	r3, #1
 8006b04:	e7f1      	b.n	8006aea <_dtoa_r+0x236>
 8006b06:	2300      	movs	r3, #0
 8006b08:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 8006b0a:	930f      	str	r3, [sp, #60]	; 0x3c
 8006b0c:	4694      	mov	ip, r2
 8006b0e:	9b02      	ldr	r3, [sp, #8]
 8006b10:	4463      	add	r3, ip
 8006b12:	930c      	str	r3, [sp, #48]	; 0x30
 8006b14:	3301      	adds	r3, #1
 8006b16:	9307      	str	r3, [sp, #28]
 8006b18:	2b00      	cmp	r3, #0
 8006b1a:	dc00      	bgt.n	8006b1e <_dtoa_r+0x26a>
 8006b1c:	2301      	movs	r3, #1
 8006b1e:	2200      	movs	r2, #0
 8006b20:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006b22:	6042      	str	r2, [r0, #4]
 8006b24:	3204      	adds	r2, #4
 8006b26:	0015      	movs	r5, r2
 8006b28:	3514      	adds	r5, #20
 8006b2a:	6841      	ldr	r1, [r0, #4]
 8006b2c:	429d      	cmp	r5, r3
 8006b2e:	d919      	bls.n	8006b64 <_dtoa_r+0x2b0>
 8006b30:	0038      	movs	r0, r7
 8006b32:	f000 fd0b 	bl	800754c <_Balloc>
 8006b36:	9006      	str	r0, [sp, #24]
 8006b38:	2800      	cmp	r0, #0
 8006b3a:	d117      	bne.n	8006b6c <_dtoa_r+0x2b8>
 8006b3c:	21d5      	movs	r1, #213	; 0xd5
 8006b3e:	0002      	movs	r2, r0
 8006b40:	4b43      	ldr	r3, [pc, #268]	; (8006c50 <_dtoa_r+0x39c>)
 8006b42:	0049      	lsls	r1, r1, #1
 8006b44:	e6cb      	b.n	80068de <_dtoa_r+0x2a>
 8006b46:	2301      	movs	r3, #1
 8006b48:	e7de      	b.n	8006b08 <_dtoa_r+0x254>
 8006b4a:	2300      	movs	r3, #0
 8006b4c:	940f      	str	r4, [sp, #60]	; 0x3c
 8006b4e:	9322      	str	r3, [sp, #136]	; 0x88
 8006b50:	3b01      	subs	r3, #1
 8006b52:	930c      	str	r3, [sp, #48]	; 0x30
 8006b54:	9307      	str	r3, [sp, #28]
 8006b56:	2200      	movs	r2, #0
 8006b58:	3313      	adds	r3, #19
 8006b5a:	e7d0      	b.n	8006afe <_dtoa_r+0x24a>
 8006b5c:	2301      	movs	r3, #1
 8006b5e:	930f      	str	r3, [sp, #60]	; 0x3c
 8006b60:	3b02      	subs	r3, #2
 8006b62:	e7f6      	b.n	8006b52 <_dtoa_r+0x29e>
 8006b64:	3101      	adds	r1, #1
 8006b66:	6041      	str	r1, [r0, #4]
 8006b68:	0052      	lsls	r2, r2, #1
 8006b6a:	e7dc      	b.n	8006b26 <_dtoa_r+0x272>
 8006b6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b6e:	9a06      	ldr	r2, [sp, #24]
 8006b70:	601a      	str	r2, [r3, #0]
 8006b72:	9b07      	ldr	r3, [sp, #28]
 8006b74:	2b0e      	cmp	r3, #14
 8006b76:	d900      	bls.n	8006b7a <_dtoa_r+0x2c6>
 8006b78:	e0eb      	b.n	8006d52 <_dtoa_r+0x49e>
 8006b7a:	2c00      	cmp	r4, #0
 8006b7c:	d100      	bne.n	8006b80 <_dtoa_r+0x2cc>
 8006b7e:	e0e8      	b.n	8006d52 <_dtoa_r+0x49e>
 8006b80:	9b02      	ldr	r3, [sp, #8]
 8006b82:	2b00      	cmp	r3, #0
 8006b84:	dd68      	ble.n	8006c58 <_dtoa_r+0x3a4>
 8006b86:	001a      	movs	r2, r3
 8006b88:	210f      	movs	r1, #15
 8006b8a:	4b2d      	ldr	r3, [pc, #180]	; (8006c40 <_dtoa_r+0x38c>)
 8006b8c:	400a      	ands	r2, r1
 8006b8e:	00d2      	lsls	r2, r2, #3
 8006b90:	189b      	adds	r3, r3, r2
 8006b92:	681d      	ldr	r5, [r3, #0]
 8006b94:	685e      	ldr	r6, [r3, #4]
 8006b96:	9b02      	ldr	r3, [sp, #8]
 8006b98:	111c      	asrs	r4, r3, #4
 8006b9a:	2302      	movs	r3, #2
 8006b9c:	9310      	str	r3, [sp, #64]	; 0x40
 8006b9e:	9b02      	ldr	r3, [sp, #8]
 8006ba0:	05db      	lsls	r3, r3, #23
 8006ba2:	d50b      	bpl.n	8006bbc <_dtoa_r+0x308>
 8006ba4:	4b2b      	ldr	r3, [pc, #172]	; (8006c54 <_dtoa_r+0x3a0>)
 8006ba6:	400c      	ands	r4, r1
 8006ba8:	6a1a      	ldr	r2, [r3, #32]
 8006baa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bac:	9812      	ldr	r0, [sp, #72]	; 0x48
 8006bae:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8006bb0:	f7f9 ffb4 	bl	8000b1c <__aeabi_ddiv>
 8006bb4:	2303      	movs	r3, #3
 8006bb6:	9008      	str	r0, [sp, #32]
 8006bb8:	9109      	str	r1, [sp, #36]	; 0x24
 8006bba:	9310      	str	r3, [sp, #64]	; 0x40
 8006bbc:	4b25      	ldr	r3, [pc, #148]	; (8006c54 <_dtoa_r+0x3a0>)
 8006bbe:	9314      	str	r3, [sp, #80]	; 0x50
 8006bc0:	2c00      	cmp	r4, #0
 8006bc2:	d108      	bne.n	8006bd6 <_dtoa_r+0x322>
 8006bc4:	9808      	ldr	r0, [sp, #32]
 8006bc6:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006bc8:	002a      	movs	r2, r5
 8006bca:	0033      	movs	r3, r6
 8006bcc:	f7f9 ffa6 	bl	8000b1c <__aeabi_ddiv>
 8006bd0:	9008      	str	r0, [sp, #32]
 8006bd2:	9109      	str	r1, [sp, #36]	; 0x24
 8006bd4:	e05c      	b.n	8006c90 <_dtoa_r+0x3dc>
 8006bd6:	2301      	movs	r3, #1
 8006bd8:	421c      	tst	r4, r3
 8006bda:	d00b      	beq.n	8006bf4 <_dtoa_r+0x340>
 8006bdc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006bde:	0028      	movs	r0, r5
 8006be0:	3301      	adds	r3, #1
 8006be2:	9310      	str	r3, [sp, #64]	; 0x40
 8006be4:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8006be6:	0031      	movs	r1, r6
 8006be8:	681a      	ldr	r2, [r3, #0]
 8006bea:	685b      	ldr	r3, [r3, #4]
 8006bec:	f7fa fb98 	bl	8001320 <__aeabi_dmul>
 8006bf0:	0005      	movs	r5, r0
 8006bf2:	000e      	movs	r6, r1
 8006bf4:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8006bf6:	1064      	asrs	r4, r4, #1
 8006bf8:	3308      	adds	r3, #8
 8006bfa:	e7e0      	b.n	8006bbe <_dtoa_r+0x30a>
 8006bfc:	080094b5 	.word	0x080094b5
 8006c00:	080094cc 	.word	0x080094cc
 8006c04:	7ff00000 	.word	0x7ff00000
 8006c08:	0000270f 	.word	0x0000270f
 8006c0c:	080094b1 	.word	0x080094b1
 8006c10:	080094b4 	.word	0x080094b4
 8006c14:	08009448 	.word	0x08009448
 8006c18:	08009449 	.word	0x08009449
 8006c1c:	3ff00000 	.word	0x3ff00000
 8006c20:	fffffc01 	.word	0xfffffc01
 8006c24:	3ff80000 	.word	0x3ff80000
 8006c28:	636f4361 	.word	0x636f4361
 8006c2c:	3fd287a7 	.word	0x3fd287a7
 8006c30:	8b60c8b3 	.word	0x8b60c8b3
 8006c34:	3fc68a28 	.word	0x3fc68a28
 8006c38:	509f79fb 	.word	0x509f79fb
 8006c3c:	3fd34413 	.word	0x3fd34413
 8006c40:	080095c0 	.word	0x080095c0
 8006c44:	00000432 	.word	0x00000432
 8006c48:	00000412 	.word	0x00000412
 8006c4c:	fe100000 	.word	0xfe100000
 8006c50:	08009527 	.word	0x08009527
 8006c54:	08009598 	.word	0x08009598
 8006c58:	2302      	movs	r3, #2
 8006c5a:	9310      	str	r3, [sp, #64]	; 0x40
 8006c5c:	9b02      	ldr	r3, [sp, #8]
 8006c5e:	2b00      	cmp	r3, #0
 8006c60:	d016      	beq.n	8006c90 <_dtoa_r+0x3dc>
 8006c62:	9812      	ldr	r0, [sp, #72]	; 0x48
 8006c64:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8006c66:	425c      	negs	r4, r3
 8006c68:	230f      	movs	r3, #15
 8006c6a:	4ab6      	ldr	r2, [pc, #728]	; (8006f44 <_dtoa_r+0x690>)
 8006c6c:	4023      	ands	r3, r4
 8006c6e:	00db      	lsls	r3, r3, #3
 8006c70:	18d3      	adds	r3, r2, r3
 8006c72:	681a      	ldr	r2, [r3, #0]
 8006c74:	685b      	ldr	r3, [r3, #4]
 8006c76:	f7fa fb53 	bl	8001320 <__aeabi_dmul>
 8006c7a:	2601      	movs	r6, #1
 8006c7c:	2300      	movs	r3, #0
 8006c7e:	9008      	str	r0, [sp, #32]
 8006c80:	9109      	str	r1, [sp, #36]	; 0x24
 8006c82:	4db1      	ldr	r5, [pc, #708]	; (8006f48 <_dtoa_r+0x694>)
 8006c84:	1124      	asrs	r4, r4, #4
 8006c86:	2c00      	cmp	r4, #0
 8006c88:	d000      	beq.n	8006c8c <_dtoa_r+0x3d8>
 8006c8a:	e094      	b.n	8006db6 <_dtoa_r+0x502>
 8006c8c:	2b00      	cmp	r3, #0
 8006c8e:	d19f      	bne.n	8006bd0 <_dtoa_r+0x31c>
 8006c90:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8006c92:	2b00      	cmp	r3, #0
 8006c94:	d100      	bne.n	8006c98 <_dtoa_r+0x3e4>
 8006c96:	e09b      	b.n	8006dd0 <_dtoa_r+0x51c>
 8006c98:	9c08      	ldr	r4, [sp, #32]
 8006c9a:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8006c9c:	2200      	movs	r2, #0
 8006c9e:	0020      	movs	r0, r4
 8006ca0:	0029      	movs	r1, r5
 8006ca2:	4baa      	ldr	r3, [pc, #680]	; (8006f4c <_dtoa_r+0x698>)
 8006ca4:	f7f9 fbd6 	bl	8000454 <__aeabi_dcmplt>
 8006ca8:	2800      	cmp	r0, #0
 8006caa:	d100      	bne.n	8006cae <_dtoa_r+0x3fa>
 8006cac:	e090      	b.n	8006dd0 <_dtoa_r+0x51c>
 8006cae:	9b07      	ldr	r3, [sp, #28]
 8006cb0:	2b00      	cmp	r3, #0
 8006cb2:	d100      	bne.n	8006cb6 <_dtoa_r+0x402>
 8006cb4:	e08c      	b.n	8006dd0 <_dtoa_r+0x51c>
 8006cb6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006cb8:	2b00      	cmp	r3, #0
 8006cba:	dd46      	ble.n	8006d4a <_dtoa_r+0x496>
 8006cbc:	9b02      	ldr	r3, [sp, #8]
 8006cbe:	2200      	movs	r2, #0
 8006cc0:	0020      	movs	r0, r4
 8006cc2:	0029      	movs	r1, r5
 8006cc4:	1e5e      	subs	r6, r3, #1
 8006cc6:	4ba2      	ldr	r3, [pc, #648]	; (8006f50 <_dtoa_r+0x69c>)
 8006cc8:	f7fa fb2a 	bl	8001320 <__aeabi_dmul>
 8006ccc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006cce:	9008      	str	r0, [sp, #32]
 8006cd0:	9109      	str	r1, [sp, #36]	; 0x24
 8006cd2:	3301      	adds	r3, #1
 8006cd4:	9310      	str	r3, [sp, #64]	; 0x40
 8006cd6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006cd8:	9810      	ldr	r0, [sp, #64]	; 0x40
 8006cda:	9c08      	ldr	r4, [sp, #32]
 8006cdc:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8006cde:	9314      	str	r3, [sp, #80]	; 0x50
 8006ce0:	f7fb f970 	bl	8001fc4 <__aeabi_i2d>
 8006ce4:	0022      	movs	r2, r4
 8006ce6:	002b      	movs	r3, r5
 8006ce8:	f7fa fb1a 	bl	8001320 <__aeabi_dmul>
 8006cec:	2200      	movs	r2, #0
 8006cee:	4b99      	ldr	r3, [pc, #612]	; (8006f54 <_dtoa_r+0x6a0>)
 8006cf0:	f7f9 fbd8 	bl	80004a4 <__aeabi_dadd>
 8006cf4:	9010      	str	r0, [sp, #64]	; 0x40
 8006cf6:	9111      	str	r1, [sp, #68]	; 0x44
 8006cf8:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8006cfa:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006cfc:	9208      	str	r2, [sp, #32]
 8006cfe:	9309      	str	r3, [sp, #36]	; 0x24
 8006d00:	4a95      	ldr	r2, [pc, #596]	; (8006f58 <_dtoa_r+0x6a4>)
 8006d02:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006d04:	4694      	mov	ip, r2
 8006d06:	4463      	add	r3, ip
 8006d08:	9317      	str	r3, [sp, #92]	; 0x5c
 8006d0a:	9309      	str	r3, [sp, #36]	; 0x24
 8006d0c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8006d0e:	2b00      	cmp	r3, #0
 8006d10:	d161      	bne.n	8006dd6 <_dtoa_r+0x522>
 8006d12:	2200      	movs	r2, #0
 8006d14:	0020      	movs	r0, r4
 8006d16:	0029      	movs	r1, r5
 8006d18:	4b90      	ldr	r3, [pc, #576]	; (8006f5c <_dtoa_r+0x6a8>)
 8006d1a:	f7fa fd6d 	bl	80017f8 <__aeabi_dsub>
 8006d1e:	9a08      	ldr	r2, [sp, #32]
 8006d20:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006d22:	0004      	movs	r4, r0
 8006d24:	000d      	movs	r5, r1
 8006d26:	f7f9 fba9 	bl	800047c <__aeabi_dcmpgt>
 8006d2a:	2800      	cmp	r0, #0
 8006d2c:	d000      	beq.n	8006d30 <_dtoa_r+0x47c>
 8006d2e:	e2af      	b.n	8007290 <_dtoa_r+0x9dc>
 8006d30:	488b      	ldr	r0, [pc, #556]	; (8006f60 <_dtoa_r+0x6ac>)
 8006d32:	9911      	ldr	r1, [sp, #68]	; 0x44
 8006d34:	4684      	mov	ip, r0
 8006d36:	4461      	add	r1, ip
 8006d38:	000b      	movs	r3, r1
 8006d3a:	0020      	movs	r0, r4
 8006d3c:	0029      	movs	r1, r5
 8006d3e:	9a08      	ldr	r2, [sp, #32]
 8006d40:	f7f9 fb88 	bl	8000454 <__aeabi_dcmplt>
 8006d44:	2800      	cmp	r0, #0
 8006d46:	d000      	beq.n	8006d4a <_dtoa_r+0x496>
 8006d48:	e29f      	b.n	800728a <_dtoa_r+0x9d6>
 8006d4a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006d4c:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8006d4e:	9308      	str	r3, [sp, #32]
 8006d50:	9409      	str	r4, [sp, #36]	; 0x24
 8006d52:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8006d54:	2b00      	cmp	r3, #0
 8006d56:	da00      	bge.n	8006d5a <_dtoa_r+0x4a6>
 8006d58:	e172      	b.n	8007040 <_dtoa_r+0x78c>
 8006d5a:	9a02      	ldr	r2, [sp, #8]
 8006d5c:	2a0e      	cmp	r2, #14
 8006d5e:	dd00      	ble.n	8006d62 <_dtoa_r+0x4ae>
 8006d60:	e16e      	b.n	8007040 <_dtoa_r+0x78c>
 8006d62:	4b78      	ldr	r3, [pc, #480]	; (8006f44 <_dtoa_r+0x690>)
 8006d64:	00d2      	lsls	r2, r2, #3
 8006d66:	189b      	adds	r3, r3, r2
 8006d68:	685c      	ldr	r4, [r3, #4]
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	930a      	str	r3, [sp, #40]	; 0x28
 8006d6e:	940b      	str	r4, [sp, #44]	; 0x2c
 8006d70:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8006d72:	2b00      	cmp	r3, #0
 8006d74:	db00      	blt.n	8006d78 <_dtoa_r+0x4c4>
 8006d76:	e0f7      	b.n	8006f68 <_dtoa_r+0x6b4>
 8006d78:	9b07      	ldr	r3, [sp, #28]
 8006d7a:	2b00      	cmp	r3, #0
 8006d7c:	dd00      	ble.n	8006d80 <_dtoa_r+0x4cc>
 8006d7e:	e0f3      	b.n	8006f68 <_dtoa_r+0x6b4>
 8006d80:	d000      	beq.n	8006d84 <_dtoa_r+0x4d0>
 8006d82:	e282      	b.n	800728a <_dtoa_r+0x9d6>
 8006d84:	980a      	ldr	r0, [sp, #40]	; 0x28
 8006d86:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006d88:	2200      	movs	r2, #0
 8006d8a:	4b74      	ldr	r3, [pc, #464]	; (8006f5c <_dtoa_r+0x6a8>)
 8006d8c:	f7fa fac8 	bl	8001320 <__aeabi_dmul>
 8006d90:	9a08      	ldr	r2, [sp, #32]
 8006d92:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006d94:	f7f9 fb7c 	bl	8000490 <__aeabi_dcmpge>
 8006d98:	9e07      	ldr	r6, [sp, #28]
 8006d9a:	0035      	movs	r5, r6
 8006d9c:	2800      	cmp	r0, #0
 8006d9e:	d000      	beq.n	8006da2 <_dtoa_r+0x4ee>
 8006da0:	e259      	b.n	8007256 <_dtoa_r+0x9a2>
 8006da2:	9b06      	ldr	r3, [sp, #24]
 8006da4:	9a06      	ldr	r2, [sp, #24]
 8006da6:	3301      	adds	r3, #1
 8006da8:	9308      	str	r3, [sp, #32]
 8006daa:	2331      	movs	r3, #49	; 0x31
 8006dac:	7013      	strb	r3, [r2, #0]
 8006dae:	9b02      	ldr	r3, [sp, #8]
 8006db0:	3301      	adds	r3, #1
 8006db2:	9302      	str	r3, [sp, #8]
 8006db4:	e254      	b.n	8007260 <_dtoa_r+0x9ac>
 8006db6:	4234      	tst	r4, r6
 8006db8:	d007      	beq.n	8006dca <_dtoa_r+0x516>
 8006dba:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006dbc:	3301      	adds	r3, #1
 8006dbe:	9310      	str	r3, [sp, #64]	; 0x40
 8006dc0:	682a      	ldr	r2, [r5, #0]
 8006dc2:	686b      	ldr	r3, [r5, #4]
 8006dc4:	f7fa faac 	bl	8001320 <__aeabi_dmul>
 8006dc8:	0033      	movs	r3, r6
 8006dca:	1064      	asrs	r4, r4, #1
 8006dcc:	3508      	adds	r5, #8
 8006dce:	e75a      	b.n	8006c86 <_dtoa_r+0x3d2>
 8006dd0:	9e02      	ldr	r6, [sp, #8]
 8006dd2:	9b07      	ldr	r3, [sp, #28]
 8006dd4:	e780      	b.n	8006cd8 <_dtoa_r+0x424>
 8006dd6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8006dd8:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8006dda:	1e5a      	subs	r2, r3, #1
 8006ddc:	4b59      	ldr	r3, [pc, #356]	; (8006f44 <_dtoa_r+0x690>)
 8006dde:	00d2      	lsls	r2, r2, #3
 8006de0:	189b      	adds	r3, r3, r2
 8006de2:	681a      	ldr	r2, [r3, #0]
 8006de4:	685b      	ldr	r3, [r3, #4]
 8006de6:	2900      	cmp	r1, #0
 8006de8:	d051      	beq.n	8006e8e <_dtoa_r+0x5da>
 8006dea:	2000      	movs	r0, #0
 8006dec:	495d      	ldr	r1, [pc, #372]	; (8006f64 <_dtoa_r+0x6b0>)
 8006dee:	f7f9 fe95 	bl	8000b1c <__aeabi_ddiv>
 8006df2:	9a08      	ldr	r2, [sp, #32]
 8006df4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006df6:	f7fa fcff 	bl	80017f8 <__aeabi_dsub>
 8006dfa:	9a06      	ldr	r2, [sp, #24]
 8006dfc:	9b06      	ldr	r3, [sp, #24]
 8006dfe:	4694      	mov	ip, r2
 8006e00:	9317      	str	r3, [sp, #92]	; 0x5c
 8006e02:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8006e04:	9010      	str	r0, [sp, #64]	; 0x40
 8006e06:	9111      	str	r1, [sp, #68]	; 0x44
 8006e08:	4463      	add	r3, ip
 8006e0a:	9319      	str	r3, [sp, #100]	; 0x64
 8006e0c:	0029      	movs	r1, r5
 8006e0e:	0020      	movs	r0, r4
 8006e10:	f7fb f8a2 	bl	8001f58 <__aeabi_d2iz>
 8006e14:	9014      	str	r0, [sp, #80]	; 0x50
 8006e16:	f7fb f8d5 	bl	8001fc4 <__aeabi_i2d>
 8006e1a:	0002      	movs	r2, r0
 8006e1c:	000b      	movs	r3, r1
 8006e1e:	0020      	movs	r0, r4
 8006e20:	0029      	movs	r1, r5
 8006e22:	f7fa fce9 	bl	80017f8 <__aeabi_dsub>
 8006e26:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006e28:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8006e2a:	3301      	adds	r3, #1
 8006e2c:	9308      	str	r3, [sp, #32]
 8006e2e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8006e30:	0004      	movs	r4, r0
 8006e32:	3330      	adds	r3, #48	; 0x30
 8006e34:	7013      	strb	r3, [r2, #0]
 8006e36:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8006e38:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006e3a:	000d      	movs	r5, r1
 8006e3c:	f7f9 fb0a 	bl	8000454 <__aeabi_dcmplt>
 8006e40:	2800      	cmp	r0, #0
 8006e42:	d175      	bne.n	8006f30 <_dtoa_r+0x67c>
 8006e44:	0022      	movs	r2, r4
 8006e46:	002b      	movs	r3, r5
 8006e48:	2000      	movs	r0, #0
 8006e4a:	4940      	ldr	r1, [pc, #256]	; (8006f4c <_dtoa_r+0x698>)
 8006e4c:	f7fa fcd4 	bl	80017f8 <__aeabi_dsub>
 8006e50:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8006e52:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006e54:	f7f9 fafe 	bl	8000454 <__aeabi_dcmplt>
 8006e58:	2800      	cmp	r0, #0
 8006e5a:	d000      	beq.n	8006e5e <_dtoa_r+0x5aa>
 8006e5c:	e0d2      	b.n	8007004 <_dtoa_r+0x750>
 8006e5e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8006e60:	9a08      	ldr	r2, [sp, #32]
 8006e62:	4293      	cmp	r3, r2
 8006e64:	d100      	bne.n	8006e68 <_dtoa_r+0x5b4>
 8006e66:	e770      	b.n	8006d4a <_dtoa_r+0x496>
 8006e68:	9810      	ldr	r0, [sp, #64]	; 0x40
 8006e6a:	9911      	ldr	r1, [sp, #68]	; 0x44
 8006e6c:	2200      	movs	r2, #0
 8006e6e:	4b38      	ldr	r3, [pc, #224]	; (8006f50 <_dtoa_r+0x69c>)
 8006e70:	f7fa fa56 	bl	8001320 <__aeabi_dmul>
 8006e74:	4b36      	ldr	r3, [pc, #216]	; (8006f50 <_dtoa_r+0x69c>)
 8006e76:	9010      	str	r0, [sp, #64]	; 0x40
 8006e78:	9111      	str	r1, [sp, #68]	; 0x44
 8006e7a:	2200      	movs	r2, #0
 8006e7c:	0020      	movs	r0, r4
 8006e7e:	0029      	movs	r1, r5
 8006e80:	f7fa fa4e 	bl	8001320 <__aeabi_dmul>
 8006e84:	9b08      	ldr	r3, [sp, #32]
 8006e86:	0004      	movs	r4, r0
 8006e88:	000d      	movs	r5, r1
 8006e8a:	9317      	str	r3, [sp, #92]	; 0x5c
 8006e8c:	e7be      	b.n	8006e0c <_dtoa_r+0x558>
 8006e8e:	9808      	ldr	r0, [sp, #32]
 8006e90:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006e92:	f7fa fa45 	bl	8001320 <__aeabi_dmul>
 8006e96:	9a06      	ldr	r2, [sp, #24]
 8006e98:	9b06      	ldr	r3, [sp, #24]
 8006e9a:	4694      	mov	ip, r2
 8006e9c:	9308      	str	r3, [sp, #32]
 8006e9e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8006ea0:	9010      	str	r0, [sp, #64]	; 0x40
 8006ea2:	9111      	str	r1, [sp, #68]	; 0x44
 8006ea4:	4463      	add	r3, ip
 8006ea6:	9319      	str	r3, [sp, #100]	; 0x64
 8006ea8:	0029      	movs	r1, r5
 8006eaa:	0020      	movs	r0, r4
 8006eac:	f7fb f854 	bl	8001f58 <__aeabi_d2iz>
 8006eb0:	9017      	str	r0, [sp, #92]	; 0x5c
 8006eb2:	f7fb f887 	bl	8001fc4 <__aeabi_i2d>
 8006eb6:	0002      	movs	r2, r0
 8006eb8:	000b      	movs	r3, r1
 8006eba:	0020      	movs	r0, r4
 8006ebc:	0029      	movs	r1, r5
 8006ebe:	f7fa fc9b 	bl	80017f8 <__aeabi_dsub>
 8006ec2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006ec4:	9a08      	ldr	r2, [sp, #32]
 8006ec6:	3330      	adds	r3, #48	; 0x30
 8006ec8:	7013      	strb	r3, [r2, #0]
 8006eca:	0013      	movs	r3, r2
 8006ecc:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8006ece:	3301      	adds	r3, #1
 8006ed0:	0004      	movs	r4, r0
 8006ed2:	000d      	movs	r5, r1
 8006ed4:	9308      	str	r3, [sp, #32]
 8006ed6:	4293      	cmp	r3, r2
 8006ed8:	d12c      	bne.n	8006f34 <_dtoa_r+0x680>
 8006eda:	9810      	ldr	r0, [sp, #64]	; 0x40
 8006edc:	9911      	ldr	r1, [sp, #68]	; 0x44
 8006ede:	9a06      	ldr	r2, [sp, #24]
 8006ee0:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8006ee2:	4694      	mov	ip, r2
 8006ee4:	4463      	add	r3, ip
 8006ee6:	2200      	movs	r2, #0
 8006ee8:	9308      	str	r3, [sp, #32]
 8006eea:	4b1e      	ldr	r3, [pc, #120]	; (8006f64 <_dtoa_r+0x6b0>)
 8006eec:	f7f9 fada 	bl	80004a4 <__aeabi_dadd>
 8006ef0:	0002      	movs	r2, r0
 8006ef2:	000b      	movs	r3, r1
 8006ef4:	0020      	movs	r0, r4
 8006ef6:	0029      	movs	r1, r5
 8006ef8:	f7f9 fac0 	bl	800047c <__aeabi_dcmpgt>
 8006efc:	2800      	cmp	r0, #0
 8006efe:	d000      	beq.n	8006f02 <_dtoa_r+0x64e>
 8006f00:	e080      	b.n	8007004 <_dtoa_r+0x750>
 8006f02:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8006f04:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006f06:	2000      	movs	r0, #0
 8006f08:	4916      	ldr	r1, [pc, #88]	; (8006f64 <_dtoa_r+0x6b0>)
 8006f0a:	f7fa fc75 	bl	80017f8 <__aeabi_dsub>
 8006f0e:	0002      	movs	r2, r0
 8006f10:	000b      	movs	r3, r1
 8006f12:	0020      	movs	r0, r4
 8006f14:	0029      	movs	r1, r5
 8006f16:	f7f9 fa9d 	bl	8000454 <__aeabi_dcmplt>
 8006f1a:	2800      	cmp	r0, #0
 8006f1c:	d100      	bne.n	8006f20 <_dtoa_r+0x66c>
 8006f1e:	e714      	b.n	8006d4a <_dtoa_r+0x496>
 8006f20:	9b08      	ldr	r3, [sp, #32]
 8006f22:	001a      	movs	r2, r3
 8006f24:	3a01      	subs	r2, #1
 8006f26:	9208      	str	r2, [sp, #32]
 8006f28:	7812      	ldrb	r2, [r2, #0]
 8006f2a:	2a30      	cmp	r2, #48	; 0x30
 8006f2c:	d0f8      	beq.n	8006f20 <_dtoa_r+0x66c>
 8006f2e:	9308      	str	r3, [sp, #32]
 8006f30:	9602      	str	r6, [sp, #8]
 8006f32:	e055      	b.n	8006fe0 <_dtoa_r+0x72c>
 8006f34:	2200      	movs	r2, #0
 8006f36:	4b06      	ldr	r3, [pc, #24]	; (8006f50 <_dtoa_r+0x69c>)
 8006f38:	f7fa f9f2 	bl	8001320 <__aeabi_dmul>
 8006f3c:	0004      	movs	r4, r0
 8006f3e:	000d      	movs	r5, r1
 8006f40:	e7b2      	b.n	8006ea8 <_dtoa_r+0x5f4>
 8006f42:	46c0      	nop			; (mov r8, r8)
 8006f44:	080095c0 	.word	0x080095c0
 8006f48:	08009598 	.word	0x08009598
 8006f4c:	3ff00000 	.word	0x3ff00000
 8006f50:	40240000 	.word	0x40240000
 8006f54:	401c0000 	.word	0x401c0000
 8006f58:	fcc00000 	.word	0xfcc00000
 8006f5c:	40140000 	.word	0x40140000
 8006f60:	7cc00000 	.word	0x7cc00000
 8006f64:	3fe00000 	.word	0x3fe00000
 8006f68:	9b07      	ldr	r3, [sp, #28]
 8006f6a:	9e06      	ldr	r6, [sp, #24]
 8006f6c:	3b01      	subs	r3, #1
 8006f6e:	199b      	adds	r3, r3, r6
 8006f70:	930c      	str	r3, [sp, #48]	; 0x30
 8006f72:	9c08      	ldr	r4, [sp, #32]
 8006f74:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8006f76:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006f78:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006f7a:	0020      	movs	r0, r4
 8006f7c:	0029      	movs	r1, r5
 8006f7e:	f7f9 fdcd 	bl	8000b1c <__aeabi_ddiv>
 8006f82:	f7fa ffe9 	bl	8001f58 <__aeabi_d2iz>
 8006f86:	9007      	str	r0, [sp, #28]
 8006f88:	f7fb f81c 	bl	8001fc4 <__aeabi_i2d>
 8006f8c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006f8e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006f90:	f7fa f9c6 	bl	8001320 <__aeabi_dmul>
 8006f94:	0002      	movs	r2, r0
 8006f96:	000b      	movs	r3, r1
 8006f98:	0020      	movs	r0, r4
 8006f9a:	0029      	movs	r1, r5
 8006f9c:	f7fa fc2c 	bl	80017f8 <__aeabi_dsub>
 8006fa0:	0033      	movs	r3, r6
 8006fa2:	9a07      	ldr	r2, [sp, #28]
 8006fa4:	3601      	adds	r6, #1
 8006fa6:	3230      	adds	r2, #48	; 0x30
 8006fa8:	701a      	strb	r2, [r3, #0]
 8006faa:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006fac:	9608      	str	r6, [sp, #32]
 8006fae:	429a      	cmp	r2, r3
 8006fb0:	d139      	bne.n	8007026 <_dtoa_r+0x772>
 8006fb2:	0002      	movs	r2, r0
 8006fb4:	000b      	movs	r3, r1
 8006fb6:	f7f9 fa75 	bl	80004a4 <__aeabi_dadd>
 8006fba:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006fbc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006fbe:	0004      	movs	r4, r0
 8006fc0:	000d      	movs	r5, r1
 8006fc2:	f7f9 fa5b 	bl	800047c <__aeabi_dcmpgt>
 8006fc6:	2800      	cmp	r0, #0
 8006fc8:	d11b      	bne.n	8007002 <_dtoa_r+0x74e>
 8006fca:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006fcc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006fce:	0020      	movs	r0, r4
 8006fd0:	0029      	movs	r1, r5
 8006fd2:	f7f9 fa39 	bl	8000448 <__aeabi_dcmpeq>
 8006fd6:	2800      	cmp	r0, #0
 8006fd8:	d002      	beq.n	8006fe0 <_dtoa_r+0x72c>
 8006fda:	9b07      	ldr	r3, [sp, #28]
 8006fdc:	07db      	lsls	r3, r3, #31
 8006fde:	d410      	bmi.n	8007002 <_dtoa_r+0x74e>
 8006fe0:	0038      	movs	r0, r7
 8006fe2:	9905      	ldr	r1, [sp, #20]
 8006fe4:	f000 faf6 	bl	80075d4 <_Bfree>
 8006fe8:	2300      	movs	r3, #0
 8006fea:	9a08      	ldr	r2, [sp, #32]
 8006fec:	9802      	ldr	r0, [sp, #8]
 8006fee:	7013      	strb	r3, [r2, #0]
 8006ff0:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8006ff2:	3001      	adds	r0, #1
 8006ff4:	6018      	str	r0, [r3, #0]
 8006ff6:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8006ff8:	2b00      	cmp	r3, #0
 8006ffa:	d100      	bne.n	8006ffe <_dtoa_r+0x74a>
 8006ffc:	e4a6      	b.n	800694c <_dtoa_r+0x98>
 8006ffe:	601a      	str	r2, [r3, #0]
 8007000:	e4a4      	b.n	800694c <_dtoa_r+0x98>
 8007002:	9e02      	ldr	r6, [sp, #8]
 8007004:	9b08      	ldr	r3, [sp, #32]
 8007006:	9308      	str	r3, [sp, #32]
 8007008:	3b01      	subs	r3, #1
 800700a:	781a      	ldrb	r2, [r3, #0]
 800700c:	2a39      	cmp	r2, #57	; 0x39
 800700e:	d106      	bne.n	800701e <_dtoa_r+0x76a>
 8007010:	9a06      	ldr	r2, [sp, #24]
 8007012:	429a      	cmp	r2, r3
 8007014:	d1f7      	bne.n	8007006 <_dtoa_r+0x752>
 8007016:	2230      	movs	r2, #48	; 0x30
 8007018:	9906      	ldr	r1, [sp, #24]
 800701a:	3601      	adds	r6, #1
 800701c:	700a      	strb	r2, [r1, #0]
 800701e:	781a      	ldrb	r2, [r3, #0]
 8007020:	3201      	adds	r2, #1
 8007022:	701a      	strb	r2, [r3, #0]
 8007024:	e784      	b.n	8006f30 <_dtoa_r+0x67c>
 8007026:	2200      	movs	r2, #0
 8007028:	4baa      	ldr	r3, [pc, #680]	; (80072d4 <_dtoa_r+0xa20>)
 800702a:	f7fa f979 	bl	8001320 <__aeabi_dmul>
 800702e:	2200      	movs	r2, #0
 8007030:	2300      	movs	r3, #0
 8007032:	0004      	movs	r4, r0
 8007034:	000d      	movs	r5, r1
 8007036:	f7f9 fa07 	bl	8000448 <__aeabi_dcmpeq>
 800703a:	2800      	cmp	r0, #0
 800703c:	d09b      	beq.n	8006f76 <_dtoa_r+0x6c2>
 800703e:	e7cf      	b.n	8006fe0 <_dtoa_r+0x72c>
 8007040:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8007042:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 8007044:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8007046:	2d00      	cmp	r5, #0
 8007048:	d012      	beq.n	8007070 <_dtoa_r+0x7bc>
 800704a:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800704c:	2a01      	cmp	r2, #1
 800704e:	dc66      	bgt.n	800711e <_dtoa_r+0x86a>
 8007050:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8007052:	2a00      	cmp	r2, #0
 8007054:	d05d      	beq.n	8007112 <_dtoa_r+0x85e>
 8007056:	4aa0      	ldr	r2, [pc, #640]	; (80072d8 <_dtoa_r+0xa24>)
 8007058:	189b      	adds	r3, r3, r2
 800705a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800705c:	2101      	movs	r1, #1
 800705e:	18d2      	adds	r2, r2, r3
 8007060:	920a      	str	r2, [sp, #40]	; 0x28
 8007062:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007064:	0038      	movs	r0, r7
 8007066:	18d3      	adds	r3, r2, r3
 8007068:	930d      	str	r3, [sp, #52]	; 0x34
 800706a:	f000 fb63 	bl	8007734 <__i2b>
 800706e:	0005      	movs	r5, r0
 8007070:	2c00      	cmp	r4, #0
 8007072:	dd0e      	ble.n	8007092 <_dtoa_r+0x7de>
 8007074:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007076:	2b00      	cmp	r3, #0
 8007078:	dd0b      	ble.n	8007092 <_dtoa_r+0x7de>
 800707a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800707c:	0023      	movs	r3, r4
 800707e:	4294      	cmp	r4, r2
 8007080:	dd00      	ble.n	8007084 <_dtoa_r+0x7d0>
 8007082:	0013      	movs	r3, r2
 8007084:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007086:	1ae4      	subs	r4, r4, r3
 8007088:	1ad2      	subs	r2, r2, r3
 800708a:	920a      	str	r2, [sp, #40]	; 0x28
 800708c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800708e:	1ad3      	subs	r3, r2, r3
 8007090:	930d      	str	r3, [sp, #52]	; 0x34
 8007092:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007094:	2b00      	cmp	r3, #0
 8007096:	d01f      	beq.n	80070d8 <_dtoa_r+0x824>
 8007098:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800709a:	2b00      	cmp	r3, #0
 800709c:	d054      	beq.n	8007148 <_dtoa_r+0x894>
 800709e:	2e00      	cmp	r6, #0
 80070a0:	dd11      	ble.n	80070c6 <_dtoa_r+0x812>
 80070a2:	0029      	movs	r1, r5
 80070a4:	0032      	movs	r2, r6
 80070a6:	0038      	movs	r0, r7
 80070a8:	f000 fc0a 	bl	80078c0 <__pow5mult>
 80070ac:	9a05      	ldr	r2, [sp, #20]
 80070ae:	0001      	movs	r1, r0
 80070b0:	0005      	movs	r5, r0
 80070b2:	0038      	movs	r0, r7
 80070b4:	f000 fb54 	bl	8007760 <__multiply>
 80070b8:	9905      	ldr	r1, [sp, #20]
 80070ba:	9014      	str	r0, [sp, #80]	; 0x50
 80070bc:	0038      	movs	r0, r7
 80070be:	f000 fa89 	bl	80075d4 <_Bfree>
 80070c2:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80070c4:	9305      	str	r3, [sp, #20]
 80070c6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80070c8:	1b9a      	subs	r2, r3, r6
 80070ca:	42b3      	cmp	r3, r6
 80070cc:	d004      	beq.n	80070d8 <_dtoa_r+0x824>
 80070ce:	0038      	movs	r0, r7
 80070d0:	9905      	ldr	r1, [sp, #20]
 80070d2:	f000 fbf5 	bl	80078c0 <__pow5mult>
 80070d6:	9005      	str	r0, [sp, #20]
 80070d8:	2101      	movs	r1, #1
 80070da:	0038      	movs	r0, r7
 80070dc:	f000 fb2a 	bl	8007734 <__i2b>
 80070e0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80070e2:	0006      	movs	r6, r0
 80070e4:	2b00      	cmp	r3, #0
 80070e6:	dd31      	ble.n	800714c <_dtoa_r+0x898>
 80070e8:	001a      	movs	r2, r3
 80070ea:	0001      	movs	r1, r0
 80070ec:	0038      	movs	r0, r7
 80070ee:	f000 fbe7 	bl	80078c0 <__pow5mult>
 80070f2:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80070f4:	0006      	movs	r6, r0
 80070f6:	2b01      	cmp	r3, #1
 80070f8:	dd2d      	ble.n	8007156 <_dtoa_r+0x8a2>
 80070fa:	2300      	movs	r3, #0
 80070fc:	930e      	str	r3, [sp, #56]	; 0x38
 80070fe:	6933      	ldr	r3, [r6, #16]
 8007100:	3303      	adds	r3, #3
 8007102:	009b      	lsls	r3, r3, #2
 8007104:	18f3      	adds	r3, r6, r3
 8007106:	6858      	ldr	r0, [r3, #4]
 8007108:	f000 facc 	bl	80076a4 <__hi0bits>
 800710c:	2320      	movs	r3, #32
 800710e:	1a18      	subs	r0, r3, r0
 8007110:	e039      	b.n	8007186 <_dtoa_r+0x8d2>
 8007112:	2336      	movs	r3, #54	; 0x36
 8007114:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8007116:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 8007118:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800711a:	1a9b      	subs	r3, r3, r2
 800711c:	e79d      	b.n	800705a <_dtoa_r+0x7a6>
 800711e:	9b07      	ldr	r3, [sp, #28]
 8007120:	1e5e      	subs	r6, r3, #1
 8007122:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007124:	42b3      	cmp	r3, r6
 8007126:	db07      	blt.n	8007138 <_dtoa_r+0x884>
 8007128:	1b9e      	subs	r6, r3, r6
 800712a:	9b07      	ldr	r3, [sp, #28]
 800712c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800712e:	2b00      	cmp	r3, #0
 8007130:	da93      	bge.n	800705a <_dtoa_r+0x7a6>
 8007132:	1ae4      	subs	r4, r4, r3
 8007134:	2300      	movs	r3, #0
 8007136:	e790      	b.n	800705a <_dtoa_r+0x7a6>
 8007138:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800713a:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800713c:	1af3      	subs	r3, r6, r3
 800713e:	18d3      	adds	r3, r2, r3
 8007140:	960e      	str	r6, [sp, #56]	; 0x38
 8007142:	9315      	str	r3, [sp, #84]	; 0x54
 8007144:	2600      	movs	r6, #0
 8007146:	e7f0      	b.n	800712a <_dtoa_r+0x876>
 8007148:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800714a:	e7c0      	b.n	80070ce <_dtoa_r+0x81a>
 800714c:	2300      	movs	r3, #0
 800714e:	930e      	str	r3, [sp, #56]	; 0x38
 8007150:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007152:	2b01      	cmp	r3, #1
 8007154:	dc13      	bgt.n	800717e <_dtoa_r+0x8ca>
 8007156:	2300      	movs	r3, #0
 8007158:	930e      	str	r3, [sp, #56]	; 0x38
 800715a:	9b08      	ldr	r3, [sp, #32]
 800715c:	2b00      	cmp	r3, #0
 800715e:	d10e      	bne.n	800717e <_dtoa_r+0x8ca>
 8007160:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007162:	031b      	lsls	r3, r3, #12
 8007164:	d10b      	bne.n	800717e <_dtoa_r+0x8ca>
 8007166:	4b5d      	ldr	r3, [pc, #372]	; (80072dc <_dtoa_r+0xa28>)
 8007168:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800716a:	4213      	tst	r3, r2
 800716c:	d007      	beq.n	800717e <_dtoa_r+0x8ca>
 800716e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007170:	3301      	adds	r3, #1
 8007172:	930a      	str	r3, [sp, #40]	; 0x28
 8007174:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007176:	3301      	adds	r3, #1
 8007178:	930d      	str	r3, [sp, #52]	; 0x34
 800717a:	2301      	movs	r3, #1
 800717c:	930e      	str	r3, [sp, #56]	; 0x38
 800717e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007180:	2001      	movs	r0, #1
 8007182:	2b00      	cmp	r3, #0
 8007184:	d1bb      	bne.n	80070fe <_dtoa_r+0x84a>
 8007186:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007188:	221f      	movs	r2, #31
 800718a:	1818      	adds	r0, r3, r0
 800718c:	0003      	movs	r3, r0
 800718e:	4013      	ands	r3, r2
 8007190:	4210      	tst	r0, r2
 8007192:	d046      	beq.n	8007222 <_dtoa_r+0x96e>
 8007194:	3201      	adds	r2, #1
 8007196:	1ad2      	subs	r2, r2, r3
 8007198:	2a04      	cmp	r2, #4
 800719a:	dd3f      	ble.n	800721c <_dtoa_r+0x968>
 800719c:	221c      	movs	r2, #28
 800719e:	1ad3      	subs	r3, r2, r3
 80071a0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80071a2:	18e4      	adds	r4, r4, r3
 80071a4:	18d2      	adds	r2, r2, r3
 80071a6:	920a      	str	r2, [sp, #40]	; 0x28
 80071a8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80071aa:	18d3      	adds	r3, r2, r3
 80071ac:	930d      	str	r3, [sp, #52]	; 0x34
 80071ae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80071b0:	2b00      	cmp	r3, #0
 80071b2:	dd05      	ble.n	80071c0 <_dtoa_r+0x90c>
 80071b4:	001a      	movs	r2, r3
 80071b6:	0038      	movs	r0, r7
 80071b8:	9905      	ldr	r1, [sp, #20]
 80071ba:	f000 fbdd 	bl	8007978 <__lshift>
 80071be:	9005      	str	r0, [sp, #20]
 80071c0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80071c2:	2b00      	cmp	r3, #0
 80071c4:	dd05      	ble.n	80071d2 <_dtoa_r+0x91e>
 80071c6:	0031      	movs	r1, r6
 80071c8:	001a      	movs	r2, r3
 80071ca:	0038      	movs	r0, r7
 80071cc:	f000 fbd4 	bl	8007978 <__lshift>
 80071d0:	0006      	movs	r6, r0
 80071d2:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80071d4:	2b00      	cmp	r3, #0
 80071d6:	d026      	beq.n	8007226 <_dtoa_r+0x972>
 80071d8:	0031      	movs	r1, r6
 80071da:	9805      	ldr	r0, [sp, #20]
 80071dc:	f000 fc3a 	bl	8007a54 <__mcmp>
 80071e0:	2800      	cmp	r0, #0
 80071e2:	da20      	bge.n	8007226 <_dtoa_r+0x972>
 80071e4:	9b02      	ldr	r3, [sp, #8]
 80071e6:	220a      	movs	r2, #10
 80071e8:	3b01      	subs	r3, #1
 80071ea:	9302      	str	r3, [sp, #8]
 80071ec:	0038      	movs	r0, r7
 80071ee:	2300      	movs	r3, #0
 80071f0:	9905      	ldr	r1, [sp, #20]
 80071f2:	f000 fa13 	bl	800761c <__multadd>
 80071f6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80071f8:	9005      	str	r0, [sp, #20]
 80071fa:	2b00      	cmp	r3, #0
 80071fc:	d100      	bne.n	8007200 <_dtoa_r+0x94c>
 80071fe:	e166      	b.n	80074ce <_dtoa_r+0xc1a>
 8007200:	2300      	movs	r3, #0
 8007202:	0029      	movs	r1, r5
 8007204:	220a      	movs	r2, #10
 8007206:	0038      	movs	r0, r7
 8007208:	f000 fa08 	bl	800761c <__multadd>
 800720c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800720e:	0005      	movs	r5, r0
 8007210:	2b00      	cmp	r3, #0
 8007212:	dc47      	bgt.n	80072a4 <_dtoa_r+0x9f0>
 8007214:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007216:	2b02      	cmp	r3, #2
 8007218:	dc0d      	bgt.n	8007236 <_dtoa_r+0x982>
 800721a:	e043      	b.n	80072a4 <_dtoa_r+0x9f0>
 800721c:	2a04      	cmp	r2, #4
 800721e:	d0c6      	beq.n	80071ae <_dtoa_r+0x8fa>
 8007220:	0013      	movs	r3, r2
 8007222:	331c      	adds	r3, #28
 8007224:	e7bc      	b.n	80071a0 <_dtoa_r+0x8ec>
 8007226:	9b07      	ldr	r3, [sp, #28]
 8007228:	2b00      	cmp	r3, #0
 800722a:	dc35      	bgt.n	8007298 <_dtoa_r+0x9e4>
 800722c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800722e:	2b02      	cmp	r3, #2
 8007230:	dd32      	ble.n	8007298 <_dtoa_r+0x9e4>
 8007232:	9b07      	ldr	r3, [sp, #28]
 8007234:	930c      	str	r3, [sp, #48]	; 0x30
 8007236:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007238:	2b00      	cmp	r3, #0
 800723a:	d10c      	bne.n	8007256 <_dtoa_r+0x9a2>
 800723c:	0031      	movs	r1, r6
 800723e:	2205      	movs	r2, #5
 8007240:	0038      	movs	r0, r7
 8007242:	f000 f9eb 	bl	800761c <__multadd>
 8007246:	0006      	movs	r6, r0
 8007248:	0001      	movs	r1, r0
 800724a:	9805      	ldr	r0, [sp, #20]
 800724c:	f000 fc02 	bl	8007a54 <__mcmp>
 8007250:	2800      	cmp	r0, #0
 8007252:	dd00      	ble.n	8007256 <_dtoa_r+0x9a2>
 8007254:	e5a5      	b.n	8006da2 <_dtoa_r+0x4ee>
 8007256:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8007258:	43db      	mvns	r3, r3
 800725a:	9302      	str	r3, [sp, #8]
 800725c:	9b06      	ldr	r3, [sp, #24]
 800725e:	9308      	str	r3, [sp, #32]
 8007260:	2400      	movs	r4, #0
 8007262:	0031      	movs	r1, r6
 8007264:	0038      	movs	r0, r7
 8007266:	f000 f9b5 	bl	80075d4 <_Bfree>
 800726a:	2d00      	cmp	r5, #0
 800726c:	d100      	bne.n	8007270 <_dtoa_r+0x9bc>
 800726e:	e6b7      	b.n	8006fe0 <_dtoa_r+0x72c>
 8007270:	2c00      	cmp	r4, #0
 8007272:	d005      	beq.n	8007280 <_dtoa_r+0x9cc>
 8007274:	42ac      	cmp	r4, r5
 8007276:	d003      	beq.n	8007280 <_dtoa_r+0x9cc>
 8007278:	0021      	movs	r1, r4
 800727a:	0038      	movs	r0, r7
 800727c:	f000 f9aa 	bl	80075d4 <_Bfree>
 8007280:	0029      	movs	r1, r5
 8007282:	0038      	movs	r0, r7
 8007284:	f000 f9a6 	bl	80075d4 <_Bfree>
 8007288:	e6aa      	b.n	8006fe0 <_dtoa_r+0x72c>
 800728a:	2600      	movs	r6, #0
 800728c:	0035      	movs	r5, r6
 800728e:	e7e2      	b.n	8007256 <_dtoa_r+0x9a2>
 8007290:	9602      	str	r6, [sp, #8]
 8007292:	9e14      	ldr	r6, [sp, #80]	; 0x50
 8007294:	0035      	movs	r5, r6
 8007296:	e584      	b.n	8006da2 <_dtoa_r+0x4ee>
 8007298:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800729a:	2b00      	cmp	r3, #0
 800729c:	d100      	bne.n	80072a0 <_dtoa_r+0x9ec>
 800729e:	e0ce      	b.n	800743e <_dtoa_r+0xb8a>
 80072a0:	9b07      	ldr	r3, [sp, #28]
 80072a2:	930c      	str	r3, [sp, #48]	; 0x30
 80072a4:	2c00      	cmp	r4, #0
 80072a6:	dd05      	ble.n	80072b4 <_dtoa_r+0xa00>
 80072a8:	0029      	movs	r1, r5
 80072aa:	0022      	movs	r2, r4
 80072ac:	0038      	movs	r0, r7
 80072ae:	f000 fb63 	bl	8007978 <__lshift>
 80072b2:	0005      	movs	r5, r0
 80072b4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80072b6:	0028      	movs	r0, r5
 80072b8:	2b00      	cmp	r3, #0
 80072ba:	d022      	beq.n	8007302 <_dtoa_r+0xa4e>
 80072bc:	0038      	movs	r0, r7
 80072be:	6869      	ldr	r1, [r5, #4]
 80072c0:	f000 f944 	bl	800754c <_Balloc>
 80072c4:	1e04      	subs	r4, r0, #0
 80072c6:	d10f      	bne.n	80072e8 <_dtoa_r+0xa34>
 80072c8:	0002      	movs	r2, r0
 80072ca:	4b05      	ldr	r3, [pc, #20]	; (80072e0 <_dtoa_r+0xa2c>)
 80072cc:	4905      	ldr	r1, [pc, #20]	; (80072e4 <_dtoa_r+0xa30>)
 80072ce:	f7ff fb06 	bl	80068de <_dtoa_r+0x2a>
 80072d2:	46c0      	nop			; (mov r8, r8)
 80072d4:	40240000 	.word	0x40240000
 80072d8:	00000433 	.word	0x00000433
 80072dc:	7ff00000 	.word	0x7ff00000
 80072e0:	08009527 	.word	0x08009527
 80072e4:	000002ea 	.word	0x000002ea
 80072e8:	0029      	movs	r1, r5
 80072ea:	692b      	ldr	r3, [r5, #16]
 80072ec:	310c      	adds	r1, #12
 80072ee:	1c9a      	adds	r2, r3, #2
 80072f0:	0092      	lsls	r2, r2, #2
 80072f2:	300c      	adds	r0, #12
 80072f4:	f000 f921 	bl	800753a <memcpy>
 80072f8:	2201      	movs	r2, #1
 80072fa:	0021      	movs	r1, r4
 80072fc:	0038      	movs	r0, r7
 80072fe:	f000 fb3b 	bl	8007978 <__lshift>
 8007302:	9b06      	ldr	r3, [sp, #24]
 8007304:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007306:	930a      	str	r3, [sp, #40]	; 0x28
 8007308:	3b01      	subs	r3, #1
 800730a:	189b      	adds	r3, r3, r2
 800730c:	2201      	movs	r2, #1
 800730e:	002c      	movs	r4, r5
 8007310:	0005      	movs	r5, r0
 8007312:	9314      	str	r3, [sp, #80]	; 0x50
 8007314:	9b08      	ldr	r3, [sp, #32]
 8007316:	4013      	ands	r3, r2
 8007318:	930f      	str	r3, [sp, #60]	; 0x3c
 800731a:	0031      	movs	r1, r6
 800731c:	9805      	ldr	r0, [sp, #20]
 800731e:	f7ff fa3d 	bl	800679c <quorem>
 8007322:	0003      	movs	r3, r0
 8007324:	0021      	movs	r1, r4
 8007326:	3330      	adds	r3, #48	; 0x30
 8007328:	900d      	str	r0, [sp, #52]	; 0x34
 800732a:	9805      	ldr	r0, [sp, #20]
 800732c:	9307      	str	r3, [sp, #28]
 800732e:	f000 fb91 	bl	8007a54 <__mcmp>
 8007332:	002a      	movs	r2, r5
 8007334:	900e      	str	r0, [sp, #56]	; 0x38
 8007336:	0031      	movs	r1, r6
 8007338:	0038      	movs	r0, r7
 800733a:	f000 fba7 	bl	8007a8c <__mdiff>
 800733e:	68c3      	ldr	r3, [r0, #12]
 8007340:	9008      	str	r0, [sp, #32]
 8007342:	9310      	str	r3, [sp, #64]	; 0x40
 8007344:	2301      	movs	r3, #1
 8007346:	930c      	str	r3, [sp, #48]	; 0x30
 8007348:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800734a:	2b00      	cmp	r3, #0
 800734c:	d104      	bne.n	8007358 <_dtoa_r+0xaa4>
 800734e:	0001      	movs	r1, r0
 8007350:	9805      	ldr	r0, [sp, #20]
 8007352:	f000 fb7f 	bl	8007a54 <__mcmp>
 8007356:	900c      	str	r0, [sp, #48]	; 0x30
 8007358:	0038      	movs	r0, r7
 800735a:	9908      	ldr	r1, [sp, #32]
 800735c:	f000 f93a 	bl	80075d4 <_Bfree>
 8007360:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007362:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007364:	3301      	adds	r3, #1
 8007366:	9308      	str	r3, [sp, #32]
 8007368:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800736a:	4313      	orrs	r3, r2
 800736c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800736e:	4313      	orrs	r3, r2
 8007370:	d10c      	bne.n	800738c <_dtoa_r+0xad8>
 8007372:	9b07      	ldr	r3, [sp, #28]
 8007374:	2b39      	cmp	r3, #57	; 0x39
 8007376:	d026      	beq.n	80073c6 <_dtoa_r+0xb12>
 8007378:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800737a:	2b00      	cmp	r3, #0
 800737c:	dd02      	ble.n	8007384 <_dtoa_r+0xad0>
 800737e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007380:	3331      	adds	r3, #49	; 0x31
 8007382:	9307      	str	r3, [sp, #28]
 8007384:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007386:	9a07      	ldr	r2, [sp, #28]
 8007388:	701a      	strb	r2, [r3, #0]
 800738a:	e76a      	b.n	8007262 <_dtoa_r+0x9ae>
 800738c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800738e:	2b00      	cmp	r3, #0
 8007390:	db04      	blt.n	800739c <_dtoa_r+0xae8>
 8007392:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8007394:	4313      	orrs	r3, r2
 8007396:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8007398:	4313      	orrs	r3, r2
 800739a:	d11f      	bne.n	80073dc <_dtoa_r+0xb28>
 800739c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800739e:	2b00      	cmp	r3, #0
 80073a0:	ddf0      	ble.n	8007384 <_dtoa_r+0xad0>
 80073a2:	9905      	ldr	r1, [sp, #20]
 80073a4:	2201      	movs	r2, #1
 80073a6:	0038      	movs	r0, r7
 80073a8:	f000 fae6 	bl	8007978 <__lshift>
 80073ac:	0031      	movs	r1, r6
 80073ae:	9005      	str	r0, [sp, #20]
 80073b0:	f000 fb50 	bl	8007a54 <__mcmp>
 80073b4:	2800      	cmp	r0, #0
 80073b6:	dc03      	bgt.n	80073c0 <_dtoa_r+0xb0c>
 80073b8:	d1e4      	bne.n	8007384 <_dtoa_r+0xad0>
 80073ba:	9b07      	ldr	r3, [sp, #28]
 80073bc:	07db      	lsls	r3, r3, #31
 80073be:	d5e1      	bpl.n	8007384 <_dtoa_r+0xad0>
 80073c0:	9b07      	ldr	r3, [sp, #28]
 80073c2:	2b39      	cmp	r3, #57	; 0x39
 80073c4:	d1db      	bne.n	800737e <_dtoa_r+0xaca>
 80073c6:	2339      	movs	r3, #57	; 0x39
 80073c8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80073ca:	7013      	strb	r3, [r2, #0]
 80073cc:	9b08      	ldr	r3, [sp, #32]
 80073ce:	9308      	str	r3, [sp, #32]
 80073d0:	3b01      	subs	r3, #1
 80073d2:	781a      	ldrb	r2, [r3, #0]
 80073d4:	2a39      	cmp	r2, #57	; 0x39
 80073d6:	d068      	beq.n	80074aa <_dtoa_r+0xbf6>
 80073d8:	3201      	adds	r2, #1
 80073da:	e7d5      	b.n	8007388 <_dtoa_r+0xad4>
 80073dc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80073de:	2b00      	cmp	r3, #0
 80073e0:	dd07      	ble.n	80073f2 <_dtoa_r+0xb3e>
 80073e2:	9b07      	ldr	r3, [sp, #28]
 80073e4:	2b39      	cmp	r3, #57	; 0x39
 80073e6:	d0ee      	beq.n	80073c6 <_dtoa_r+0xb12>
 80073e8:	9b07      	ldr	r3, [sp, #28]
 80073ea:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80073ec:	3301      	adds	r3, #1
 80073ee:	7013      	strb	r3, [r2, #0]
 80073f0:	e737      	b.n	8007262 <_dtoa_r+0x9ae>
 80073f2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80073f4:	9a07      	ldr	r2, [sp, #28]
 80073f6:	701a      	strb	r2, [r3, #0]
 80073f8:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80073fa:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80073fc:	4293      	cmp	r3, r2
 80073fe:	d03e      	beq.n	800747e <_dtoa_r+0xbca>
 8007400:	2300      	movs	r3, #0
 8007402:	220a      	movs	r2, #10
 8007404:	9905      	ldr	r1, [sp, #20]
 8007406:	0038      	movs	r0, r7
 8007408:	f000 f908 	bl	800761c <__multadd>
 800740c:	2300      	movs	r3, #0
 800740e:	9005      	str	r0, [sp, #20]
 8007410:	220a      	movs	r2, #10
 8007412:	0021      	movs	r1, r4
 8007414:	0038      	movs	r0, r7
 8007416:	42ac      	cmp	r4, r5
 8007418:	d106      	bne.n	8007428 <_dtoa_r+0xb74>
 800741a:	f000 f8ff 	bl	800761c <__multadd>
 800741e:	0004      	movs	r4, r0
 8007420:	0005      	movs	r5, r0
 8007422:	9b08      	ldr	r3, [sp, #32]
 8007424:	930a      	str	r3, [sp, #40]	; 0x28
 8007426:	e778      	b.n	800731a <_dtoa_r+0xa66>
 8007428:	f000 f8f8 	bl	800761c <__multadd>
 800742c:	0029      	movs	r1, r5
 800742e:	0004      	movs	r4, r0
 8007430:	2300      	movs	r3, #0
 8007432:	220a      	movs	r2, #10
 8007434:	0038      	movs	r0, r7
 8007436:	f000 f8f1 	bl	800761c <__multadd>
 800743a:	0005      	movs	r5, r0
 800743c:	e7f1      	b.n	8007422 <_dtoa_r+0xb6e>
 800743e:	9b07      	ldr	r3, [sp, #28]
 8007440:	930c      	str	r3, [sp, #48]	; 0x30
 8007442:	2400      	movs	r4, #0
 8007444:	0031      	movs	r1, r6
 8007446:	9805      	ldr	r0, [sp, #20]
 8007448:	f7ff f9a8 	bl	800679c <quorem>
 800744c:	9b06      	ldr	r3, [sp, #24]
 800744e:	3030      	adds	r0, #48	; 0x30
 8007450:	5518      	strb	r0, [r3, r4]
 8007452:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007454:	3401      	adds	r4, #1
 8007456:	9007      	str	r0, [sp, #28]
 8007458:	42a3      	cmp	r3, r4
 800745a:	dd07      	ble.n	800746c <_dtoa_r+0xbb8>
 800745c:	2300      	movs	r3, #0
 800745e:	220a      	movs	r2, #10
 8007460:	0038      	movs	r0, r7
 8007462:	9905      	ldr	r1, [sp, #20]
 8007464:	f000 f8da 	bl	800761c <__multadd>
 8007468:	9005      	str	r0, [sp, #20]
 800746a:	e7eb      	b.n	8007444 <_dtoa_r+0xb90>
 800746c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800746e:	2001      	movs	r0, #1
 8007470:	2b00      	cmp	r3, #0
 8007472:	dd00      	ble.n	8007476 <_dtoa_r+0xbc2>
 8007474:	0018      	movs	r0, r3
 8007476:	2400      	movs	r4, #0
 8007478:	9b06      	ldr	r3, [sp, #24]
 800747a:	181b      	adds	r3, r3, r0
 800747c:	9308      	str	r3, [sp, #32]
 800747e:	9905      	ldr	r1, [sp, #20]
 8007480:	2201      	movs	r2, #1
 8007482:	0038      	movs	r0, r7
 8007484:	f000 fa78 	bl	8007978 <__lshift>
 8007488:	0031      	movs	r1, r6
 800748a:	9005      	str	r0, [sp, #20]
 800748c:	f000 fae2 	bl	8007a54 <__mcmp>
 8007490:	2800      	cmp	r0, #0
 8007492:	dc9b      	bgt.n	80073cc <_dtoa_r+0xb18>
 8007494:	d102      	bne.n	800749c <_dtoa_r+0xbe8>
 8007496:	9b07      	ldr	r3, [sp, #28]
 8007498:	07db      	lsls	r3, r3, #31
 800749a:	d497      	bmi.n	80073cc <_dtoa_r+0xb18>
 800749c:	9b08      	ldr	r3, [sp, #32]
 800749e:	9308      	str	r3, [sp, #32]
 80074a0:	3b01      	subs	r3, #1
 80074a2:	781a      	ldrb	r2, [r3, #0]
 80074a4:	2a30      	cmp	r2, #48	; 0x30
 80074a6:	d0fa      	beq.n	800749e <_dtoa_r+0xbea>
 80074a8:	e6db      	b.n	8007262 <_dtoa_r+0x9ae>
 80074aa:	9a06      	ldr	r2, [sp, #24]
 80074ac:	429a      	cmp	r2, r3
 80074ae:	d18e      	bne.n	80073ce <_dtoa_r+0xb1a>
 80074b0:	9b02      	ldr	r3, [sp, #8]
 80074b2:	3301      	adds	r3, #1
 80074b4:	9302      	str	r3, [sp, #8]
 80074b6:	2331      	movs	r3, #49	; 0x31
 80074b8:	e799      	b.n	80073ee <_dtoa_r+0xb3a>
 80074ba:	4b09      	ldr	r3, [pc, #36]	; (80074e0 <_dtoa_r+0xc2c>)
 80074bc:	9a26      	ldr	r2, [sp, #152]	; 0x98
 80074be:	9306      	str	r3, [sp, #24]
 80074c0:	4b08      	ldr	r3, [pc, #32]	; (80074e4 <_dtoa_r+0xc30>)
 80074c2:	2a00      	cmp	r2, #0
 80074c4:	d001      	beq.n	80074ca <_dtoa_r+0xc16>
 80074c6:	f7ff fa3f 	bl	8006948 <_dtoa_r+0x94>
 80074ca:	f7ff fa3f 	bl	800694c <_dtoa_r+0x98>
 80074ce:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80074d0:	2b00      	cmp	r3, #0
 80074d2:	dcb6      	bgt.n	8007442 <_dtoa_r+0xb8e>
 80074d4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80074d6:	2b02      	cmp	r3, #2
 80074d8:	dd00      	ble.n	80074dc <_dtoa_r+0xc28>
 80074da:	e6ac      	b.n	8007236 <_dtoa_r+0x982>
 80074dc:	e7b1      	b.n	8007442 <_dtoa_r+0xb8e>
 80074de:	46c0      	nop			; (mov r8, r8)
 80074e0:	080094a8 	.word	0x080094a8
 80074e4:	080094b0 	.word	0x080094b0

080074e8 <fiprintf>:
 80074e8:	b40e      	push	{r1, r2, r3}
 80074ea:	b503      	push	{r0, r1, lr}
 80074ec:	0001      	movs	r1, r0
 80074ee:	ab03      	add	r3, sp, #12
 80074f0:	4804      	ldr	r0, [pc, #16]	; (8007504 <fiprintf+0x1c>)
 80074f2:	cb04      	ldmia	r3!, {r2}
 80074f4:	6800      	ldr	r0, [r0, #0]
 80074f6:	9301      	str	r3, [sp, #4]
 80074f8:	f000 fe5c 	bl	80081b4 <_vfiprintf_r>
 80074fc:	b002      	add	sp, #8
 80074fe:	bc08      	pop	{r3}
 8007500:	b003      	add	sp, #12
 8007502:	4718      	bx	r3
 8007504:	20002028 	.word	0x20002028

08007508 <_localeconv_r>:
 8007508:	4800      	ldr	r0, [pc, #0]	; (800750c <_localeconv_r+0x4>)
 800750a:	4770      	bx	lr
 800750c:	2000217c 	.word	0x2000217c

08007510 <malloc>:
 8007510:	b510      	push	{r4, lr}
 8007512:	4b03      	ldr	r3, [pc, #12]	; (8007520 <malloc+0x10>)
 8007514:	0001      	movs	r1, r0
 8007516:	6818      	ldr	r0, [r3, #0]
 8007518:	f000 fc4c 	bl	8007db4 <_malloc_r>
 800751c:	bd10      	pop	{r4, pc}
 800751e:	46c0      	nop			; (mov r8, r8)
 8007520:	20002028 	.word	0x20002028

08007524 <memchr>:
 8007524:	b2c9      	uxtb	r1, r1
 8007526:	1882      	adds	r2, r0, r2
 8007528:	4290      	cmp	r0, r2
 800752a:	d101      	bne.n	8007530 <memchr+0xc>
 800752c:	2000      	movs	r0, #0
 800752e:	4770      	bx	lr
 8007530:	7803      	ldrb	r3, [r0, #0]
 8007532:	428b      	cmp	r3, r1
 8007534:	d0fb      	beq.n	800752e <memchr+0xa>
 8007536:	3001      	adds	r0, #1
 8007538:	e7f6      	b.n	8007528 <memchr+0x4>

0800753a <memcpy>:
 800753a:	2300      	movs	r3, #0
 800753c:	b510      	push	{r4, lr}
 800753e:	429a      	cmp	r2, r3
 8007540:	d100      	bne.n	8007544 <memcpy+0xa>
 8007542:	bd10      	pop	{r4, pc}
 8007544:	5ccc      	ldrb	r4, [r1, r3]
 8007546:	54c4      	strb	r4, [r0, r3]
 8007548:	3301      	adds	r3, #1
 800754a:	e7f8      	b.n	800753e <memcpy+0x4>

0800754c <_Balloc>:
 800754c:	b570      	push	{r4, r5, r6, lr}
 800754e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8007550:	0006      	movs	r6, r0
 8007552:	000c      	movs	r4, r1
 8007554:	2d00      	cmp	r5, #0
 8007556:	d10e      	bne.n	8007576 <_Balloc+0x2a>
 8007558:	2010      	movs	r0, #16
 800755a:	f7ff ffd9 	bl	8007510 <malloc>
 800755e:	1e02      	subs	r2, r0, #0
 8007560:	6270      	str	r0, [r6, #36]	; 0x24
 8007562:	d104      	bne.n	800756e <_Balloc+0x22>
 8007564:	2166      	movs	r1, #102	; 0x66
 8007566:	4b19      	ldr	r3, [pc, #100]	; (80075cc <_Balloc+0x80>)
 8007568:	4819      	ldr	r0, [pc, #100]	; (80075d0 <_Balloc+0x84>)
 800756a:	f7ff f8f9 	bl	8006760 <__assert_func>
 800756e:	6045      	str	r5, [r0, #4]
 8007570:	6085      	str	r5, [r0, #8]
 8007572:	6005      	str	r5, [r0, #0]
 8007574:	60c5      	str	r5, [r0, #12]
 8007576:	6a75      	ldr	r5, [r6, #36]	; 0x24
 8007578:	68eb      	ldr	r3, [r5, #12]
 800757a:	2b00      	cmp	r3, #0
 800757c:	d013      	beq.n	80075a6 <_Balloc+0x5a>
 800757e:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8007580:	00a2      	lsls	r2, r4, #2
 8007582:	68db      	ldr	r3, [r3, #12]
 8007584:	189b      	adds	r3, r3, r2
 8007586:	6818      	ldr	r0, [r3, #0]
 8007588:	2800      	cmp	r0, #0
 800758a:	d118      	bne.n	80075be <_Balloc+0x72>
 800758c:	2101      	movs	r1, #1
 800758e:	000d      	movs	r5, r1
 8007590:	40a5      	lsls	r5, r4
 8007592:	1d6a      	adds	r2, r5, #5
 8007594:	0030      	movs	r0, r6
 8007596:	0092      	lsls	r2, r2, #2
 8007598:	f000 fb74 	bl	8007c84 <_calloc_r>
 800759c:	2800      	cmp	r0, #0
 800759e:	d00c      	beq.n	80075ba <_Balloc+0x6e>
 80075a0:	6044      	str	r4, [r0, #4]
 80075a2:	6085      	str	r5, [r0, #8]
 80075a4:	e00d      	b.n	80075c2 <_Balloc+0x76>
 80075a6:	2221      	movs	r2, #33	; 0x21
 80075a8:	2104      	movs	r1, #4
 80075aa:	0030      	movs	r0, r6
 80075ac:	f000 fb6a 	bl	8007c84 <_calloc_r>
 80075b0:	6a73      	ldr	r3, [r6, #36]	; 0x24
 80075b2:	60e8      	str	r0, [r5, #12]
 80075b4:	68db      	ldr	r3, [r3, #12]
 80075b6:	2b00      	cmp	r3, #0
 80075b8:	d1e1      	bne.n	800757e <_Balloc+0x32>
 80075ba:	2000      	movs	r0, #0
 80075bc:	bd70      	pop	{r4, r5, r6, pc}
 80075be:	6802      	ldr	r2, [r0, #0]
 80075c0:	601a      	str	r2, [r3, #0]
 80075c2:	2300      	movs	r3, #0
 80075c4:	6103      	str	r3, [r0, #16]
 80075c6:	60c3      	str	r3, [r0, #12]
 80075c8:	e7f8      	b.n	80075bc <_Balloc+0x70>
 80075ca:	46c0      	nop			; (mov r8, r8)
 80075cc:	080094b5 	.word	0x080094b5
 80075d0:	08009538 	.word	0x08009538

080075d4 <_Bfree>:
 80075d4:	b570      	push	{r4, r5, r6, lr}
 80075d6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80075d8:	0005      	movs	r5, r0
 80075da:	000c      	movs	r4, r1
 80075dc:	2e00      	cmp	r6, #0
 80075de:	d10e      	bne.n	80075fe <_Bfree+0x2a>
 80075e0:	2010      	movs	r0, #16
 80075e2:	f7ff ff95 	bl	8007510 <malloc>
 80075e6:	1e02      	subs	r2, r0, #0
 80075e8:	6268      	str	r0, [r5, #36]	; 0x24
 80075ea:	d104      	bne.n	80075f6 <_Bfree+0x22>
 80075ec:	218a      	movs	r1, #138	; 0x8a
 80075ee:	4b09      	ldr	r3, [pc, #36]	; (8007614 <_Bfree+0x40>)
 80075f0:	4809      	ldr	r0, [pc, #36]	; (8007618 <_Bfree+0x44>)
 80075f2:	f7ff f8b5 	bl	8006760 <__assert_func>
 80075f6:	6046      	str	r6, [r0, #4]
 80075f8:	6086      	str	r6, [r0, #8]
 80075fa:	6006      	str	r6, [r0, #0]
 80075fc:	60c6      	str	r6, [r0, #12]
 80075fe:	2c00      	cmp	r4, #0
 8007600:	d007      	beq.n	8007612 <_Bfree+0x3e>
 8007602:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8007604:	6862      	ldr	r2, [r4, #4]
 8007606:	68db      	ldr	r3, [r3, #12]
 8007608:	0092      	lsls	r2, r2, #2
 800760a:	189b      	adds	r3, r3, r2
 800760c:	681a      	ldr	r2, [r3, #0]
 800760e:	6022      	str	r2, [r4, #0]
 8007610:	601c      	str	r4, [r3, #0]
 8007612:	bd70      	pop	{r4, r5, r6, pc}
 8007614:	080094b5 	.word	0x080094b5
 8007618:	08009538 	.word	0x08009538

0800761c <__multadd>:
 800761c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800761e:	000e      	movs	r6, r1
 8007620:	9001      	str	r0, [sp, #4]
 8007622:	000c      	movs	r4, r1
 8007624:	001d      	movs	r5, r3
 8007626:	2000      	movs	r0, #0
 8007628:	690f      	ldr	r7, [r1, #16]
 800762a:	3614      	adds	r6, #20
 800762c:	6833      	ldr	r3, [r6, #0]
 800762e:	3001      	adds	r0, #1
 8007630:	b299      	uxth	r1, r3
 8007632:	4351      	muls	r1, r2
 8007634:	0c1b      	lsrs	r3, r3, #16
 8007636:	4353      	muls	r3, r2
 8007638:	1949      	adds	r1, r1, r5
 800763a:	0c0d      	lsrs	r5, r1, #16
 800763c:	195b      	adds	r3, r3, r5
 800763e:	0c1d      	lsrs	r5, r3, #16
 8007640:	b289      	uxth	r1, r1
 8007642:	041b      	lsls	r3, r3, #16
 8007644:	185b      	adds	r3, r3, r1
 8007646:	c608      	stmia	r6!, {r3}
 8007648:	4287      	cmp	r7, r0
 800764a:	dcef      	bgt.n	800762c <__multadd+0x10>
 800764c:	2d00      	cmp	r5, #0
 800764e:	d022      	beq.n	8007696 <__multadd+0x7a>
 8007650:	68a3      	ldr	r3, [r4, #8]
 8007652:	42bb      	cmp	r3, r7
 8007654:	dc19      	bgt.n	800768a <__multadd+0x6e>
 8007656:	6863      	ldr	r3, [r4, #4]
 8007658:	9801      	ldr	r0, [sp, #4]
 800765a:	1c59      	adds	r1, r3, #1
 800765c:	f7ff ff76 	bl	800754c <_Balloc>
 8007660:	1e06      	subs	r6, r0, #0
 8007662:	d105      	bne.n	8007670 <__multadd+0x54>
 8007664:	0002      	movs	r2, r0
 8007666:	21b5      	movs	r1, #181	; 0xb5
 8007668:	4b0c      	ldr	r3, [pc, #48]	; (800769c <__multadd+0x80>)
 800766a:	480d      	ldr	r0, [pc, #52]	; (80076a0 <__multadd+0x84>)
 800766c:	f7ff f878 	bl	8006760 <__assert_func>
 8007670:	0021      	movs	r1, r4
 8007672:	6923      	ldr	r3, [r4, #16]
 8007674:	310c      	adds	r1, #12
 8007676:	1c9a      	adds	r2, r3, #2
 8007678:	0092      	lsls	r2, r2, #2
 800767a:	300c      	adds	r0, #12
 800767c:	f7ff ff5d 	bl	800753a <memcpy>
 8007680:	0021      	movs	r1, r4
 8007682:	9801      	ldr	r0, [sp, #4]
 8007684:	f7ff ffa6 	bl	80075d4 <_Bfree>
 8007688:	0034      	movs	r4, r6
 800768a:	1d3b      	adds	r3, r7, #4
 800768c:	009b      	lsls	r3, r3, #2
 800768e:	18e3      	adds	r3, r4, r3
 8007690:	605d      	str	r5, [r3, #4]
 8007692:	1c7b      	adds	r3, r7, #1
 8007694:	6123      	str	r3, [r4, #16]
 8007696:	0020      	movs	r0, r4
 8007698:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800769a:	46c0      	nop			; (mov r8, r8)
 800769c:	08009527 	.word	0x08009527
 80076a0:	08009538 	.word	0x08009538

080076a4 <__hi0bits>:
 80076a4:	0003      	movs	r3, r0
 80076a6:	0c02      	lsrs	r2, r0, #16
 80076a8:	2000      	movs	r0, #0
 80076aa:	4282      	cmp	r2, r0
 80076ac:	d101      	bne.n	80076b2 <__hi0bits+0xe>
 80076ae:	041b      	lsls	r3, r3, #16
 80076b0:	3010      	adds	r0, #16
 80076b2:	0e1a      	lsrs	r2, r3, #24
 80076b4:	d101      	bne.n	80076ba <__hi0bits+0x16>
 80076b6:	3008      	adds	r0, #8
 80076b8:	021b      	lsls	r3, r3, #8
 80076ba:	0f1a      	lsrs	r2, r3, #28
 80076bc:	d101      	bne.n	80076c2 <__hi0bits+0x1e>
 80076be:	3004      	adds	r0, #4
 80076c0:	011b      	lsls	r3, r3, #4
 80076c2:	0f9a      	lsrs	r2, r3, #30
 80076c4:	d101      	bne.n	80076ca <__hi0bits+0x26>
 80076c6:	3002      	adds	r0, #2
 80076c8:	009b      	lsls	r3, r3, #2
 80076ca:	2b00      	cmp	r3, #0
 80076cc:	db03      	blt.n	80076d6 <__hi0bits+0x32>
 80076ce:	3001      	adds	r0, #1
 80076d0:	005b      	lsls	r3, r3, #1
 80076d2:	d400      	bmi.n	80076d6 <__hi0bits+0x32>
 80076d4:	2020      	movs	r0, #32
 80076d6:	4770      	bx	lr

080076d8 <__lo0bits>:
 80076d8:	6803      	ldr	r3, [r0, #0]
 80076da:	0002      	movs	r2, r0
 80076dc:	2107      	movs	r1, #7
 80076de:	0018      	movs	r0, r3
 80076e0:	4008      	ands	r0, r1
 80076e2:	420b      	tst	r3, r1
 80076e4:	d00d      	beq.n	8007702 <__lo0bits+0x2a>
 80076e6:	3906      	subs	r1, #6
 80076e8:	2000      	movs	r0, #0
 80076ea:	420b      	tst	r3, r1
 80076ec:	d105      	bne.n	80076fa <__lo0bits+0x22>
 80076ee:	3002      	adds	r0, #2
 80076f0:	4203      	tst	r3, r0
 80076f2:	d003      	beq.n	80076fc <__lo0bits+0x24>
 80076f4:	40cb      	lsrs	r3, r1
 80076f6:	0008      	movs	r0, r1
 80076f8:	6013      	str	r3, [r2, #0]
 80076fa:	4770      	bx	lr
 80076fc:	089b      	lsrs	r3, r3, #2
 80076fe:	6013      	str	r3, [r2, #0]
 8007700:	e7fb      	b.n	80076fa <__lo0bits+0x22>
 8007702:	b299      	uxth	r1, r3
 8007704:	2900      	cmp	r1, #0
 8007706:	d101      	bne.n	800770c <__lo0bits+0x34>
 8007708:	2010      	movs	r0, #16
 800770a:	0c1b      	lsrs	r3, r3, #16
 800770c:	b2d9      	uxtb	r1, r3
 800770e:	2900      	cmp	r1, #0
 8007710:	d101      	bne.n	8007716 <__lo0bits+0x3e>
 8007712:	3008      	adds	r0, #8
 8007714:	0a1b      	lsrs	r3, r3, #8
 8007716:	0719      	lsls	r1, r3, #28
 8007718:	d101      	bne.n	800771e <__lo0bits+0x46>
 800771a:	3004      	adds	r0, #4
 800771c:	091b      	lsrs	r3, r3, #4
 800771e:	0799      	lsls	r1, r3, #30
 8007720:	d101      	bne.n	8007726 <__lo0bits+0x4e>
 8007722:	3002      	adds	r0, #2
 8007724:	089b      	lsrs	r3, r3, #2
 8007726:	07d9      	lsls	r1, r3, #31
 8007728:	d4e9      	bmi.n	80076fe <__lo0bits+0x26>
 800772a:	3001      	adds	r0, #1
 800772c:	085b      	lsrs	r3, r3, #1
 800772e:	d1e6      	bne.n	80076fe <__lo0bits+0x26>
 8007730:	2020      	movs	r0, #32
 8007732:	e7e2      	b.n	80076fa <__lo0bits+0x22>

08007734 <__i2b>:
 8007734:	b510      	push	{r4, lr}
 8007736:	000c      	movs	r4, r1
 8007738:	2101      	movs	r1, #1
 800773a:	f7ff ff07 	bl	800754c <_Balloc>
 800773e:	2800      	cmp	r0, #0
 8007740:	d106      	bne.n	8007750 <__i2b+0x1c>
 8007742:	21a0      	movs	r1, #160	; 0xa0
 8007744:	0002      	movs	r2, r0
 8007746:	4b04      	ldr	r3, [pc, #16]	; (8007758 <__i2b+0x24>)
 8007748:	4804      	ldr	r0, [pc, #16]	; (800775c <__i2b+0x28>)
 800774a:	0049      	lsls	r1, r1, #1
 800774c:	f7ff f808 	bl	8006760 <__assert_func>
 8007750:	2301      	movs	r3, #1
 8007752:	6144      	str	r4, [r0, #20]
 8007754:	6103      	str	r3, [r0, #16]
 8007756:	bd10      	pop	{r4, pc}
 8007758:	08009527 	.word	0x08009527
 800775c:	08009538 	.word	0x08009538

08007760 <__multiply>:
 8007760:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007762:	690b      	ldr	r3, [r1, #16]
 8007764:	0014      	movs	r4, r2
 8007766:	6912      	ldr	r2, [r2, #16]
 8007768:	000d      	movs	r5, r1
 800776a:	b089      	sub	sp, #36	; 0x24
 800776c:	4293      	cmp	r3, r2
 800776e:	da01      	bge.n	8007774 <__multiply+0x14>
 8007770:	0025      	movs	r5, r4
 8007772:	000c      	movs	r4, r1
 8007774:	692f      	ldr	r7, [r5, #16]
 8007776:	6926      	ldr	r6, [r4, #16]
 8007778:	6869      	ldr	r1, [r5, #4]
 800777a:	19bb      	adds	r3, r7, r6
 800777c:	9302      	str	r3, [sp, #8]
 800777e:	68ab      	ldr	r3, [r5, #8]
 8007780:	19ba      	adds	r2, r7, r6
 8007782:	4293      	cmp	r3, r2
 8007784:	da00      	bge.n	8007788 <__multiply+0x28>
 8007786:	3101      	adds	r1, #1
 8007788:	f7ff fee0 	bl	800754c <_Balloc>
 800778c:	9001      	str	r0, [sp, #4]
 800778e:	2800      	cmp	r0, #0
 8007790:	d106      	bne.n	80077a0 <__multiply+0x40>
 8007792:	215e      	movs	r1, #94	; 0x5e
 8007794:	0002      	movs	r2, r0
 8007796:	4b48      	ldr	r3, [pc, #288]	; (80078b8 <__multiply+0x158>)
 8007798:	4848      	ldr	r0, [pc, #288]	; (80078bc <__multiply+0x15c>)
 800779a:	31ff      	adds	r1, #255	; 0xff
 800779c:	f7fe ffe0 	bl	8006760 <__assert_func>
 80077a0:	9b01      	ldr	r3, [sp, #4]
 80077a2:	2200      	movs	r2, #0
 80077a4:	3314      	adds	r3, #20
 80077a6:	469c      	mov	ip, r3
 80077a8:	19bb      	adds	r3, r7, r6
 80077aa:	009b      	lsls	r3, r3, #2
 80077ac:	4463      	add	r3, ip
 80077ae:	9303      	str	r3, [sp, #12]
 80077b0:	4663      	mov	r3, ip
 80077b2:	9903      	ldr	r1, [sp, #12]
 80077b4:	428b      	cmp	r3, r1
 80077b6:	d32c      	bcc.n	8007812 <__multiply+0xb2>
 80077b8:	002b      	movs	r3, r5
 80077ba:	0022      	movs	r2, r4
 80077bc:	3314      	adds	r3, #20
 80077be:	00bf      	lsls	r7, r7, #2
 80077c0:	3214      	adds	r2, #20
 80077c2:	9306      	str	r3, [sp, #24]
 80077c4:	00b6      	lsls	r6, r6, #2
 80077c6:	19db      	adds	r3, r3, r7
 80077c8:	9304      	str	r3, [sp, #16]
 80077ca:	1993      	adds	r3, r2, r6
 80077cc:	9307      	str	r3, [sp, #28]
 80077ce:	2304      	movs	r3, #4
 80077d0:	9305      	str	r3, [sp, #20]
 80077d2:	002b      	movs	r3, r5
 80077d4:	9904      	ldr	r1, [sp, #16]
 80077d6:	3315      	adds	r3, #21
 80077d8:	9200      	str	r2, [sp, #0]
 80077da:	4299      	cmp	r1, r3
 80077dc:	d305      	bcc.n	80077ea <__multiply+0x8a>
 80077de:	1b4b      	subs	r3, r1, r5
 80077e0:	3b15      	subs	r3, #21
 80077e2:	089b      	lsrs	r3, r3, #2
 80077e4:	3301      	adds	r3, #1
 80077e6:	009b      	lsls	r3, r3, #2
 80077e8:	9305      	str	r3, [sp, #20]
 80077ea:	9b07      	ldr	r3, [sp, #28]
 80077ec:	9a00      	ldr	r2, [sp, #0]
 80077ee:	429a      	cmp	r2, r3
 80077f0:	d311      	bcc.n	8007816 <__multiply+0xb6>
 80077f2:	9b02      	ldr	r3, [sp, #8]
 80077f4:	2b00      	cmp	r3, #0
 80077f6:	dd06      	ble.n	8007806 <__multiply+0xa6>
 80077f8:	9b03      	ldr	r3, [sp, #12]
 80077fa:	3b04      	subs	r3, #4
 80077fc:	9303      	str	r3, [sp, #12]
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	9300      	str	r3, [sp, #0]
 8007802:	2b00      	cmp	r3, #0
 8007804:	d053      	beq.n	80078ae <__multiply+0x14e>
 8007806:	9b01      	ldr	r3, [sp, #4]
 8007808:	9a02      	ldr	r2, [sp, #8]
 800780a:	0018      	movs	r0, r3
 800780c:	611a      	str	r2, [r3, #16]
 800780e:	b009      	add	sp, #36	; 0x24
 8007810:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007812:	c304      	stmia	r3!, {r2}
 8007814:	e7cd      	b.n	80077b2 <__multiply+0x52>
 8007816:	9b00      	ldr	r3, [sp, #0]
 8007818:	681b      	ldr	r3, [r3, #0]
 800781a:	b298      	uxth	r0, r3
 800781c:	2800      	cmp	r0, #0
 800781e:	d01b      	beq.n	8007858 <__multiply+0xf8>
 8007820:	4667      	mov	r7, ip
 8007822:	2400      	movs	r4, #0
 8007824:	9e06      	ldr	r6, [sp, #24]
 8007826:	ce02      	ldmia	r6!, {r1}
 8007828:	683a      	ldr	r2, [r7, #0]
 800782a:	b28b      	uxth	r3, r1
 800782c:	4343      	muls	r3, r0
 800782e:	b292      	uxth	r2, r2
 8007830:	189b      	adds	r3, r3, r2
 8007832:	191b      	adds	r3, r3, r4
 8007834:	0c0c      	lsrs	r4, r1, #16
 8007836:	4344      	muls	r4, r0
 8007838:	683a      	ldr	r2, [r7, #0]
 800783a:	0c11      	lsrs	r1, r2, #16
 800783c:	1861      	adds	r1, r4, r1
 800783e:	0c1c      	lsrs	r4, r3, #16
 8007840:	1909      	adds	r1, r1, r4
 8007842:	0c0c      	lsrs	r4, r1, #16
 8007844:	b29b      	uxth	r3, r3
 8007846:	0409      	lsls	r1, r1, #16
 8007848:	430b      	orrs	r3, r1
 800784a:	c708      	stmia	r7!, {r3}
 800784c:	9b04      	ldr	r3, [sp, #16]
 800784e:	42b3      	cmp	r3, r6
 8007850:	d8e9      	bhi.n	8007826 <__multiply+0xc6>
 8007852:	4663      	mov	r3, ip
 8007854:	9a05      	ldr	r2, [sp, #20]
 8007856:	509c      	str	r4, [r3, r2]
 8007858:	9b00      	ldr	r3, [sp, #0]
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	0c1e      	lsrs	r6, r3, #16
 800785e:	d020      	beq.n	80078a2 <__multiply+0x142>
 8007860:	4663      	mov	r3, ip
 8007862:	002c      	movs	r4, r5
 8007864:	4660      	mov	r0, ip
 8007866:	2700      	movs	r7, #0
 8007868:	681b      	ldr	r3, [r3, #0]
 800786a:	3414      	adds	r4, #20
 800786c:	6822      	ldr	r2, [r4, #0]
 800786e:	b29b      	uxth	r3, r3
 8007870:	b291      	uxth	r1, r2
 8007872:	4371      	muls	r1, r6
 8007874:	6802      	ldr	r2, [r0, #0]
 8007876:	0c12      	lsrs	r2, r2, #16
 8007878:	1889      	adds	r1, r1, r2
 800787a:	19cf      	adds	r7, r1, r7
 800787c:	0439      	lsls	r1, r7, #16
 800787e:	430b      	orrs	r3, r1
 8007880:	6003      	str	r3, [r0, #0]
 8007882:	cc02      	ldmia	r4!, {r1}
 8007884:	6843      	ldr	r3, [r0, #4]
 8007886:	0c09      	lsrs	r1, r1, #16
 8007888:	4371      	muls	r1, r6
 800788a:	b29b      	uxth	r3, r3
 800788c:	0c3f      	lsrs	r7, r7, #16
 800788e:	18cb      	adds	r3, r1, r3
 8007890:	9a04      	ldr	r2, [sp, #16]
 8007892:	19db      	adds	r3, r3, r7
 8007894:	0c1f      	lsrs	r7, r3, #16
 8007896:	3004      	adds	r0, #4
 8007898:	42a2      	cmp	r2, r4
 800789a:	d8e7      	bhi.n	800786c <__multiply+0x10c>
 800789c:	4662      	mov	r2, ip
 800789e:	9905      	ldr	r1, [sp, #20]
 80078a0:	5053      	str	r3, [r2, r1]
 80078a2:	9b00      	ldr	r3, [sp, #0]
 80078a4:	3304      	adds	r3, #4
 80078a6:	9300      	str	r3, [sp, #0]
 80078a8:	2304      	movs	r3, #4
 80078aa:	449c      	add	ip, r3
 80078ac:	e79d      	b.n	80077ea <__multiply+0x8a>
 80078ae:	9b02      	ldr	r3, [sp, #8]
 80078b0:	3b01      	subs	r3, #1
 80078b2:	9302      	str	r3, [sp, #8]
 80078b4:	e79d      	b.n	80077f2 <__multiply+0x92>
 80078b6:	46c0      	nop			; (mov r8, r8)
 80078b8:	08009527 	.word	0x08009527
 80078bc:	08009538 	.word	0x08009538

080078c0 <__pow5mult>:
 80078c0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80078c2:	2303      	movs	r3, #3
 80078c4:	0015      	movs	r5, r2
 80078c6:	0007      	movs	r7, r0
 80078c8:	000e      	movs	r6, r1
 80078ca:	401a      	ands	r2, r3
 80078cc:	421d      	tst	r5, r3
 80078ce:	d008      	beq.n	80078e2 <__pow5mult+0x22>
 80078d0:	4925      	ldr	r1, [pc, #148]	; (8007968 <__pow5mult+0xa8>)
 80078d2:	3a01      	subs	r2, #1
 80078d4:	0092      	lsls	r2, r2, #2
 80078d6:	5852      	ldr	r2, [r2, r1]
 80078d8:	2300      	movs	r3, #0
 80078da:	0031      	movs	r1, r6
 80078dc:	f7ff fe9e 	bl	800761c <__multadd>
 80078e0:	0006      	movs	r6, r0
 80078e2:	10ad      	asrs	r5, r5, #2
 80078e4:	d03d      	beq.n	8007962 <__pow5mult+0xa2>
 80078e6:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 80078e8:	2c00      	cmp	r4, #0
 80078ea:	d10f      	bne.n	800790c <__pow5mult+0x4c>
 80078ec:	2010      	movs	r0, #16
 80078ee:	f7ff fe0f 	bl	8007510 <malloc>
 80078f2:	1e02      	subs	r2, r0, #0
 80078f4:	6278      	str	r0, [r7, #36]	; 0x24
 80078f6:	d105      	bne.n	8007904 <__pow5mult+0x44>
 80078f8:	21d7      	movs	r1, #215	; 0xd7
 80078fa:	4b1c      	ldr	r3, [pc, #112]	; (800796c <__pow5mult+0xac>)
 80078fc:	481c      	ldr	r0, [pc, #112]	; (8007970 <__pow5mult+0xb0>)
 80078fe:	0049      	lsls	r1, r1, #1
 8007900:	f7fe ff2e 	bl	8006760 <__assert_func>
 8007904:	6044      	str	r4, [r0, #4]
 8007906:	6084      	str	r4, [r0, #8]
 8007908:	6004      	str	r4, [r0, #0]
 800790a:	60c4      	str	r4, [r0, #12]
 800790c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800790e:	689c      	ldr	r4, [r3, #8]
 8007910:	9301      	str	r3, [sp, #4]
 8007912:	2c00      	cmp	r4, #0
 8007914:	d108      	bne.n	8007928 <__pow5mult+0x68>
 8007916:	0038      	movs	r0, r7
 8007918:	4916      	ldr	r1, [pc, #88]	; (8007974 <__pow5mult+0xb4>)
 800791a:	f7ff ff0b 	bl	8007734 <__i2b>
 800791e:	9b01      	ldr	r3, [sp, #4]
 8007920:	0004      	movs	r4, r0
 8007922:	6098      	str	r0, [r3, #8]
 8007924:	2300      	movs	r3, #0
 8007926:	6003      	str	r3, [r0, #0]
 8007928:	2301      	movs	r3, #1
 800792a:	421d      	tst	r5, r3
 800792c:	d00a      	beq.n	8007944 <__pow5mult+0x84>
 800792e:	0031      	movs	r1, r6
 8007930:	0022      	movs	r2, r4
 8007932:	0038      	movs	r0, r7
 8007934:	f7ff ff14 	bl	8007760 <__multiply>
 8007938:	0031      	movs	r1, r6
 800793a:	9001      	str	r0, [sp, #4]
 800793c:	0038      	movs	r0, r7
 800793e:	f7ff fe49 	bl	80075d4 <_Bfree>
 8007942:	9e01      	ldr	r6, [sp, #4]
 8007944:	106d      	asrs	r5, r5, #1
 8007946:	d00c      	beq.n	8007962 <__pow5mult+0xa2>
 8007948:	6820      	ldr	r0, [r4, #0]
 800794a:	2800      	cmp	r0, #0
 800794c:	d107      	bne.n	800795e <__pow5mult+0x9e>
 800794e:	0022      	movs	r2, r4
 8007950:	0021      	movs	r1, r4
 8007952:	0038      	movs	r0, r7
 8007954:	f7ff ff04 	bl	8007760 <__multiply>
 8007958:	2300      	movs	r3, #0
 800795a:	6020      	str	r0, [r4, #0]
 800795c:	6003      	str	r3, [r0, #0]
 800795e:	0004      	movs	r4, r0
 8007960:	e7e2      	b.n	8007928 <__pow5mult+0x68>
 8007962:	0030      	movs	r0, r6
 8007964:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8007966:	46c0      	nop			; (mov r8, r8)
 8007968:	08009688 	.word	0x08009688
 800796c:	080094b5 	.word	0x080094b5
 8007970:	08009538 	.word	0x08009538
 8007974:	00000271 	.word	0x00000271

08007978 <__lshift>:
 8007978:	b5f0      	push	{r4, r5, r6, r7, lr}
 800797a:	000c      	movs	r4, r1
 800797c:	0017      	movs	r7, r2
 800797e:	6923      	ldr	r3, [r4, #16]
 8007980:	1155      	asrs	r5, r2, #5
 8007982:	b087      	sub	sp, #28
 8007984:	18eb      	adds	r3, r5, r3
 8007986:	9302      	str	r3, [sp, #8]
 8007988:	3301      	adds	r3, #1
 800798a:	9301      	str	r3, [sp, #4]
 800798c:	6849      	ldr	r1, [r1, #4]
 800798e:	68a3      	ldr	r3, [r4, #8]
 8007990:	9004      	str	r0, [sp, #16]
 8007992:	9a01      	ldr	r2, [sp, #4]
 8007994:	4293      	cmp	r3, r2
 8007996:	db10      	blt.n	80079ba <__lshift+0x42>
 8007998:	9804      	ldr	r0, [sp, #16]
 800799a:	f7ff fdd7 	bl	800754c <_Balloc>
 800799e:	2300      	movs	r3, #0
 80079a0:	0002      	movs	r2, r0
 80079a2:	0006      	movs	r6, r0
 80079a4:	0019      	movs	r1, r3
 80079a6:	3214      	adds	r2, #20
 80079a8:	4298      	cmp	r0, r3
 80079aa:	d10c      	bne.n	80079c6 <__lshift+0x4e>
 80079ac:	21da      	movs	r1, #218	; 0xda
 80079ae:	0002      	movs	r2, r0
 80079b0:	4b26      	ldr	r3, [pc, #152]	; (8007a4c <__lshift+0xd4>)
 80079b2:	4827      	ldr	r0, [pc, #156]	; (8007a50 <__lshift+0xd8>)
 80079b4:	31ff      	adds	r1, #255	; 0xff
 80079b6:	f7fe fed3 	bl	8006760 <__assert_func>
 80079ba:	3101      	adds	r1, #1
 80079bc:	005b      	lsls	r3, r3, #1
 80079be:	e7e8      	b.n	8007992 <__lshift+0x1a>
 80079c0:	0098      	lsls	r0, r3, #2
 80079c2:	5011      	str	r1, [r2, r0]
 80079c4:	3301      	adds	r3, #1
 80079c6:	42ab      	cmp	r3, r5
 80079c8:	dbfa      	blt.n	80079c0 <__lshift+0x48>
 80079ca:	43eb      	mvns	r3, r5
 80079cc:	17db      	asrs	r3, r3, #31
 80079ce:	401d      	ands	r5, r3
 80079d0:	211f      	movs	r1, #31
 80079d2:	0023      	movs	r3, r4
 80079d4:	0038      	movs	r0, r7
 80079d6:	00ad      	lsls	r5, r5, #2
 80079d8:	1955      	adds	r5, r2, r5
 80079da:	6922      	ldr	r2, [r4, #16]
 80079dc:	3314      	adds	r3, #20
 80079de:	0092      	lsls	r2, r2, #2
 80079e0:	4008      	ands	r0, r1
 80079e2:	4684      	mov	ip, r0
 80079e4:	189a      	adds	r2, r3, r2
 80079e6:	420f      	tst	r7, r1
 80079e8:	d02a      	beq.n	8007a40 <__lshift+0xc8>
 80079ea:	3101      	adds	r1, #1
 80079ec:	1a09      	subs	r1, r1, r0
 80079ee:	9105      	str	r1, [sp, #20]
 80079f0:	2100      	movs	r1, #0
 80079f2:	9503      	str	r5, [sp, #12]
 80079f4:	4667      	mov	r7, ip
 80079f6:	6818      	ldr	r0, [r3, #0]
 80079f8:	40b8      	lsls	r0, r7
 80079fa:	4301      	orrs	r1, r0
 80079fc:	9803      	ldr	r0, [sp, #12]
 80079fe:	c002      	stmia	r0!, {r1}
 8007a00:	cb02      	ldmia	r3!, {r1}
 8007a02:	9003      	str	r0, [sp, #12]
 8007a04:	9805      	ldr	r0, [sp, #20]
 8007a06:	40c1      	lsrs	r1, r0
 8007a08:	429a      	cmp	r2, r3
 8007a0a:	d8f3      	bhi.n	80079f4 <__lshift+0x7c>
 8007a0c:	0020      	movs	r0, r4
 8007a0e:	3015      	adds	r0, #21
 8007a10:	2304      	movs	r3, #4
 8007a12:	4282      	cmp	r2, r0
 8007a14:	d304      	bcc.n	8007a20 <__lshift+0xa8>
 8007a16:	1b13      	subs	r3, r2, r4
 8007a18:	3b15      	subs	r3, #21
 8007a1a:	089b      	lsrs	r3, r3, #2
 8007a1c:	3301      	adds	r3, #1
 8007a1e:	009b      	lsls	r3, r3, #2
 8007a20:	50e9      	str	r1, [r5, r3]
 8007a22:	2900      	cmp	r1, #0
 8007a24:	d002      	beq.n	8007a2c <__lshift+0xb4>
 8007a26:	9b02      	ldr	r3, [sp, #8]
 8007a28:	3302      	adds	r3, #2
 8007a2a:	9301      	str	r3, [sp, #4]
 8007a2c:	9b01      	ldr	r3, [sp, #4]
 8007a2e:	9804      	ldr	r0, [sp, #16]
 8007a30:	3b01      	subs	r3, #1
 8007a32:	0021      	movs	r1, r4
 8007a34:	6133      	str	r3, [r6, #16]
 8007a36:	f7ff fdcd 	bl	80075d4 <_Bfree>
 8007a3a:	0030      	movs	r0, r6
 8007a3c:	b007      	add	sp, #28
 8007a3e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007a40:	cb02      	ldmia	r3!, {r1}
 8007a42:	c502      	stmia	r5!, {r1}
 8007a44:	429a      	cmp	r2, r3
 8007a46:	d8fb      	bhi.n	8007a40 <__lshift+0xc8>
 8007a48:	e7f0      	b.n	8007a2c <__lshift+0xb4>
 8007a4a:	46c0      	nop			; (mov r8, r8)
 8007a4c:	08009527 	.word	0x08009527
 8007a50:	08009538 	.word	0x08009538

08007a54 <__mcmp>:
 8007a54:	6902      	ldr	r2, [r0, #16]
 8007a56:	690b      	ldr	r3, [r1, #16]
 8007a58:	b530      	push	{r4, r5, lr}
 8007a5a:	0004      	movs	r4, r0
 8007a5c:	1ad0      	subs	r0, r2, r3
 8007a5e:	429a      	cmp	r2, r3
 8007a60:	d10d      	bne.n	8007a7e <__mcmp+0x2a>
 8007a62:	009b      	lsls	r3, r3, #2
 8007a64:	3414      	adds	r4, #20
 8007a66:	3114      	adds	r1, #20
 8007a68:	18e2      	adds	r2, r4, r3
 8007a6a:	18c9      	adds	r1, r1, r3
 8007a6c:	3a04      	subs	r2, #4
 8007a6e:	3904      	subs	r1, #4
 8007a70:	6815      	ldr	r5, [r2, #0]
 8007a72:	680b      	ldr	r3, [r1, #0]
 8007a74:	429d      	cmp	r5, r3
 8007a76:	d003      	beq.n	8007a80 <__mcmp+0x2c>
 8007a78:	2001      	movs	r0, #1
 8007a7a:	429d      	cmp	r5, r3
 8007a7c:	d303      	bcc.n	8007a86 <__mcmp+0x32>
 8007a7e:	bd30      	pop	{r4, r5, pc}
 8007a80:	4294      	cmp	r4, r2
 8007a82:	d3f3      	bcc.n	8007a6c <__mcmp+0x18>
 8007a84:	e7fb      	b.n	8007a7e <__mcmp+0x2a>
 8007a86:	4240      	negs	r0, r0
 8007a88:	e7f9      	b.n	8007a7e <__mcmp+0x2a>
	...

08007a8c <__mdiff>:
 8007a8c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007a8e:	000e      	movs	r6, r1
 8007a90:	0007      	movs	r7, r0
 8007a92:	0011      	movs	r1, r2
 8007a94:	0030      	movs	r0, r6
 8007a96:	b087      	sub	sp, #28
 8007a98:	0014      	movs	r4, r2
 8007a9a:	f7ff ffdb 	bl	8007a54 <__mcmp>
 8007a9e:	1e05      	subs	r5, r0, #0
 8007aa0:	d110      	bne.n	8007ac4 <__mdiff+0x38>
 8007aa2:	0001      	movs	r1, r0
 8007aa4:	0038      	movs	r0, r7
 8007aa6:	f7ff fd51 	bl	800754c <_Balloc>
 8007aaa:	1e02      	subs	r2, r0, #0
 8007aac:	d104      	bne.n	8007ab8 <__mdiff+0x2c>
 8007aae:	4b40      	ldr	r3, [pc, #256]	; (8007bb0 <__mdiff+0x124>)
 8007ab0:	4940      	ldr	r1, [pc, #256]	; (8007bb4 <__mdiff+0x128>)
 8007ab2:	4841      	ldr	r0, [pc, #260]	; (8007bb8 <__mdiff+0x12c>)
 8007ab4:	f7fe fe54 	bl	8006760 <__assert_func>
 8007ab8:	2301      	movs	r3, #1
 8007aba:	6145      	str	r5, [r0, #20]
 8007abc:	6103      	str	r3, [r0, #16]
 8007abe:	0010      	movs	r0, r2
 8007ac0:	b007      	add	sp, #28
 8007ac2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007ac4:	2301      	movs	r3, #1
 8007ac6:	9301      	str	r3, [sp, #4]
 8007ac8:	2800      	cmp	r0, #0
 8007aca:	db04      	blt.n	8007ad6 <__mdiff+0x4a>
 8007acc:	0023      	movs	r3, r4
 8007ace:	0034      	movs	r4, r6
 8007ad0:	001e      	movs	r6, r3
 8007ad2:	2300      	movs	r3, #0
 8007ad4:	9301      	str	r3, [sp, #4]
 8007ad6:	0038      	movs	r0, r7
 8007ad8:	6861      	ldr	r1, [r4, #4]
 8007ada:	f7ff fd37 	bl	800754c <_Balloc>
 8007ade:	1e02      	subs	r2, r0, #0
 8007ae0:	d103      	bne.n	8007aea <__mdiff+0x5e>
 8007ae2:	2190      	movs	r1, #144	; 0x90
 8007ae4:	4b32      	ldr	r3, [pc, #200]	; (8007bb0 <__mdiff+0x124>)
 8007ae6:	0089      	lsls	r1, r1, #2
 8007ae8:	e7e3      	b.n	8007ab2 <__mdiff+0x26>
 8007aea:	9b01      	ldr	r3, [sp, #4]
 8007aec:	2700      	movs	r7, #0
 8007aee:	60c3      	str	r3, [r0, #12]
 8007af0:	6920      	ldr	r0, [r4, #16]
 8007af2:	3414      	adds	r4, #20
 8007af4:	9401      	str	r4, [sp, #4]
 8007af6:	9b01      	ldr	r3, [sp, #4]
 8007af8:	0084      	lsls	r4, r0, #2
 8007afa:	191b      	adds	r3, r3, r4
 8007afc:	0034      	movs	r4, r6
 8007afe:	9302      	str	r3, [sp, #8]
 8007b00:	6933      	ldr	r3, [r6, #16]
 8007b02:	3414      	adds	r4, #20
 8007b04:	0099      	lsls	r1, r3, #2
 8007b06:	1863      	adds	r3, r4, r1
 8007b08:	9303      	str	r3, [sp, #12]
 8007b0a:	0013      	movs	r3, r2
 8007b0c:	3314      	adds	r3, #20
 8007b0e:	469c      	mov	ip, r3
 8007b10:	9305      	str	r3, [sp, #20]
 8007b12:	9b01      	ldr	r3, [sp, #4]
 8007b14:	9304      	str	r3, [sp, #16]
 8007b16:	9b04      	ldr	r3, [sp, #16]
 8007b18:	cc02      	ldmia	r4!, {r1}
 8007b1a:	cb20      	ldmia	r3!, {r5}
 8007b1c:	9304      	str	r3, [sp, #16]
 8007b1e:	b2ab      	uxth	r3, r5
 8007b20:	19df      	adds	r7, r3, r7
 8007b22:	b28b      	uxth	r3, r1
 8007b24:	1afb      	subs	r3, r7, r3
 8007b26:	0c09      	lsrs	r1, r1, #16
 8007b28:	0c2d      	lsrs	r5, r5, #16
 8007b2a:	1a6d      	subs	r5, r5, r1
 8007b2c:	1419      	asrs	r1, r3, #16
 8007b2e:	186d      	adds	r5, r5, r1
 8007b30:	4661      	mov	r1, ip
 8007b32:	142f      	asrs	r7, r5, #16
 8007b34:	b29b      	uxth	r3, r3
 8007b36:	042d      	lsls	r5, r5, #16
 8007b38:	432b      	orrs	r3, r5
 8007b3a:	c108      	stmia	r1!, {r3}
 8007b3c:	9b03      	ldr	r3, [sp, #12]
 8007b3e:	468c      	mov	ip, r1
 8007b40:	42a3      	cmp	r3, r4
 8007b42:	d8e8      	bhi.n	8007b16 <__mdiff+0x8a>
 8007b44:	0031      	movs	r1, r6
 8007b46:	9c03      	ldr	r4, [sp, #12]
 8007b48:	3115      	adds	r1, #21
 8007b4a:	2304      	movs	r3, #4
 8007b4c:	428c      	cmp	r4, r1
 8007b4e:	d304      	bcc.n	8007b5a <__mdiff+0xce>
 8007b50:	1ba3      	subs	r3, r4, r6
 8007b52:	3b15      	subs	r3, #21
 8007b54:	089b      	lsrs	r3, r3, #2
 8007b56:	3301      	adds	r3, #1
 8007b58:	009b      	lsls	r3, r3, #2
 8007b5a:	9901      	ldr	r1, [sp, #4]
 8007b5c:	18cc      	adds	r4, r1, r3
 8007b5e:	9905      	ldr	r1, [sp, #20]
 8007b60:	0026      	movs	r6, r4
 8007b62:	18cb      	adds	r3, r1, r3
 8007b64:	469c      	mov	ip, r3
 8007b66:	9902      	ldr	r1, [sp, #8]
 8007b68:	428e      	cmp	r6, r1
 8007b6a:	d310      	bcc.n	8007b8e <__mdiff+0x102>
 8007b6c:	9e02      	ldr	r6, [sp, #8]
 8007b6e:	1ee1      	subs	r1, r4, #3
 8007b70:	2500      	movs	r5, #0
 8007b72:	428e      	cmp	r6, r1
 8007b74:	d304      	bcc.n	8007b80 <__mdiff+0xf4>
 8007b76:	0031      	movs	r1, r6
 8007b78:	3103      	adds	r1, #3
 8007b7a:	1b0c      	subs	r4, r1, r4
 8007b7c:	08a4      	lsrs	r4, r4, #2
 8007b7e:	00a5      	lsls	r5, r4, #2
 8007b80:	195b      	adds	r3, r3, r5
 8007b82:	3b04      	subs	r3, #4
 8007b84:	6819      	ldr	r1, [r3, #0]
 8007b86:	2900      	cmp	r1, #0
 8007b88:	d00f      	beq.n	8007baa <__mdiff+0x11e>
 8007b8a:	6110      	str	r0, [r2, #16]
 8007b8c:	e797      	b.n	8007abe <__mdiff+0x32>
 8007b8e:	ce02      	ldmia	r6!, {r1}
 8007b90:	b28d      	uxth	r5, r1
 8007b92:	19ed      	adds	r5, r5, r7
 8007b94:	0c0f      	lsrs	r7, r1, #16
 8007b96:	1429      	asrs	r1, r5, #16
 8007b98:	1879      	adds	r1, r7, r1
 8007b9a:	140f      	asrs	r7, r1, #16
 8007b9c:	b2ad      	uxth	r5, r5
 8007b9e:	0409      	lsls	r1, r1, #16
 8007ba0:	430d      	orrs	r5, r1
 8007ba2:	4661      	mov	r1, ip
 8007ba4:	c120      	stmia	r1!, {r5}
 8007ba6:	468c      	mov	ip, r1
 8007ba8:	e7dd      	b.n	8007b66 <__mdiff+0xda>
 8007baa:	3801      	subs	r0, #1
 8007bac:	e7e9      	b.n	8007b82 <__mdiff+0xf6>
 8007bae:	46c0      	nop			; (mov r8, r8)
 8007bb0:	08009527 	.word	0x08009527
 8007bb4:	00000232 	.word	0x00000232
 8007bb8:	08009538 	.word	0x08009538

08007bbc <__d2b>:
 8007bbc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007bbe:	2101      	movs	r1, #1
 8007bc0:	0014      	movs	r4, r2
 8007bc2:	001e      	movs	r6, r3
 8007bc4:	9f08      	ldr	r7, [sp, #32]
 8007bc6:	f7ff fcc1 	bl	800754c <_Balloc>
 8007bca:	1e05      	subs	r5, r0, #0
 8007bcc:	d105      	bne.n	8007bda <__d2b+0x1e>
 8007bce:	0002      	movs	r2, r0
 8007bd0:	4b26      	ldr	r3, [pc, #152]	; (8007c6c <__d2b+0xb0>)
 8007bd2:	4927      	ldr	r1, [pc, #156]	; (8007c70 <__d2b+0xb4>)
 8007bd4:	4827      	ldr	r0, [pc, #156]	; (8007c74 <__d2b+0xb8>)
 8007bd6:	f7fe fdc3 	bl	8006760 <__assert_func>
 8007bda:	0333      	lsls	r3, r6, #12
 8007bdc:	0076      	lsls	r6, r6, #1
 8007bde:	0b1b      	lsrs	r3, r3, #12
 8007be0:	0d76      	lsrs	r6, r6, #21
 8007be2:	d124      	bne.n	8007c2e <__d2b+0x72>
 8007be4:	9301      	str	r3, [sp, #4]
 8007be6:	2c00      	cmp	r4, #0
 8007be8:	d027      	beq.n	8007c3a <__d2b+0x7e>
 8007bea:	4668      	mov	r0, sp
 8007bec:	9400      	str	r4, [sp, #0]
 8007bee:	f7ff fd73 	bl	80076d8 <__lo0bits>
 8007bf2:	9c00      	ldr	r4, [sp, #0]
 8007bf4:	2800      	cmp	r0, #0
 8007bf6:	d01e      	beq.n	8007c36 <__d2b+0x7a>
 8007bf8:	9b01      	ldr	r3, [sp, #4]
 8007bfa:	2120      	movs	r1, #32
 8007bfc:	001a      	movs	r2, r3
 8007bfe:	1a09      	subs	r1, r1, r0
 8007c00:	408a      	lsls	r2, r1
 8007c02:	40c3      	lsrs	r3, r0
 8007c04:	4322      	orrs	r2, r4
 8007c06:	616a      	str	r2, [r5, #20]
 8007c08:	9301      	str	r3, [sp, #4]
 8007c0a:	9c01      	ldr	r4, [sp, #4]
 8007c0c:	61ac      	str	r4, [r5, #24]
 8007c0e:	1e63      	subs	r3, r4, #1
 8007c10:	419c      	sbcs	r4, r3
 8007c12:	3401      	adds	r4, #1
 8007c14:	612c      	str	r4, [r5, #16]
 8007c16:	2e00      	cmp	r6, #0
 8007c18:	d018      	beq.n	8007c4c <__d2b+0x90>
 8007c1a:	4b17      	ldr	r3, [pc, #92]	; (8007c78 <__d2b+0xbc>)
 8007c1c:	18f6      	adds	r6, r6, r3
 8007c1e:	2335      	movs	r3, #53	; 0x35
 8007c20:	1836      	adds	r6, r6, r0
 8007c22:	1a18      	subs	r0, r3, r0
 8007c24:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007c26:	603e      	str	r6, [r7, #0]
 8007c28:	6018      	str	r0, [r3, #0]
 8007c2a:	0028      	movs	r0, r5
 8007c2c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8007c2e:	2280      	movs	r2, #128	; 0x80
 8007c30:	0352      	lsls	r2, r2, #13
 8007c32:	4313      	orrs	r3, r2
 8007c34:	e7d6      	b.n	8007be4 <__d2b+0x28>
 8007c36:	616c      	str	r4, [r5, #20]
 8007c38:	e7e7      	b.n	8007c0a <__d2b+0x4e>
 8007c3a:	a801      	add	r0, sp, #4
 8007c3c:	f7ff fd4c 	bl	80076d8 <__lo0bits>
 8007c40:	2401      	movs	r4, #1
 8007c42:	9b01      	ldr	r3, [sp, #4]
 8007c44:	612c      	str	r4, [r5, #16]
 8007c46:	616b      	str	r3, [r5, #20]
 8007c48:	3020      	adds	r0, #32
 8007c4a:	e7e4      	b.n	8007c16 <__d2b+0x5a>
 8007c4c:	4b0b      	ldr	r3, [pc, #44]	; (8007c7c <__d2b+0xc0>)
 8007c4e:	18c0      	adds	r0, r0, r3
 8007c50:	4b0b      	ldr	r3, [pc, #44]	; (8007c80 <__d2b+0xc4>)
 8007c52:	6038      	str	r0, [r7, #0]
 8007c54:	18e3      	adds	r3, r4, r3
 8007c56:	009b      	lsls	r3, r3, #2
 8007c58:	18eb      	adds	r3, r5, r3
 8007c5a:	6958      	ldr	r0, [r3, #20]
 8007c5c:	f7ff fd22 	bl	80076a4 <__hi0bits>
 8007c60:	0164      	lsls	r4, r4, #5
 8007c62:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007c64:	1a24      	subs	r4, r4, r0
 8007c66:	601c      	str	r4, [r3, #0]
 8007c68:	e7df      	b.n	8007c2a <__d2b+0x6e>
 8007c6a:	46c0      	nop			; (mov r8, r8)
 8007c6c:	08009527 	.word	0x08009527
 8007c70:	0000030a 	.word	0x0000030a
 8007c74:	08009538 	.word	0x08009538
 8007c78:	fffffbcd 	.word	0xfffffbcd
 8007c7c:	fffffbce 	.word	0xfffffbce
 8007c80:	3fffffff 	.word	0x3fffffff

08007c84 <_calloc_r>:
 8007c84:	b570      	push	{r4, r5, r6, lr}
 8007c86:	0c13      	lsrs	r3, r2, #16
 8007c88:	0c0d      	lsrs	r5, r1, #16
 8007c8a:	d11e      	bne.n	8007cca <_calloc_r+0x46>
 8007c8c:	2b00      	cmp	r3, #0
 8007c8e:	d10c      	bne.n	8007caa <_calloc_r+0x26>
 8007c90:	b289      	uxth	r1, r1
 8007c92:	b294      	uxth	r4, r2
 8007c94:	434c      	muls	r4, r1
 8007c96:	0021      	movs	r1, r4
 8007c98:	f000 f88c 	bl	8007db4 <_malloc_r>
 8007c9c:	1e05      	subs	r5, r0, #0
 8007c9e:	d01b      	beq.n	8007cd8 <_calloc_r+0x54>
 8007ca0:	0022      	movs	r2, r4
 8007ca2:	2100      	movs	r1, #0
 8007ca4:	f7fe f8c6 	bl	8005e34 <memset>
 8007ca8:	e016      	b.n	8007cd8 <_calloc_r+0x54>
 8007caa:	1c1d      	adds	r5, r3, #0
 8007cac:	1c0b      	adds	r3, r1, #0
 8007cae:	b292      	uxth	r2, r2
 8007cb0:	b289      	uxth	r1, r1
 8007cb2:	b29c      	uxth	r4, r3
 8007cb4:	4351      	muls	r1, r2
 8007cb6:	b2ab      	uxth	r3, r5
 8007cb8:	4363      	muls	r3, r4
 8007cba:	0c0c      	lsrs	r4, r1, #16
 8007cbc:	191c      	adds	r4, r3, r4
 8007cbe:	0c22      	lsrs	r2, r4, #16
 8007cc0:	d107      	bne.n	8007cd2 <_calloc_r+0x4e>
 8007cc2:	0424      	lsls	r4, r4, #16
 8007cc4:	b289      	uxth	r1, r1
 8007cc6:	430c      	orrs	r4, r1
 8007cc8:	e7e5      	b.n	8007c96 <_calloc_r+0x12>
 8007cca:	2b00      	cmp	r3, #0
 8007ccc:	d101      	bne.n	8007cd2 <_calloc_r+0x4e>
 8007cce:	1c13      	adds	r3, r2, #0
 8007cd0:	e7ed      	b.n	8007cae <_calloc_r+0x2a>
 8007cd2:	230c      	movs	r3, #12
 8007cd4:	2500      	movs	r5, #0
 8007cd6:	6003      	str	r3, [r0, #0]
 8007cd8:	0028      	movs	r0, r5
 8007cda:	bd70      	pop	{r4, r5, r6, pc}

08007cdc <_free_r>:
 8007cdc:	b570      	push	{r4, r5, r6, lr}
 8007cde:	0005      	movs	r5, r0
 8007ce0:	2900      	cmp	r1, #0
 8007ce2:	d010      	beq.n	8007d06 <_free_r+0x2a>
 8007ce4:	1f0c      	subs	r4, r1, #4
 8007ce6:	6823      	ldr	r3, [r4, #0]
 8007ce8:	2b00      	cmp	r3, #0
 8007cea:	da00      	bge.n	8007cee <_free_r+0x12>
 8007cec:	18e4      	adds	r4, r4, r3
 8007cee:	0028      	movs	r0, r5
 8007cf0:	f000 fee6 	bl	8008ac0 <__malloc_lock>
 8007cf4:	4a1d      	ldr	r2, [pc, #116]	; (8007d6c <_free_r+0x90>)
 8007cf6:	6813      	ldr	r3, [r2, #0]
 8007cf8:	2b00      	cmp	r3, #0
 8007cfa:	d105      	bne.n	8007d08 <_free_r+0x2c>
 8007cfc:	6063      	str	r3, [r4, #4]
 8007cfe:	6014      	str	r4, [r2, #0]
 8007d00:	0028      	movs	r0, r5
 8007d02:	f000 fee5 	bl	8008ad0 <__malloc_unlock>
 8007d06:	bd70      	pop	{r4, r5, r6, pc}
 8007d08:	42a3      	cmp	r3, r4
 8007d0a:	d908      	bls.n	8007d1e <_free_r+0x42>
 8007d0c:	6821      	ldr	r1, [r4, #0]
 8007d0e:	1860      	adds	r0, r4, r1
 8007d10:	4283      	cmp	r3, r0
 8007d12:	d1f3      	bne.n	8007cfc <_free_r+0x20>
 8007d14:	6818      	ldr	r0, [r3, #0]
 8007d16:	685b      	ldr	r3, [r3, #4]
 8007d18:	1841      	adds	r1, r0, r1
 8007d1a:	6021      	str	r1, [r4, #0]
 8007d1c:	e7ee      	b.n	8007cfc <_free_r+0x20>
 8007d1e:	001a      	movs	r2, r3
 8007d20:	685b      	ldr	r3, [r3, #4]
 8007d22:	2b00      	cmp	r3, #0
 8007d24:	d001      	beq.n	8007d2a <_free_r+0x4e>
 8007d26:	42a3      	cmp	r3, r4
 8007d28:	d9f9      	bls.n	8007d1e <_free_r+0x42>
 8007d2a:	6811      	ldr	r1, [r2, #0]
 8007d2c:	1850      	adds	r0, r2, r1
 8007d2e:	42a0      	cmp	r0, r4
 8007d30:	d10b      	bne.n	8007d4a <_free_r+0x6e>
 8007d32:	6820      	ldr	r0, [r4, #0]
 8007d34:	1809      	adds	r1, r1, r0
 8007d36:	1850      	adds	r0, r2, r1
 8007d38:	6011      	str	r1, [r2, #0]
 8007d3a:	4283      	cmp	r3, r0
 8007d3c:	d1e0      	bne.n	8007d00 <_free_r+0x24>
 8007d3e:	6818      	ldr	r0, [r3, #0]
 8007d40:	685b      	ldr	r3, [r3, #4]
 8007d42:	1841      	adds	r1, r0, r1
 8007d44:	6011      	str	r1, [r2, #0]
 8007d46:	6053      	str	r3, [r2, #4]
 8007d48:	e7da      	b.n	8007d00 <_free_r+0x24>
 8007d4a:	42a0      	cmp	r0, r4
 8007d4c:	d902      	bls.n	8007d54 <_free_r+0x78>
 8007d4e:	230c      	movs	r3, #12
 8007d50:	602b      	str	r3, [r5, #0]
 8007d52:	e7d5      	b.n	8007d00 <_free_r+0x24>
 8007d54:	6821      	ldr	r1, [r4, #0]
 8007d56:	1860      	adds	r0, r4, r1
 8007d58:	4283      	cmp	r3, r0
 8007d5a:	d103      	bne.n	8007d64 <_free_r+0x88>
 8007d5c:	6818      	ldr	r0, [r3, #0]
 8007d5e:	685b      	ldr	r3, [r3, #4]
 8007d60:	1841      	adds	r1, r0, r1
 8007d62:	6021      	str	r1, [r4, #0]
 8007d64:	6063      	str	r3, [r4, #4]
 8007d66:	6054      	str	r4, [r2, #4]
 8007d68:	e7ca      	b.n	8007d00 <_free_r+0x24>
 8007d6a:	46c0      	nop			; (mov r8, r8)
 8007d6c:	20002314 	.word	0x20002314

08007d70 <sbrk_aligned>:
 8007d70:	b570      	push	{r4, r5, r6, lr}
 8007d72:	4e0f      	ldr	r6, [pc, #60]	; (8007db0 <sbrk_aligned+0x40>)
 8007d74:	000d      	movs	r5, r1
 8007d76:	6831      	ldr	r1, [r6, #0]
 8007d78:	0004      	movs	r4, r0
 8007d7a:	2900      	cmp	r1, #0
 8007d7c:	d102      	bne.n	8007d84 <sbrk_aligned+0x14>
 8007d7e:	f000 fb53 	bl	8008428 <_sbrk_r>
 8007d82:	6030      	str	r0, [r6, #0]
 8007d84:	0029      	movs	r1, r5
 8007d86:	0020      	movs	r0, r4
 8007d88:	f000 fb4e 	bl	8008428 <_sbrk_r>
 8007d8c:	1c43      	adds	r3, r0, #1
 8007d8e:	d00a      	beq.n	8007da6 <sbrk_aligned+0x36>
 8007d90:	2303      	movs	r3, #3
 8007d92:	1cc5      	adds	r5, r0, #3
 8007d94:	439d      	bics	r5, r3
 8007d96:	42a8      	cmp	r0, r5
 8007d98:	d007      	beq.n	8007daa <sbrk_aligned+0x3a>
 8007d9a:	1a29      	subs	r1, r5, r0
 8007d9c:	0020      	movs	r0, r4
 8007d9e:	f000 fb43 	bl	8008428 <_sbrk_r>
 8007da2:	1c43      	adds	r3, r0, #1
 8007da4:	d101      	bne.n	8007daa <sbrk_aligned+0x3a>
 8007da6:	2501      	movs	r5, #1
 8007da8:	426d      	negs	r5, r5
 8007daa:	0028      	movs	r0, r5
 8007dac:	bd70      	pop	{r4, r5, r6, pc}
 8007dae:	46c0      	nop			; (mov r8, r8)
 8007db0:	20002318 	.word	0x20002318

08007db4 <_malloc_r>:
 8007db4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007db6:	2203      	movs	r2, #3
 8007db8:	1ccb      	adds	r3, r1, #3
 8007dba:	4393      	bics	r3, r2
 8007dbc:	3308      	adds	r3, #8
 8007dbe:	0006      	movs	r6, r0
 8007dc0:	001f      	movs	r7, r3
 8007dc2:	2b0c      	cmp	r3, #12
 8007dc4:	d232      	bcs.n	8007e2c <_malloc_r+0x78>
 8007dc6:	270c      	movs	r7, #12
 8007dc8:	42b9      	cmp	r1, r7
 8007dca:	d831      	bhi.n	8007e30 <_malloc_r+0x7c>
 8007dcc:	0030      	movs	r0, r6
 8007dce:	f000 fe77 	bl	8008ac0 <__malloc_lock>
 8007dd2:	4d32      	ldr	r5, [pc, #200]	; (8007e9c <_malloc_r+0xe8>)
 8007dd4:	682b      	ldr	r3, [r5, #0]
 8007dd6:	001c      	movs	r4, r3
 8007dd8:	2c00      	cmp	r4, #0
 8007dda:	d12e      	bne.n	8007e3a <_malloc_r+0x86>
 8007ddc:	0039      	movs	r1, r7
 8007dde:	0030      	movs	r0, r6
 8007de0:	f7ff ffc6 	bl	8007d70 <sbrk_aligned>
 8007de4:	0004      	movs	r4, r0
 8007de6:	1c43      	adds	r3, r0, #1
 8007de8:	d11e      	bne.n	8007e28 <_malloc_r+0x74>
 8007dea:	682c      	ldr	r4, [r5, #0]
 8007dec:	0025      	movs	r5, r4
 8007dee:	2d00      	cmp	r5, #0
 8007df0:	d14a      	bne.n	8007e88 <_malloc_r+0xd4>
 8007df2:	6823      	ldr	r3, [r4, #0]
 8007df4:	0029      	movs	r1, r5
 8007df6:	18e3      	adds	r3, r4, r3
 8007df8:	0030      	movs	r0, r6
 8007dfa:	9301      	str	r3, [sp, #4]
 8007dfc:	f000 fb14 	bl	8008428 <_sbrk_r>
 8007e00:	9b01      	ldr	r3, [sp, #4]
 8007e02:	4283      	cmp	r3, r0
 8007e04:	d143      	bne.n	8007e8e <_malloc_r+0xda>
 8007e06:	6823      	ldr	r3, [r4, #0]
 8007e08:	3703      	adds	r7, #3
 8007e0a:	1aff      	subs	r7, r7, r3
 8007e0c:	2303      	movs	r3, #3
 8007e0e:	439f      	bics	r7, r3
 8007e10:	3708      	adds	r7, #8
 8007e12:	2f0c      	cmp	r7, #12
 8007e14:	d200      	bcs.n	8007e18 <_malloc_r+0x64>
 8007e16:	270c      	movs	r7, #12
 8007e18:	0039      	movs	r1, r7
 8007e1a:	0030      	movs	r0, r6
 8007e1c:	f7ff ffa8 	bl	8007d70 <sbrk_aligned>
 8007e20:	1c43      	adds	r3, r0, #1
 8007e22:	d034      	beq.n	8007e8e <_malloc_r+0xda>
 8007e24:	6823      	ldr	r3, [r4, #0]
 8007e26:	19df      	adds	r7, r3, r7
 8007e28:	6027      	str	r7, [r4, #0]
 8007e2a:	e013      	b.n	8007e54 <_malloc_r+0xa0>
 8007e2c:	2b00      	cmp	r3, #0
 8007e2e:	dacb      	bge.n	8007dc8 <_malloc_r+0x14>
 8007e30:	230c      	movs	r3, #12
 8007e32:	2500      	movs	r5, #0
 8007e34:	6033      	str	r3, [r6, #0]
 8007e36:	0028      	movs	r0, r5
 8007e38:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8007e3a:	6822      	ldr	r2, [r4, #0]
 8007e3c:	1bd1      	subs	r1, r2, r7
 8007e3e:	d420      	bmi.n	8007e82 <_malloc_r+0xce>
 8007e40:	290b      	cmp	r1, #11
 8007e42:	d917      	bls.n	8007e74 <_malloc_r+0xc0>
 8007e44:	19e2      	adds	r2, r4, r7
 8007e46:	6027      	str	r7, [r4, #0]
 8007e48:	42a3      	cmp	r3, r4
 8007e4a:	d111      	bne.n	8007e70 <_malloc_r+0xbc>
 8007e4c:	602a      	str	r2, [r5, #0]
 8007e4e:	6863      	ldr	r3, [r4, #4]
 8007e50:	6011      	str	r1, [r2, #0]
 8007e52:	6053      	str	r3, [r2, #4]
 8007e54:	0030      	movs	r0, r6
 8007e56:	0025      	movs	r5, r4
 8007e58:	f000 fe3a 	bl	8008ad0 <__malloc_unlock>
 8007e5c:	2207      	movs	r2, #7
 8007e5e:	350b      	adds	r5, #11
 8007e60:	1d23      	adds	r3, r4, #4
 8007e62:	4395      	bics	r5, r2
 8007e64:	1aea      	subs	r2, r5, r3
 8007e66:	429d      	cmp	r5, r3
 8007e68:	d0e5      	beq.n	8007e36 <_malloc_r+0x82>
 8007e6a:	1b5b      	subs	r3, r3, r5
 8007e6c:	50a3      	str	r3, [r4, r2]
 8007e6e:	e7e2      	b.n	8007e36 <_malloc_r+0x82>
 8007e70:	605a      	str	r2, [r3, #4]
 8007e72:	e7ec      	b.n	8007e4e <_malloc_r+0x9a>
 8007e74:	6862      	ldr	r2, [r4, #4]
 8007e76:	42a3      	cmp	r3, r4
 8007e78:	d101      	bne.n	8007e7e <_malloc_r+0xca>
 8007e7a:	602a      	str	r2, [r5, #0]
 8007e7c:	e7ea      	b.n	8007e54 <_malloc_r+0xa0>
 8007e7e:	605a      	str	r2, [r3, #4]
 8007e80:	e7e8      	b.n	8007e54 <_malloc_r+0xa0>
 8007e82:	0023      	movs	r3, r4
 8007e84:	6864      	ldr	r4, [r4, #4]
 8007e86:	e7a7      	b.n	8007dd8 <_malloc_r+0x24>
 8007e88:	002c      	movs	r4, r5
 8007e8a:	686d      	ldr	r5, [r5, #4]
 8007e8c:	e7af      	b.n	8007dee <_malloc_r+0x3a>
 8007e8e:	230c      	movs	r3, #12
 8007e90:	0030      	movs	r0, r6
 8007e92:	6033      	str	r3, [r6, #0]
 8007e94:	f000 fe1c 	bl	8008ad0 <__malloc_unlock>
 8007e98:	e7cd      	b.n	8007e36 <_malloc_r+0x82>
 8007e9a:	46c0      	nop			; (mov r8, r8)
 8007e9c:	20002314 	.word	0x20002314

08007ea0 <__ssputs_r>:
 8007ea0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007ea2:	688e      	ldr	r6, [r1, #8]
 8007ea4:	b085      	sub	sp, #20
 8007ea6:	0007      	movs	r7, r0
 8007ea8:	000c      	movs	r4, r1
 8007eaa:	9203      	str	r2, [sp, #12]
 8007eac:	9301      	str	r3, [sp, #4]
 8007eae:	429e      	cmp	r6, r3
 8007eb0:	d83c      	bhi.n	8007f2c <__ssputs_r+0x8c>
 8007eb2:	2390      	movs	r3, #144	; 0x90
 8007eb4:	898a      	ldrh	r2, [r1, #12]
 8007eb6:	00db      	lsls	r3, r3, #3
 8007eb8:	421a      	tst	r2, r3
 8007eba:	d034      	beq.n	8007f26 <__ssputs_r+0x86>
 8007ebc:	6909      	ldr	r1, [r1, #16]
 8007ebe:	6823      	ldr	r3, [r4, #0]
 8007ec0:	6960      	ldr	r0, [r4, #20]
 8007ec2:	1a5b      	subs	r3, r3, r1
 8007ec4:	9302      	str	r3, [sp, #8]
 8007ec6:	2303      	movs	r3, #3
 8007ec8:	4343      	muls	r3, r0
 8007eca:	0fdd      	lsrs	r5, r3, #31
 8007ecc:	18ed      	adds	r5, r5, r3
 8007ece:	9b01      	ldr	r3, [sp, #4]
 8007ed0:	9802      	ldr	r0, [sp, #8]
 8007ed2:	3301      	adds	r3, #1
 8007ed4:	181b      	adds	r3, r3, r0
 8007ed6:	106d      	asrs	r5, r5, #1
 8007ed8:	42ab      	cmp	r3, r5
 8007eda:	d900      	bls.n	8007ede <__ssputs_r+0x3e>
 8007edc:	001d      	movs	r5, r3
 8007ede:	0553      	lsls	r3, r2, #21
 8007ee0:	d532      	bpl.n	8007f48 <__ssputs_r+0xa8>
 8007ee2:	0029      	movs	r1, r5
 8007ee4:	0038      	movs	r0, r7
 8007ee6:	f7ff ff65 	bl	8007db4 <_malloc_r>
 8007eea:	1e06      	subs	r6, r0, #0
 8007eec:	d109      	bne.n	8007f02 <__ssputs_r+0x62>
 8007eee:	230c      	movs	r3, #12
 8007ef0:	603b      	str	r3, [r7, #0]
 8007ef2:	2340      	movs	r3, #64	; 0x40
 8007ef4:	2001      	movs	r0, #1
 8007ef6:	89a2      	ldrh	r2, [r4, #12]
 8007ef8:	4240      	negs	r0, r0
 8007efa:	4313      	orrs	r3, r2
 8007efc:	81a3      	strh	r3, [r4, #12]
 8007efe:	b005      	add	sp, #20
 8007f00:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007f02:	9a02      	ldr	r2, [sp, #8]
 8007f04:	6921      	ldr	r1, [r4, #16]
 8007f06:	f7ff fb18 	bl	800753a <memcpy>
 8007f0a:	89a3      	ldrh	r3, [r4, #12]
 8007f0c:	4a14      	ldr	r2, [pc, #80]	; (8007f60 <__ssputs_r+0xc0>)
 8007f0e:	401a      	ands	r2, r3
 8007f10:	2380      	movs	r3, #128	; 0x80
 8007f12:	4313      	orrs	r3, r2
 8007f14:	81a3      	strh	r3, [r4, #12]
 8007f16:	9b02      	ldr	r3, [sp, #8]
 8007f18:	6126      	str	r6, [r4, #16]
 8007f1a:	18f6      	adds	r6, r6, r3
 8007f1c:	6026      	str	r6, [r4, #0]
 8007f1e:	6165      	str	r5, [r4, #20]
 8007f20:	9e01      	ldr	r6, [sp, #4]
 8007f22:	1aed      	subs	r5, r5, r3
 8007f24:	60a5      	str	r5, [r4, #8]
 8007f26:	9b01      	ldr	r3, [sp, #4]
 8007f28:	429e      	cmp	r6, r3
 8007f2a:	d900      	bls.n	8007f2e <__ssputs_r+0x8e>
 8007f2c:	9e01      	ldr	r6, [sp, #4]
 8007f2e:	0032      	movs	r2, r6
 8007f30:	9903      	ldr	r1, [sp, #12]
 8007f32:	6820      	ldr	r0, [r4, #0]
 8007f34:	f000 fdb0 	bl	8008a98 <memmove>
 8007f38:	68a3      	ldr	r3, [r4, #8]
 8007f3a:	2000      	movs	r0, #0
 8007f3c:	1b9b      	subs	r3, r3, r6
 8007f3e:	60a3      	str	r3, [r4, #8]
 8007f40:	6823      	ldr	r3, [r4, #0]
 8007f42:	199e      	adds	r6, r3, r6
 8007f44:	6026      	str	r6, [r4, #0]
 8007f46:	e7da      	b.n	8007efe <__ssputs_r+0x5e>
 8007f48:	002a      	movs	r2, r5
 8007f4a:	0038      	movs	r0, r7
 8007f4c:	f000 fdc8 	bl	8008ae0 <_realloc_r>
 8007f50:	1e06      	subs	r6, r0, #0
 8007f52:	d1e0      	bne.n	8007f16 <__ssputs_r+0x76>
 8007f54:	0038      	movs	r0, r7
 8007f56:	6921      	ldr	r1, [r4, #16]
 8007f58:	f7ff fec0 	bl	8007cdc <_free_r>
 8007f5c:	e7c7      	b.n	8007eee <__ssputs_r+0x4e>
 8007f5e:	46c0      	nop			; (mov r8, r8)
 8007f60:	fffffb7f 	.word	0xfffffb7f

08007f64 <_svfiprintf_r>:
 8007f64:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007f66:	b0a1      	sub	sp, #132	; 0x84
 8007f68:	9003      	str	r0, [sp, #12]
 8007f6a:	001d      	movs	r5, r3
 8007f6c:	898b      	ldrh	r3, [r1, #12]
 8007f6e:	000f      	movs	r7, r1
 8007f70:	0016      	movs	r6, r2
 8007f72:	061b      	lsls	r3, r3, #24
 8007f74:	d511      	bpl.n	8007f9a <_svfiprintf_r+0x36>
 8007f76:	690b      	ldr	r3, [r1, #16]
 8007f78:	2b00      	cmp	r3, #0
 8007f7a:	d10e      	bne.n	8007f9a <_svfiprintf_r+0x36>
 8007f7c:	2140      	movs	r1, #64	; 0x40
 8007f7e:	f7ff ff19 	bl	8007db4 <_malloc_r>
 8007f82:	6038      	str	r0, [r7, #0]
 8007f84:	6138      	str	r0, [r7, #16]
 8007f86:	2800      	cmp	r0, #0
 8007f88:	d105      	bne.n	8007f96 <_svfiprintf_r+0x32>
 8007f8a:	230c      	movs	r3, #12
 8007f8c:	9a03      	ldr	r2, [sp, #12]
 8007f8e:	3801      	subs	r0, #1
 8007f90:	6013      	str	r3, [r2, #0]
 8007f92:	b021      	add	sp, #132	; 0x84
 8007f94:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007f96:	2340      	movs	r3, #64	; 0x40
 8007f98:	617b      	str	r3, [r7, #20]
 8007f9a:	2300      	movs	r3, #0
 8007f9c:	ac08      	add	r4, sp, #32
 8007f9e:	6163      	str	r3, [r4, #20]
 8007fa0:	3320      	adds	r3, #32
 8007fa2:	7663      	strb	r3, [r4, #25]
 8007fa4:	3310      	adds	r3, #16
 8007fa6:	76a3      	strb	r3, [r4, #26]
 8007fa8:	9507      	str	r5, [sp, #28]
 8007faa:	0035      	movs	r5, r6
 8007fac:	782b      	ldrb	r3, [r5, #0]
 8007fae:	2b00      	cmp	r3, #0
 8007fb0:	d001      	beq.n	8007fb6 <_svfiprintf_r+0x52>
 8007fb2:	2b25      	cmp	r3, #37	; 0x25
 8007fb4:	d147      	bne.n	8008046 <_svfiprintf_r+0xe2>
 8007fb6:	1bab      	subs	r3, r5, r6
 8007fb8:	9305      	str	r3, [sp, #20]
 8007fba:	42b5      	cmp	r5, r6
 8007fbc:	d00c      	beq.n	8007fd8 <_svfiprintf_r+0x74>
 8007fbe:	0032      	movs	r2, r6
 8007fc0:	0039      	movs	r1, r7
 8007fc2:	9803      	ldr	r0, [sp, #12]
 8007fc4:	f7ff ff6c 	bl	8007ea0 <__ssputs_r>
 8007fc8:	1c43      	adds	r3, r0, #1
 8007fca:	d100      	bne.n	8007fce <_svfiprintf_r+0x6a>
 8007fcc:	e0ae      	b.n	800812c <_svfiprintf_r+0x1c8>
 8007fce:	6962      	ldr	r2, [r4, #20]
 8007fd0:	9b05      	ldr	r3, [sp, #20]
 8007fd2:	4694      	mov	ip, r2
 8007fd4:	4463      	add	r3, ip
 8007fd6:	6163      	str	r3, [r4, #20]
 8007fd8:	782b      	ldrb	r3, [r5, #0]
 8007fda:	2b00      	cmp	r3, #0
 8007fdc:	d100      	bne.n	8007fe0 <_svfiprintf_r+0x7c>
 8007fde:	e0a5      	b.n	800812c <_svfiprintf_r+0x1c8>
 8007fe0:	2201      	movs	r2, #1
 8007fe2:	2300      	movs	r3, #0
 8007fe4:	4252      	negs	r2, r2
 8007fe6:	6062      	str	r2, [r4, #4]
 8007fe8:	a904      	add	r1, sp, #16
 8007fea:	3254      	adds	r2, #84	; 0x54
 8007fec:	1852      	adds	r2, r2, r1
 8007fee:	1c6e      	adds	r6, r5, #1
 8007ff0:	6023      	str	r3, [r4, #0]
 8007ff2:	60e3      	str	r3, [r4, #12]
 8007ff4:	60a3      	str	r3, [r4, #8]
 8007ff6:	7013      	strb	r3, [r2, #0]
 8007ff8:	65a3      	str	r3, [r4, #88]	; 0x58
 8007ffa:	2205      	movs	r2, #5
 8007ffc:	7831      	ldrb	r1, [r6, #0]
 8007ffe:	4854      	ldr	r0, [pc, #336]	; (8008150 <_svfiprintf_r+0x1ec>)
 8008000:	f7ff fa90 	bl	8007524 <memchr>
 8008004:	1c75      	adds	r5, r6, #1
 8008006:	2800      	cmp	r0, #0
 8008008:	d11f      	bne.n	800804a <_svfiprintf_r+0xe6>
 800800a:	6822      	ldr	r2, [r4, #0]
 800800c:	06d3      	lsls	r3, r2, #27
 800800e:	d504      	bpl.n	800801a <_svfiprintf_r+0xb6>
 8008010:	2353      	movs	r3, #83	; 0x53
 8008012:	a904      	add	r1, sp, #16
 8008014:	185b      	adds	r3, r3, r1
 8008016:	2120      	movs	r1, #32
 8008018:	7019      	strb	r1, [r3, #0]
 800801a:	0713      	lsls	r3, r2, #28
 800801c:	d504      	bpl.n	8008028 <_svfiprintf_r+0xc4>
 800801e:	2353      	movs	r3, #83	; 0x53
 8008020:	a904      	add	r1, sp, #16
 8008022:	185b      	adds	r3, r3, r1
 8008024:	212b      	movs	r1, #43	; 0x2b
 8008026:	7019      	strb	r1, [r3, #0]
 8008028:	7833      	ldrb	r3, [r6, #0]
 800802a:	2b2a      	cmp	r3, #42	; 0x2a
 800802c:	d016      	beq.n	800805c <_svfiprintf_r+0xf8>
 800802e:	0035      	movs	r5, r6
 8008030:	2100      	movs	r1, #0
 8008032:	200a      	movs	r0, #10
 8008034:	68e3      	ldr	r3, [r4, #12]
 8008036:	782a      	ldrb	r2, [r5, #0]
 8008038:	1c6e      	adds	r6, r5, #1
 800803a:	3a30      	subs	r2, #48	; 0x30
 800803c:	2a09      	cmp	r2, #9
 800803e:	d94e      	bls.n	80080de <_svfiprintf_r+0x17a>
 8008040:	2900      	cmp	r1, #0
 8008042:	d111      	bne.n	8008068 <_svfiprintf_r+0x104>
 8008044:	e017      	b.n	8008076 <_svfiprintf_r+0x112>
 8008046:	3501      	adds	r5, #1
 8008048:	e7b0      	b.n	8007fac <_svfiprintf_r+0x48>
 800804a:	4b41      	ldr	r3, [pc, #260]	; (8008150 <_svfiprintf_r+0x1ec>)
 800804c:	6822      	ldr	r2, [r4, #0]
 800804e:	1ac0      	subs	r0, r0, r3
 8008050:	2301      	movs	r3, #1
 8008052:	4083      	lsls	r3, r0
 8008054:	4313      	orrs	r3, r2
 8008056:	002e      	movs	r6, r5
 8008058:	6023      	str	r3, [r4, #0]
 800805a:	e7ce      	b.n	8007ffa <_svfiprintf_r+0x96>
 800805c:	9b07      	ldr	r3, [sp, #28]
 800805e:	1d19      	adds	r1, r3, #4
 8008060:	681b      	ldr	r3, [r3, #0]
 8008062:	9107      	str	r1, [sp, #28]
 8008064:	2b00      	cmp	r3, #0
 8008066:	db01      	blt.n	800806c <_svfiprintf_r+0x108>
 8008068:	930b      	str	r3, [sp, #44]	; 0x2c
 800806a:	e004      	b.n	8008076 <_svfiprintf_r+0x112>
 800806c:	425b      	negs	r3, r3
 800806e:	60e3      	str	r3, [r4, #12]
 8008070:	2302      	movs	r3, #2
 8008072:	4313      	orrs	r3, r2
 8008074:	6023      	str	r3, [r4, #0]
 8008076:	782b      	ldrb	r3, [r5, #0]
 8008078:	2b2e      	cmp	r3, #46	; 0x2e
 800807a:	d10a      	bne.n	8008092 <_svfiprintf_r+0x12e>
 800807c:	786b      	ldrb	r3, [r5, #1]
 800807e:	2b2a      	cmp	r3, #42	; 0x2a
 8008080:	d135      	bne.n	80080ee <_svfiprintf_r+0x18a>
 8008082:	9b07      	ldr	r3, [sp, #28]
 8008084:	3502      	adds	r5, #2
 8008086:	1d1a      	adds	r2, r3, #4
 8008088:	681b      	ldr	r3, [r3, #0]
 800808a:	9207      	str	r2, [sp, #28]
 800808c:	2b00      	cmp	r3, #0
 800808e:	db2b      	blt.n	80080e8 <_svfiprintf_r+0x184>
 8008090:	9309      	str	r3, [sp, #36]	; 0x24
 8008092:	4e30      	ldr	r6, [pc, #192]	; (8008154 <_svfiprintf_r+0x1f0>)
 8008094:	2203      	movs	r2, #3
 8008096:	0030      	movs	r0, r6
 8008098:	7829      	ldrb	r1, [r5, #0]
 800809a:	f7ff fa43 	bl	8007524 <memchr>
 800809e:	2800      	cmp	r0, #0
 80080a0:	d006      	beq.n	80080b0 <_svfiprintf_r+0x14c>
 80080a2:	2340      	movs	r3, #64	; 0x40
 80080a4:	1b80      	subs	r0, r0, r6
 80080a6:	4083      	lsls	r3, r0
 80080a8:	6822      	ldr	r2, [r4, #0]
 80080aa:	3501      	adds	r5, #1
 80080ac:	4313      	orrs	r3, r2
 80080ae:	6023      	str	r3, [r4, #0]
 80080b0:	7829      	ldrb	r1, [r5, #0]
 80080b2:	2206      	movs	r2, #6
 80080b4:	4828      	ldr	r0, [pc, #160]	; (8008158 <_svfiprintf_r+0x1f4>)
 80080b6:	1c6e      	adds	r6, r5, #1
 80080b8:	7621      	strb	r1, [r4, #24]
 80080ba:	f7ff fa33 	bl	8007524 <memchr>
 80080be:	2800      	cmp	r0, #0
 80080c0:	d03c      	beq.n	800813c <_svfiprintf_r+0x1d8>
 80080c2:	4b26      	ldr	r3, [pc, #152]	; (800815c <_svfiprintf_r+0x1f8>)
 80080c4:	2b00      	cmp	r3, #0
 80080c6:	d125      	bne.n	8008114 <_svfiprintf_r+0x1b0>
 80080c8:	2207      	movs	r2, #7
 80080ca:	9b07      	ldr	r3, [sp, #28]
 80080cc:	3307      	adds	r3, #7
 80080ce:	4393      	bics	r3, r2
 80080d0:	3308      	adds	r3, #8
 80080d2:	9307      	str	r3, [sp, #28]
 80080d4:	6963      	ldr	r3, [r4, #20]
 80080d6:	9a04      	ldr	r2, [sp, #16]
 80080d8:	189b      	adds	r3, r3, r2
 80080da:	6163      	str	r3, [r4, #20]
 80080dc:	e765      	b.n	8007faa <_svfiprintf_r+0x46>
 80080de:	4343      	muls	r3, r0
 80080e0:	0035      	movs	r5, r6
 80080e2:	2101      	movs	r1, #1
 80080e4:	189b      	adds	r3, r3, r2
 80080e6:	e7a6      	b.n	8008036 <_svfiprintf_r+0xd2>
 80080e8:	2301      	movs	r3, #1
 80080ea:	425b      	negs	r3, r3
 80080ec:	e7d0      	b.n	8008090 <_svfiprintf_r+0x12c>
 80080ee:	2300      	movs	r3, #0
 80080f0:	200a      	movs	r0, #10
 80080f2:	001a      	movs	r2, r3
 80080f4:	3501      	adds	r5, #1
 80080f6:	6063      	str	r3, [r4, #4]
 80080f8:	7829      	ldrb	r1, [r5, #0]
 80080fa:	1c6e      	adds	r6, r5, #1
 80080fc:	3930      	subs	r1, #48	; 0x30
 80080fe:	2909      	cmp	r1, #9
 8008100:	d903      	bls.n	800810a <_svfiprintf_r+0x1a6>
 8008102:	2b00      	cmp	r3, #0
 8008104:	d0c5      	beq.n	8008092 <_svfiprintf_r+0x12e>
 8008106:	9209      	str	r2, [sp, #36]	; 0x24
 8008108:	e7c3      	b.n	8008092 <_svfiprintf_r+0x12e>
 800810a:	4342      	muls	r2, r0
 800810c:	0035      	movs	r5, r6
 800810e:	2301      	movs	r3, #1
 8008110:	1852      	adds	r2, r2, r1
 8008112:	e7f1      	b.n	80080f8 <_svfiprintf_r+0x194>
 8008114:	ab07      	add	r3, sp, #28
 8008116:	9300      	str	r3, [sp, #0]
 8008118:	003a      	movs	r2, r7
 800811a:	0021      	movs	r1, r4
 800811c:	4b10      	ldr	r3, [pc, #64]	; (8008160 <_svfiprintf_r+0x1fc>)
 800811e:	9803      	ldr	r0, [sp, #12]
 8008120:	f7fd ff3a 	bl	8005f98 <_printf_float>
 8008124:	9004      	str	r0, [sp, #16]
 8008126:	9b04      	ldr	r3, [sp, #16]
 8008128:	3301      	adds	r3, #1
 800812a:	d1d3      	bne.n	80080d4 <_svfiprintf_r+0x170>
 800812c:	89bb      	ldrh	r3, [r7, #12]
 800812e:	980d      	ldr	r0, [sp, #52]	; 0x34
 8008130:	065b      	lsls	r3, r3, #25
 8008132:	d400      	bmi.n	8008136 <_svfiprintf_r+0x1d2>
 8008134:	e72d      	b.n	8007f92 <_svfiprintf_r+0x2e>
 8008136:	2001      	movs	r0, #1
 8008138:	4240      	negs	r0, r0
 800813a:	e72a      	b.n	8007f92 <_svfiprintf_r+0x2e>
 800813c:	ab07      	add	r3, sp, #28
 800813e:	9300      	str	r3, [sp, #0]
 8008140:	003a      	movs	r2, r7
 8008142:	0021      	movs	r1, r4
 8008144:	4b06      	ldr	r3, [pc, #24]	; (8008160 <_svfiprintf_r+0x1fc>)
 8008146:	9803      	ldr	r0, [sp, #12]
 8008148:	f7fe f9d8 	bl	80064fc <_printf_i>
 800814c:	e7ea      	b.n	8008124 <_svfiprintf_r+0x1c0>
 800814e:	46c0      	nop			; (mov r8, r8)
 8008150:	08009694 	.word	0x08009694
 8008154:	0800969a 	.word	0x0800969a
 8008158:	0800969e 	.word	0x0800969e
 800815c:	08005f99 	.word	0x08005f99
 8008160:	08007ea1 	.word	0x08007ea1

08008164 <__sfputc_r>:
 8008164:	6893      	ldr	r3, [r2, #8]
 8008166:	b510      	push	{r4, lr}
 8008168:	3b01      	subs	r3, #1
 800816a:	6093      	str	r3, [r2, #8]
 800816c:	2b00      	cmp	r3, #0
 800816e:	da04      	bge.n	800817a <__sfputc_r+0x16>
 8008170:	6994      	ldr	r4, [r2, #24]
 8008172:	42a3      	cmp	r3, r4
 8008174:	db07      	blt.n	8008186 <__sfputc_r+0x22>
 8008176:	290a      	cmp	r1, #10
 8008178:	d005      	beq.n	8008186 <__sfputc_r+0x22>
 800817a:	6813      	ldr	r3, [r2, #0]
 800817c:	1c58      	adds	r0, r3, #1
 800817e:	6010      	str	r0, [r2, #0]
 8008180:	7019      	strb	r1, [r3, #0]
 8008182:	0008      	movs	r0, r1
 8008184:	bd10      	pop	{r4, pc}
 8008186:	f000 f961 	bl	800844c <__swbuf_r>
 800818a:	0001      	movs	r1, r0
 800818c:	e7f9      	b.n	8008182 <__sfputc_r+0x1e>

0800818e <__sfputs_r>:
 800818e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008190:	0006      	movs	r6, r0
 8008192:	000f      	movs	r7, r1
 8008194:	0014      	movs	r4, r2
 8008196:	18d5      	adds	r5, r2, r3
 8008198:	42ac      	cmp	r4, r5
 800819a:	d101      	bne.n	80081a0 <__sfputs_r+0x12>
 800819c:	2000      	movs	r0, #0
 800819e:	e007      	b.n	80081b0 <__sfputs_r+0x22>
 80081a0:	7821      	ldrb	r1, [r4, #0]
 80081a2:	003a      	movs	r2, r7
 80081a4:	0030      	movs	r0, r6
 80081a6:	f7ff ffdd 	bl	8008164 <__sfputc_r>
 80081aa:	3401      	adds	r4, #1
 80081ac:	1c43      	adds	r3, r0, #1
 80081ae:	d1f3      	bne.n	8008198 <__sfputs_r+0xa>
 80081b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080081b4 <_vfiprintf_r>:
 80081b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80081b6:	b0a1      	sub	sp, #132	; 0x84
 80081b8:	0006      	movs	r6, r0
 80081ba:	000c      	movs	r4, r1
 80081bc:	001f      	movs	r7, r3
 80081be:	9203      	str	r2, [sp, #12]
 80081c0:	2800      	cmp	r0, #0
 80081c2:	d004      	beq.n	80081ce <_vfiprintf_r+0x1a>
 80081c4:	6983      	ldr	r3, [r0, #24]
 80081c6:	2b00      	cmp	r3, #0
 80081c8:	d101      	bne.n	80081ce <_vfiprintf_r+0x1a>
 80081ca:	f000 fb43 	bl	8008854 <__sinit>
 80081ce:	4b8e      	ldr	r3, [pc, #568]	; (8008408 <_vfiprintf_r+0x254>)
 80081d0:	429c      	cmp	r4, r3
 80081d2:	d11c      	bne.n	800820e <_vfiprintf_r+0x5a>
 80081d4:	6874      	ldr	r4, [r6, #4]
 80081d6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80081d8:	07db      	lsls	r3, r3, #31
 80081da:	d405      	bmi.n	80081e8 <_vfiprintf_r+0x34>
 80081dc:	89a3      	ldrh	r3, [r4, #12]
 80081de:	059b      	lsls	r3, r3, #22
 80081e0:	d402      	bmi.n	80081e8 <_vfiprintf_r+0x34>
 80081e2:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80081e4:	f000 fbd7 	bl	8008996 <__retarget_lock_acquire_recursive>
 80081e8:	89a3      	ldrh	r3, [r4, #12]
 80081ea:	071b      	lsls	r3, r3, #28
 80081ec:	d502      	bpl.n	80081f4 <_vfiprintf_r+0x40>
 80081ee:	6923      	ldr	r3, [r4, #16]
 80081f0:	2b00      	cmp	r3, #0
 80081f2:	d11d      	bne.n	8008230 <_vfiprintf_r+0x7c>
 80081f4:	0021      	movs	r1, r4
 80081f6:	0030      	movs	r0, r6
 80081f8:	f000 f97e 	bl	80084f8 <__swsetup_r>
 80081fc:	2800      	cmp	r0, #0
 80081fe:	d017      	beq.n	8008230 <_vfiprintf_r+0x7c>
 8008200:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008202:	07db      	lsls	r3, r3, #31
 8008204:	d50d      	bpl.n	8008222 <_vfiprintf_r+0x6e>
 8008206:	2001      	movs	r0, #1
 8008208:	4240      	negs	r0, r0
 800820a:	b021      	add	sp, #132	; 0x84
 800820c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800820e:	4b7f      	ldr	r3, [pc, #508]	; (800840c <_vfiprintf_r+0x258>)
 8008210:	429c      	cmp	r4, r3
 8008212:	d101      	bne.n	8008218 <_vfiprintf_r+0x64>
 8008214:	68b4      	ldr	r4, [r6, #8]
 8008216:	e7de      	b.n	80081d6 <_vfiprintf_r+0x22>
 8008218:	4b7d      	ldr	r3, [pc, #500]	; (8008410 <_vfiprintf_r+0x25c>)
 800821a:	429c      	cmp	r4, r3
 800821c:	d1db      	bne.n	80081d6 <_vfiprintf_r+0x22>
 800821e:	68f4      	ldr	r4, [r6, #12]
 8008220:	e7d9      	b.n	80081d6 <_vfiprintf_r+0x22>
 8008222:	89a3      	ldrh	r3, [r4, #12]
 8008224:	059b      	lsls	r3, r3, #22
 8008226:	d4ee      	bmi.n	8008206 <_vfiprintf_r+0x52>
 8008228:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800822a:	f000 fbb5 	bl	8008998 <__retarget_lock_release_recursive>
 800822e:	e7ea      	b.n	8008206 <_vfiprintf_r+0x52>
 8008230:	2300      	movs	r3, #0
 8008232:	ad08      	add	r5, sp, #32
 8008234:	616b      	str	r3, [r5, #20]
 8008236:	3320      	adds	r3, #32
 8008238:	766b      	strb	r3, [r5, #25]
 800823a:	3310      	adds	r3, #16
 800823c:	76ab      	strb	r3, [r5, #26]
 800823e:	9707      	str	r7, [sp, #28]
 8008240:	9f03      	ldr	r7, [sp, #12]
 8008242:	783b      	ldrb	r3, [r7, #0]
 8008244:	2b00      	cmp	r3, #0
 8008246:	d001      	beq.n	800824c <_vfiprintf_r+0x98>
 8008248:	2b25      	cmp	r3, #37	; 0x25
 800824a:	d14e      	bne.n	80082ea <_vfiprintf_r+0x136>
 800824c:	9b03      	ldr	r3, [sp, #12]
 800824e:	1afb      	subs	r3, r7, r3
 8008250:	9305      	str	r3, [sp, #20]
 8008252:	9b03      	ldr	r3, [sp, #12]
 8008254:	429f      	cmp	r7, r3
 8008256:	d00d      	beq.n	8008274 <_vfiprintf_r+0xc0>
 8008258:	9b05      	ldr	r3, [sp, #20]
 800825a:	0021      	movs	r1, r4
 800825c:	0030      	movs	r0, r6
 800825e:	9a03      	ldr	r2, [sp, #12]
 8008260:	f7ff ff95 	bl	800818e <__sfputs_r>
 8008264:	1c43      	adds	r3, r0, #1
 8008266:	d100      	bne.n	800826a <_vfiprintf_r+0xb6>
 8008268:	e0b5      	b.n	80083d6 <_vfiprintf_r+0x222>
 800826a:	696a      	ldr	r2, [r5, #20]
 800826c:	9b05      	ldr	r3, [sp, #20]
 800826e:	4694      	mov	ip, r2
 8008270:	4463      	add	r3, ip
 8008272:	616b      	str	r3, [r5, #20]
 8008274:	783b      	ldrb	r3, [r7, #0]
 8008276:	2b00      	cmp	r3, #0
 8008278:	d100      	bne.n	800827c <_vfiprintf_r+0xc8>
 800827a:	e0ac      	b.n	80083d6 <_vfiprintf_r+0x222>
 800827c:	2201      	movs	r2, #1
 800827e:	1c7b      	adds	r3, r7, #1
 8008280:	9303      	str	r3, [sp, #12]
 8008282:	2300      	movs	r3, #0
 8008284:	4252      	negs	r2, r2
 8008286:	606a      	str	r2, [r5, #4]
 8008288:	a904      	add	r1, sp, #16
 800828a:	3254      	adds	r2, #84	; 0x54
 800828c:	1852      	adds	r2, r2, r1
 800828e:	602b      	str	r3, [r5, #0]
 8008290:	60eb      	str	r3, [r5, #12]
 8008292:	60ab      	str	r3, [r5, #8]
 8008294:	7013      	strb	r3, [r2, #0]
 8008296:	65ab      	str	r3, [r5, #88]	; 0x58
 8008298:	9b03      	ldr	r3, [sp, #12]
 800829a:	2205      	movs	r2, #5
 800829c:	7819      	ldrb	r1, [r3, #0]
 800829e:	485d      	ldr	r0, [pc, #372]	; (8008414 <_vfiprintf_r+0x260>)
 80082a0:	f7ff f940 	bl	8007524 <memchr>
 80082a4:	9b03      	ldr	r3, [sp, #12]
 80082a6:	1c5f      	adds	r7, r3, #1
 80082a8:	2800      	cmp	r0, #0
 80082aa:	d120      	bne.n	80082ee <_vfiprintf_r+0x13a>
 80082ac:	682a      	ldr	r2, [r5, #0]
 80082ae:	06d3      	lsls	r3, r2, #27
 80082b0:	d504      	bpl.n	80082bc <_vfiprintf_r+0x108>
 80082b2:	2353      	movs	r3, #83	; 0x53
 80082b4:	a904      	add	r1, sp, #16
 80082b6:	185b      	adds	r3, r3, r1
 80082b8:	2120      	movs	r1, #32
 80082ba:	7019      	strb	r1, [r3, #0]
 80082bc:	0713      	lsls	r3, r2, #28
 80082be:	d504      	bpl.n	80082ca <_vfiprintf_r+0x116>
 80082c0:	2353      	movs	r3, #83	; 0x53
 80082c2:	a904      	add	r1, sp, #16
 80082c4:	185b      	adds	r3, r3, r1
 80082c6:	212b      	movs	r1, #43	; 0x2b
 80082c8:	7019      	strb	r1, [r3, #0]
 80082ca:	9b03      	ldr	r3, [sp, #12]
 80082cc:	781b      	ldrb	r3, [r3, #0]
 80082ce:	2b2a      	cmp	r3, #42	; 0x2a
 80082d0:	d016      	beq.n	8008300 <_vfiprintf_r+0x14c>
 80082d2:	2100      	movs	r1, #0
 80082d4:	68eb      	ldr	r3, [r5, #12]
 80082d6:	9f03      	ldr	r7, [sp, #12]
 80082d8:	783a      	ldrb	r2, [r7, #0]
 80082da:	1c78      	adds	r0, r7, #1
 80082dc:	3a30      	subs	r2, #48	; 0x30
 80082de:	4684      	mov	ip, r0
 80082e0:	2a09      	cmp	r2, #9
 80082e2:	d94f      	bls.n	8008384 <_vfiprintf_r+0x1d0>
 80082e4:	2900      	cmp	r1, #0
 80082e6:	d111      	bne.n	800830c <_vfiprintf_r+0x158>
 80082e8:	e017      	b.n	800831a <_vfiprintf_r+0x166>
 80082ea:	3701      	adds	r7, #1
 80082ec:	e7a9      	b.n	8008242 <_vfiprintf_r+0x8e>
 80082ee:	4b49      	ldr	r3, [pc, #292]	; (8008414 <_vfiprintf_r+0x260>)
 80082f0:	682a      	ldr	r2, [r5, #0]
 80082f2:	1ac0      	subs	r0, r0, r3
 80082f4:	2301      	movs	r3, #1
 80082f6:	4083      	lsls	r3, r0
 80082f8:	4313      	orrs	r3, r2
 80082fa:	602b      	str	r3, [r5, #0]
 80082fc:	9703      	str	r7, [sp, #12]
 80082fe:	e7cb      	b.n	8008298 <_vfiprintf_r+0xe4>
 8008300:	9b07      	ldr	r3, [sp, #28]
 8008302:	1d19      	adds	r1, r3, #4
 8008304:	681b      	ldr	r3, [r3, #0]
 8008306:	9107      	str	r1, [sp, #28]
 8008308:	2b00      	cmp	r3, #0
 800830a:	db01      	blt.n	8008310 <_vfiprintf_r+0x15c>
 800830c:	930b      	str	r3, [sp, #44]	; 0x2c
 800830e:	e004      	b.n	800831a <_vfiprintf_r+0x166>
 8008310:	425b      	negs	r3, r3
 8008312:	60eb      	str	r3, [r5, #12]
 8008314:	2302      	movs	r3, #2
 8008316:	4313      	orrs	r3, r2
 8008318:	602b      	str	r3, [r5, #0]
 800831a:	783b      	ldrb	r3, [r7, #0]
 800831c:	2b2e      	cmp	r3, #46	; 0x2e
 800831e:	d10a      	bne.n	8008336 <_vfiprintf_r+0x182>
 8008320:	787b      	ldrb	r3, [r7, #1]
 8008322:	2b2a      	cmp	r3, #42	; 0x2a
 8008324:	d137      	bne.n	8008396 <_vfiprintf_r+0x1e2>
 8008326:	9b07      	ldr	r3, [sp, #28]
 8008328:	3702      	adds	r7, #2
 800832a:	1d1a      	adds	r2, r3, #4
 800832c:	681b      	ldr	r3, [r3, #0]
 800832e:	9207      	str	r2, [sp, #28]
 8008330:	2b00      	cmp	r3, #0
 8008332:	db2d      	blt.n	8008390 <_vfiprintf_r+0x1dc>
 8008334:	9309      	str	r3, [sp, #36]	; 0x24
 8008336:	2203      	movs	r2, #3
 8008338:	7839      	ldrb	r1, [r7, #0]
 800833a:	4837      	ldr	r0, [pc, #220]	; (8008418 <_vfiprintf_r+0x264>)
 800833c:	f7ff f8f2 	bl	8007524 <memchr>
 8008340:	2800      	cmp	r0, #0
 8008342:	d007      	beq.n	8008354 <_vfiprintf_r+0x1a0>
 8008344:	4b34      	ldr	r3, [pc, #208]	; (8008418 <_vfiprintf_r+0x264>)
 8008346:	682a      	ldr	r2, [r5, #0]
 8008348:	1ac0      	subs	r0, r0, r3
 800834a:	2340      	movs	r3, #64	; 0x40
 800834c:	4083      	lsls	r3, r0
 800834e:	4313      	orrs	r3, r2
 8008350:	3701      	adds	r7, #1
 8008352:	602b      	str	r3, [r5, #0]
 8008354:	7839      	ldrb	r1, [r7, #0]
 8008356:	1c7b      	adds	r3, r7, #1
 8008358:	2206      	movs	r2, #6
 800835a:	4830      	ldr	r0, [pc, #192]	; (800841c <_vfiprintf_r+0x268>)
 800835c:	9303      	str	r3, [sp, #12]
 800835e:	7629      	strb	r1, [r5, #24]
 8008360:	f7ff f8e0 	bl	8007524 <memchr>
 8008364:	2800      	cmp	r0, #0
 8008366:	d045      	beq.n	80083f4 <_vfiprintf_r+0x240>
 8008368:	4b2d      	ldr	r3, [pc, #180]	; (8008420 <_vfiprintf_r+0x26c>)
 800836a:	2b00      	cmp	r3, #0
 800836c:	d127      	bne.n	80083be <_vfiprintf_r+0x20a>
 800836e:	2207      	movs	r2, #7
 8008370:	9b07      	ldr	r3, [sp, #28]
 8008372:	3307      	adds	r3, #7
 8008374:	4393      	bics	r3, r2
 8008376:	3308      	adds	r3, #8
 8008378:	9307      	str	r3, [sp, #28]
 800837a:	696b      	ldr	r3, [r5, #20]
 800837c:	9a04      	ldr	r2, [sp, #16]
 800837e:	189b      	adds	r3, r3, r2
 8008380:	616b      	str	r3, [r5, #20]
 8008382:	e75d      	b.n	8008240 <_vfiprintf_r+0x8c>
 8008384:	210a      	movs	r1, #10
 8008386:	434b      	muls	r3, r1
 8008388:	4667      	mov	r7, ip
 800838a:	189b      	adds	r3, r3, r2
 800838c:	3909      	subs	r1, #9
 800838e:	e7a3      	b.n	80082d8 <_vfiprintf_r+0x124>
 8008390:	2301      	movs	r3, #1
 8008392:	425b      	negs	r3, r3
 8008394:	e7ce      	b.n	8008334 <_vfiprintf_r+0x180>
 8008396:	2300      	movs	r3, #0
 8008398:	001a      	movs	r2, r3
 800839a:	3701      	adds	r7, #1
 800839c:	606b      	str	r3, [r5, #4]
 800839e:	7839      	ldrb	r1, [r7, #0]
 80083a0:	1c78      	adds	r0, r7, #1
 80083a2:	3930      	subs	r1, #48	; 0x30
 80083a4:	4684      	mov	ip, r0
 80083a6:	2909      	cmp	r1, #9
 80083a8:	d903      	bls.n	80083b2 <_vfiprintf_r+0x1fe>
 80083aa:	2b00      	cmp	r3, #0
 80083ac:	d0c3      	beq.n	8008336 <_vfiprintf_r+0x182>
 80083ae:	9209      	str	r2, [sp, #36]	; 0x24
 80083b0:	e7c1      	b.n	8008336 <_vfiprintf_r+0x182>
 80083b2:	230a      	movs	r3, #10
 80083b4:	435a      	muls	r2, r3
 80083b6:	4667      	mov	r7, ip
 80083b8:	1852      	adds	r2, r2, r1
 80083ba:	3b09      	subs	r3, #9
 80083bc:	e7ef      	b.n	800839e <_vfiprintf_r+0x1ea>
 80083be:	ab07      	add	r3, sp, #28
 80083c0:	9300      	str	r3, [sp, #0]
 80083c2:	0022      	movs	r2, r4
 80083c4:	0029      	movs	r1, r5
 80083c6:	0030      	movs	r0, r6
 80083c8:	4b16      	ldr	r3, [pc, #88]	; (8008424 <_vfiprintf_r+0x270>)
 80083ca:	f7fd fde5 	bl	8005f98 <_printf_float>
 80083ce:	9004      	str	r0, [sp, #16]
 80083d0:	9b04      	ldr	r3, [sp, #16]
 80083d2:	3301      	adds	r3, #1
 80083d4:	d1d1      	bne.n	800837a <_vfiprintf_r+0x1c6>
 80083d6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80083d8:	07db      	lsls	r3, r3, #31
 80083da:	d405      	bmi.n	80083e8 <_vfiprintf_r+0x234>
 80083dc:	89a3      	ldrh	r3, [r4, #12]
 80083de:	059b      	lsls	r3, r3, #22
 80083e0:	d402      	bmi.n	80083e8 <_vfiprintf_r+0x234>
 80083e2:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80083e4:	f000 fad8 	bl	8008998 <__retarget_lock_release_recursive>
 80083e8:	89a3      	ldrh	r3, [r4, #12]
 80083ea:	065b      	lsls	r3, r3, #25
 80083ec:	d500      	bpl.n	80083f0 <_vfiprintf_r+0x23c>
 80083ee:	e70a      	b.n	8008206 <_vfiprintf_r+0x52>
 80083f0:	980d      	ldr	r0, [sp, #52]	; 0x34
 80083f2:	e70a      	b.n	800820a <_vfiprintf_r+0x56>
 80083f4:	ab07      	add	r3, sp, #28
 80083f6:	9300      	str	r3, [sp, #0]
 80083f8:	0022      	movs	r2, r4
 80083fa:	0029      	movs	r1, r5
 80083fc:	0030      	movs	r0, r6
 80083fe:	4b09      	ldr	r3, [pc, #36]	; (8008424 <_vfiprintf_r+0x270>)
 8008400:	f7fe f87c 	bl	80064fc <_printf_i>
 8008404:	e7e3      	b.n	80083ce <_vfiprintf_r+0x21a>
 8008406:	46c0      	nop			; (mov r8, r8)
 8008408:	080096c8 	.word	0x080096c8
 800840c:	080096e8 	.word	0x080096e8
 8008410:	080096a8 	.word	0x080096a8
 8008414:	08009694 	.word	0x08009694
 8008418:	0800969a 	.word	0x0800969a
 800841c:	0800969e 	.word	0x0800969e
 8008420:	08005f99 	.word	0x08005f99
 8008424:	0800818f 	.word	0x0800818f

08008428 <_sbrk_r>:
 8008428:	2300      	movs	r3, #0
 800842a:	b570      	push	{r4, r5, r6, lr}
 800842c:	4d06      	ldr	r5, [pc, #24]	; (8008448 <_sbrk_r+0x20>)
 800842e:	0004      	movs	r4, r0
 8008430:	0008      	movs	r0, r1
 8008432:	602b      	str	r3, [r5, #0]
 8008434:	f7fb fb38 	bl	8003aa8 <_sbrk>
 8008438:	1c43      	adds	r3, r0, #1
 800843a:	d103      	bne.n	8008444 <_sbrk_r+0x1c>
 800843c:	682b      	ldr	r3, [r5, #0]
 800843e:	2b00      	cmp	r3, #0
 8008440:	d000      	beq.n	8008444 <_sbrk_r+0x1c>
 8008442:	6023      	str	r3, [r4, #0]
 8008444:	bd70      	pop	{r4, r5, r6, pc}
 8008446:	46c0      	nop			; (mov r8, r8)
 8008448:	20002320 	.word	0x20002320

0800844c <__swbuf_r>:
 800844c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800844e:	0005      	movs	r5, r0
 8008450:	000e      	movs	r6, r1
 8008452:	0014      	movs	r4, r2
 8008454:	2800      	cmp	r0, #0
 8008456:	d004      	beq.n	8008462 <__swbuf_r+0x16>
 8008458:	6983      	ldr	r3, [r0, #24]
 800845a:	2b00      	cmp	r3, #0
 800845c:	d101      	bne.n	8008462 <__swbuf_r+0x16>
 800845e:	f000 f9f9 	bl	8008854 <__sinit>
 8008462:	4b22      	ldr	r3, [pc, #136]	; (80084ec <__swbuf_r+0xa0>)
 8008464:	429c      	cmp	r4, r3
 8008466:	d12e      	bne.n	80084c6 <__swbuf_r+0x7a>
 8008468:	686c      	ldr	r4, [r5, #4]
 800846a:	69a3      	ldr	r3, [r4, #24]
 800846c:	60a3      	str	r3, [r4, #8]
 800846e:	89a3      	ldrh	r3, [r4, #12]
 8008470:	071b      	lsls	r3, r3, #28
 8008472:	d532      	bpl.n	80084da <__swbuf_r+0x8e>
 8008474:	6923      	ldr	r3, [r4, #16]
 8008476:	2b00      	cmp	r3, #0
 8008478:	d02f      	beq.n	80084da <__swbuf_r+0x8e>
 800847a:	6823      	ldr	r3, [r4, #0]
 800847c:	6922      	ldr	r2, [r4, #16]
 800847e:	b2f7      	uxtb	r7, r6
 8008480:	1a98      	subs	r0, r3, r2
 8008482:	6963      	ldr	r3, [r4, #20]
 8008484:	b2f6      	uxtb	r6, r6
 8008486:	4283      	cmp	r3, r0
 8008488:	dc05      	bgt.n	8008496 <__swbuf_r+0x4a>
 800848a:	0021      	movs	r1, r4
 800848c:	0028      	movs	r0, r5
 800848e:	f000 f93f 	bl	8008710 <_fflush_r>
 8008492:	2800      	cmp	r0, #0
 8008494:	d127      	bne.n	80084e6 <__swbuf_r+0x9a>
 8008496:	68a3      	ldr	r3, [r4, #8]
 8008498:	3001      	adds	r0, #1
 800849a:	3b01      	subs	r3, #1
 800849c:	60a3      	str	r3, [r4, #8]
 800849e:	6823      	ldr	r3, [r4, #0]
 80084a0:	1c5a      	adds	r2, r3, #1
 80084a2:	6022      	str	r2, [r4, #0]
 80084a4:	701f      	strb	r7, [r3, #0]
 80084a6:	6963      	ldr	r3, [r4, #20]
 80084a8:	4283      	cmp	r3, r0
 80084aa:	d004      	beq.n	80084b6 <__swbuf_r+0x6a>
 80084ac:	89a3      	ldrh	r3, [r4, #12]
 80084ae:	07db      	lsls	r3, r3, #31
 80084b0:	d507      	bpl.n	80084c2 <__swbuf_r+0x76>
 80084b2:	2e0a      	cmp	r6, #10
 80084b4:	d105      	bne.n	80084c2 <__swbuf_r+0x76>
 80084b6:	0021      	movs	r1, r4
 80084b8:	0028      	movs	r0, r5
 80084ba:	f000 f929 	bl	8008710 <_fflush_r>
 80084be:	2800      	cmp	r0, #0
 80084c0:	d111      	bne.n	80084e6 <__swbuf_r+0x9a>
 80084c2:	0030      	movs	r0, r6
 80084c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80084c6:	4b0a      	ldr	r3, [pc, #40]	; (80084f0 <__swbuf_r+0xa4>)
 80084c8:	429c      	cmp	r4, r3
 80084ca:	d101      	bne.n	80084d0 <__swbuf_r+0x84>
 80084cc:	68ac      	ldr	r4, [r5, #8]
 80084ce:	e7cc      	b.n	800846a <__swbuf_r+0x1e>
 80084d0:	4b08      	ldr	r3, [pc, #32]	; (80084f4 <__swbuf_r+0xa8>)
 80084d2:	429c      	cmp	r4, r3
 80084d4:	d1c9      	bne.n	800846a <__swbuf_r+0x1e>
 80084d6:	68ec      	ldr	r4, [r5, #12]
 80084d8:	e7c7      	b.n	800846a <__swbuf_r+0x1e>
 80084da:	0021      	movs	r1, r4
 80084dc:	0028      	movs	r0, r5
 80084de:	f000 f80b 	bl	80084f8 <__swsetup_r>
 80084e2:	2800      	cmp	r0, #0
 80084e4:	d0c9      	beq.n	800847a <__swbuf_r+0x2e>
 80084e6:	2601      	movs	r6, #1
 80084e8:	4276      	negs	r6, r6
 80084ea:	e7ea      	b.n	80084c2 <__swbuf_r+0x76>
 80084ec:	080096c8 	.word	0x080096c8
 80084f0:	080096e8 	.word	0x080096e8
 80084f4:	080096a8 	.word	0x080096a8

080084f8 <__swsetup_r>:
 80084f8:	4b37      	ldr	r3, [pc, #220]	; (80085d8 <__swsetup_r+0xe0>)
 80084fa:	b570      	push	{r4, r5, r6, lr}
 80084fc:	681d      	ldr	r5, [r3, #0]
 80084fe:	0006      	movs	r6, r0
 8008500:	000c      	movs	r4, r1
 8008502:	2d00      	cmp	r5, #0
 8008504:	d005      	beq.n	8008512 <__swsetup_r+0x1a>
 8008506:	69ab      	ldr	r3, [r5, #24]
 8008508:	2b00      	cmp	r3, #0
 800850a:	d102      	bne.n	8008512 <__swsetup_r+0x1a>
 800850c:	0028      	movs	r0, r5
 800850e:	f000 f9a1 	bl	8008854 <__sinit>
 8008512:	4b32      	ldr	r3, [pc, #200]	; (80085dc <__swsetup_r+0xe4>)
 8008514:	429c      	cmp	r4, r3
 8008516:	d10f      	bne.n	8008538 <__swsetup_r+0x40>
 8008518:	686c      	ldr	r4, [r5, #4]
 800851a:	230c      	movs	r3, #12
 800851c:	5ee2      	ldrsh	r2, [r4, r3]
 800851e:	b293      	uxth	r3, r2
 8008520:	0711      	lsls	r1, r2, #28
 8008522:	d42d      	bmi.n	8008580 <__swsetup_r+0x88>
 8008524:	06d9      	lsls	r1, r3, #27
 8008526:	d411      	bmi.n	800854c <__swsetup_r+0x54>
 8008528:	2309      	movs	r3, #9
 800852a:	2001      	movs	r0, #1
 800852c:	6033      	str	r3, [r6, #0]
 800852e:	3337      	adds	r3, #55	; 0x37
 8008530:	4313      	orrs	r3, r2
 8008532:	81a3      	strh	r3, [r4, #12]
 8008534:	4240      	negs	r0, r0
 8008536:	bd70      	pop	{r4, r5, r6, pc}
 8008538:	4b29      	ldr	r3, [pc, #164]	; (80085e0 <__swsetup_r+0xe8>)
 800853a:	429c      	cmp	r4, r3
 800853c:	d101      	bne.n	8008542 <__swsetup_r+0x4a>
 800853e:	68ac      	ldr	r4, [r5, #8]
 8008540:	e7eb      	b.n	800851a <__swsetup_r+0x22>
 8008542:	4b28      	ldr	r3, [pc, #160]	; (80085e4 <__swsetup_r+0xec>)
 8008544:	429c      	cmp	r4, r3
 8008546:	d1e8      	bne.n	800851a <__swsetup_r+0x22>
 8008548:	68ec      	ldr	r4, [r5, #12]
 800854a:	e7e6      	b.n	800851a <__swsetup_r+0x22>
 800854c:	075b      	lsls	r3, r3, #29
 800854e:	d513      	bpl.n	8008578 <__swsetup_r+0x80>
 8008550:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008552:	2900      	cmp	r1, #0
 8008554:	d008      	beq.n	8008568 <__swsetup_r+0x70>
 8008556:	0023      	movs	r3, r4
 8008558:	3344      	adds	r3, #68	; 0x44
 800855a:	4299      	cmp	r1, r3
 800855c:	d002      	beq.n	8008564 <__swsetup_r+0x6c>
 800855e:	0030      	movs	r0, r6
 8008560:	f7ff fbbc 	bl	8007cdc <_free_r>
 8008564:	2300      	movs	r3, #0
 8008566:	6363      	str	r3, [r4, #52]	; 0x34
 8008568:	2224      	movs	r2, #36	; 0x24
 800856a:	89a3      	ldrh	r3, [r4, #12]
 800856c:	4393      	bics	r3, r2
 800856e:	81a3      	strh	r3, [r4, #12]
 8008570:	2300      	movs	r3, #0
 8008572:	6063      	str	r3, [r4, #4]
 8008574:	6923      	ldr	r3, [r4, #16]
 8008576:	6023      	str	r3, [r4, #0]
 8008578:	2308      	movs	r3, #8
 800857a:	89a2      	ldrh	r2, [r4, #12]
 800857c:	4313      	orrs	r3, r2
 800857e:	81a3      	strh	r3, [r4, #12]
 8008580:	6923      	ldr	r3, [r4, #16]
 8008582:	2b00      	cmp	r3, #0
 8008584:	d10b      	bne.n	800859e <__swsetup_r+0xa6>
 8008586:	21a0      	movs	r1, #160	; 0xa0
 8008588:	2280      	movs	r2, #128	; 0x80
 800858a:	89a3      	ldrh	r3, [r4, #12]
 800858c:	0089      	lsls	r1, r1, #2
 800858e:	0092      	lsls	r2, r2, #2
 8008590:	400b      	ands	r3, r1
 8008592:	4293      	cmp	r3, r2
 8008594:	d003      	beq.n	800859e <__swsetup_r+0xa6>
 8008596:	0021      	movs	r1, r4
 8008598:	0030      	movs	r0, r6
 800859a:	f000 fa27 	bl	80089ec <__smakebuf_r>
 800859e:	220c      	movs	r2, #12
 80085a0:	5ea3      	ldrsh	r3, [r4, r2]
 80085a2:	2001      	movs	r0, #1
 80085a4:	001a      	movs	r2, r3
 80085a6:	b299      	uxth	r1, r3
 80085a8:	4002      	ands	r2, r0
 80085aa:	4203      	tst	r3, r0
 80085ac:	d00f      	beq.n	80085ce <__swsetup_r+0xd6>
 80085ae:	2200      	movs	r2, #0
 80085b0:	60a2      	str	r2, [r4, #8]
 80085b2:	6962      	ldr	r2, [r4, #20]
 80085b4:	4252      	negs	r2, r2
 80085b6:	61a2      	str	r2, [r4, #24]
 80085b8:	2000      	movs	r0, #0
 80085ba:	6922      	ldr	r2, [r4, #16]
 80085bc:	4282      	cmp	r2, r0
 80085be:	d1ba      	bne.n	8008536 <__swsetup_r+0x3e>
 80085c0:	060a      	lsls	r2, r1, #24
 80085c2:	d5b8      	bpl.n	8008536 <__swsetup_r+0x3e>
 80085c4:	2240      	movs	r2, #64	; 0x40
 80085c6:	4313      	orrs	r3, r2
 80085c8:	81a3      	strh	r3, [r4, #12]
 80085ca:	3801      	subs	r0, #1
 80085cc:	e7b3      	b.n	8008536 <__swsetup_r+0x3e>
 80085ce:	0788      	lsls	r0, r1, #30
 80085d0:	d400      	bmi.n	80085d4 <__swsetup_r+0xdc>
 80085d2:	6962      	ldr	r2, [r4, #20]
 80085d4:	60a2      	str	r2, [r4, #8]
 80085d6:	e7ef      	b.n	80085b8 <__swsetup_r+0xc0>
 80085d8:	20002028 	.word	0x20002028
 80085dc:	080096c8 	.word	0x080096c8
 80085e0:	080096e8 	.word	0x080096e8
 80085e4:	080096a8 	.word	0x080096a8

080085e8 <abort>:
 80085e8:	2006      	movs	r0, #6
 80085ea:	b510      	push	{r4, lr}
 80085ec:	f000 fad2 	bl	8008b94 <raise>
 80085f0:	2001      	movs	r0, #1
 80085f2:	f7fb f9e8 	bl	80039c6 <_exit>
	...

080085f8 <__sflush_r>:
 80085f8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80085fa:	898b      	ldrh	r3, [r1, #12]
 80085fc:	0005      	movs	r5, r0
 80085fe:	000c      	movs	r4, r1
 8008600:	071a      	lsls	r2, r3, #28
 8008602:	d45f      	bmi.n	80086c4 <__sflush_r+0xcc>
 8008604:	684a      	ldr	r2, [r1, #4]
 8008606:	2a00      	cmp	r2, #0
 8008608:	dc04      	bgt.n	8008614 <__sflush_r+0x1c>
 800860a:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 800860c:	2a00      	cmp	r2, #0
 800860e:	dc01      	bgt.n	8008614 <__sflush_r+0x1c>
 8008610:	2000      	movs	r0, #0
 8008612:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8008614:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8008616:	2f00      	cmp	r7, #0
 8008618:	d0fa      	beq.n	8008610 <__sflush_r+0x18>
 800861a:	2200      	movs	r2, #0
 800861c:	2180      	movs	r1, #128	; 0x80
 800861e:	682e      	ldr	r6, [r5, #0]
 8008620:	602a      	str	r2, [r5, #0]
 8008622:	001a      	movs	r2, r3
 8008624:	0149      	lsls	r1, r1, #5
 8008626:	400a      	ands	r2, r1
 8008628:	420b      	tst	r3, r1
 800862a:	d034      	beq.n	8008696 <__sflush_r+0x9e>
 800862c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800862e:	89a3      	ldrh	r3, [r4, #12]
 8008630:	075b      	lsls	r3, r3, #29
 8008632:	d506      	bpl.n	8008642 <__sflush_r+0x4a>
 8008634:	6863      	ldr	r3, [r4, #4]
 8008636:	1ac0      	subs	r0, r0, r3
 8008638:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800863a:	2b00      	cmp	r3, #0
 800863c:	d001      	beq.n	8008642 <__sflush_r+0x4a>
 800863e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008640:	1ac0      	subs	r0, r0, r3
 8008642:	0002      	movs	r2, r0
 8008644:	6a21      	ldr	r1, [r4, #32]
 8008646:	2300      	movs	r3, #0
 8008648:	0028      	movs	r0, r5
 800864a:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 800864c:	47b8      	blx	r7
 800864e:	89a1      	ldrh	r1, [r4, #12]
 8008650:	1c43      	adds	r3, r0, #1
 8008652:	d106      	bne.n	8008662 <__sflush_r+0x6a>
 8008654:	682b      	ldr	r3, [r5, #0]
 8008656:	2b1d      	cmp	r3, #29
 8008658:	d831      	bhi.n	80086be <__sflush_r+0xc6>
 800865a:	4a2c      	ldr	r2, [pc, #176]	; (800870c <__sflush_r+0x114>)
 800865c:	40da      	lsrs	r2, r3
 800865e:	07d3      	lsls	r3, r2, #31
 8008660:	d52d      	bpl.n	80086be <__sflush_r+0xc6>
 8008662:	2300      	movs	r3, #0
 8008664:	6063      	str	r3, [r4, #4]
 8008666:	6923      	ldr	r3, [r4, #16]
 8008668:	6023      	str	r3, [r4, #0]
 800866a:	04cb      	lsls	r3, r1, #19
 800866c:	d505      	bpl.n	800867a <__sflush_r+0x82>
 800866e:	1c43      	adds	r3, r0, #1
 8008670:	d102      	bne.n	8008678 <__sflush_r+0x80>
 8008672:	682b      	ldr	r3, [r5, #0]
 8008674:	2b00      	cmp	r3, #0
 8008676:	d100      	bne.n	800867a <__sflush_r+0x82>
 8008678:	6560      	str	r0, [r4, #84]	; 0x54
 800867a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800867c:	602e      	str	r6, [r5, #0]
 800867e:	2900      	cmp	r1, #0
 8008680:	d0c6      	beq.n	8008610 <__sflush_r+0x18>
 8008682:	0023      	movs	r3, r4
 8008684:	3344      	adds	r3, #68	; 0x44
 8008686:	4299      	cmp	r1, r3
 8008688:	d002      	beq.n	8008690 <__sflush_r+0x98>
 800868a:	0028      	movs	r0, r5
 800868c:	f7ff fb26 	bl	8007cdc <_free_r>
 8008690:	2000      	movs	r0, #0
 8008692:	6360      	str	r0, [r4, #52]	; 0x34
 8008694:	e7bd      	b.n	8008612 <__sflush_r+0x1a>
 8008696:	2301      	movs	r3, #1
 8008698:	0028      	movs	r0, r5
 800869a:	6a21      	ldr	r1, [r4, #32]
 800869c:	47b8      	blx	r7
 800869e:	1c43      	adds	r3, r0, #1
 80086a0:	d1c5      	bne.n	800862e <__sflush_r+0x36>
 80086a2:	682b      	ldr	r3, [r5, #0]
 80086a4:	2b00      	cmp	r3, #0
 80086a6:	d0c2      	beq.n	800862e <__sflush_r+0x36>
 80086a8:	2b1d      	cmp	r3, #29
 80086aa:	d001      	beq.n	80086b0 <__sflush_r+0xb8>
 80086ac:	2b16      	cmp	r3, #22
 80086ae:	d101      	bne.n	80086b4 <__sflush_r+0xbc>
 80086b0:	602e      	str	r6, [r5, #0]
 80086b2:	e7ad      	b.n	8008610 <__sflush_r+0x18>
 80086b4:	2340      	movs	r3, #64	; 0x40
 80086b6:	89a2      	ldrh	r2, [r4, #12]
 80086b8:	4313      	orrs	r3, r2
 80086ba:	81a3      	strh	r3, [r4, #12]
 80086bc:	e7a9      	b.n	8008612 <__sflush_r+0x1a>
 80086be:	2340      	movs	r3, #64	; 0x40
 80086c0:	430b      	orrs	r3, r1
 80086c2:	e7fa      	b.n	80086ba <__sflush_r+0xc2>
 80086c4:	690f      	ldr	r7, [r1, #16]
 80086c6:	2f00      	cmp	r7, #0
 80086c8:	d0a2      	beq.n	8008610 <__sflush_r+0x18>
 80086ca:	680a      	ldr	r2, [r1, #0]
 80086cc:	600f      	str	r7, [r1, #0]
 80086ce:	1bd2      	subs	r2, r2, r7
 80086d0:	9201      	str	r2, [sp, #4]
 80086d2:	2200      	movs	r2, #0
 80086d4:	079b      	lsls	r3, r3, #30
 80086d6:	d100      	bne.n	80086da <__sflush_r+0xe2>
 80086d8:	694a      	ldr	r2, [r1, #20]
 80086da:	60a2      	str	r2, [r4, #8]
 80086dc:	9b01      	ldr	r3, [sp, #4]
 80086de:	2b00      	cmp	r3, #0
 80086e0:	dc00      	bgt.n	80086e4 <__sflush_r+0xec>
 80086e2:	e795      	b.n	8008610 <__sflush_r+0x18>
 80086e4:	003a      	movs	r2, r7
 80086e6:	0028      	movs	r0, r5
 80086e8:	9b01      	ldr	r3, [sp, #4]
 80086ea:	6a21      	ldr	r1, [r4, #32]
 80086ec:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80086ee:	47b0      	blx	r6
 80086f0:	2800      	cmp	r0, #0
 80086f2:	dc06      	bgt.n	8008702 <__sflush_r+0x10a>
 80086f4:	2340      	movs	r3, #64	; 0x40
 80086f6:	2001      	movs	r0, #1
 80086f8:	89a2      	ldrh	r2, [r4, #12]
 80086fa:	4240      	negs	r0, r0
 80086fc:	4313      	orrs	r3, r2
 80086fe:	81a3      	strh	r3, [r4, #12]
 8008700:	e787      	b.n	8008612 <__sflush_r+0x1a>
 8008702:	9b01      	ldr	r3, [sp, #4]
 8008704:	183f      	adds	r7, r7, r0
 8008706:	1a1b      	subs	r3, r3, r0
 8008708:	9301      	str	r3, [sp, #4]
 800870a:	e7e7      	b.n	80086dc <__sflush_r+0xe4>
 800870c:	20400001 	.word	0x20400001

08008710 <_fflush_r>:
 8008710:	690b      	ldr	r3, [r1, #16]
 8008712:	b570      	push	{r4, r5, r6, lr}
 8008714:	0005      	movs	r5, r0
 8008716:	000c      	movs	r4, r1
 8008718:	2b00      	cmp	r3, #0
 800871a:	d102      	bne.n	8008722 <_fflush_r+0x12>
 800871c:	2500      	movs	r5, #0
 800871e:	0028      	movs	r0, r5
 8008720:	bd70      	pop	{r4, r5, r6, pc}
 8008722:	2800      	cmp	r0, #0
 8008724:	d004      	beq.n	8008730 <_fflush_r+0x20>
 8008726:	6983      	ldr	r3, [r0, #24]
 8008728:	2b00      	cmp	r3, #0
 800872a:	d101      	bne.n	8008730 <_fflush_r+0x20>
 800872c:	f000 f892 	bl	8008854 <__sinit>
 8008730:	4b14      	ldr	r3, [pc, #80]	; (8008784 <_fflush_r+0x74>)
 8008732:	429c      	cmp	r4, r3
 8008734:	d11b      	bne.n	800876e <_fflush_r+0x5e>
 8008736:	686c      	ldr	r4, [r5, #4]
 8008738:	220c      	movs	r2, #12
 800873a:	5ea3      	ldrsh	r3, [r4, r2]
 800873c:	2b00      	cmp	r3, #0
 800873e:	d0ed      	beq.n	800871c <_fflush_r+0xc>
 8008740:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008742:	07d2      	lsls	r2, r2, #31
 8008744:	d404      	bmi.n	8008750 <_fflush_r+0x40>
 8008746:	059b      	lsls	r3, r3, #22
 8008748:	d402      	bmi.n	8008750 <_fflush_r+0x40>
 800874a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800874c:	f000 f923 	bl	8008996 <__retarget_lock_acquire_recursive>
 8008750:	0028      	movs	r0, r5
 8008752:	0021      	movs	r1, r4
 8008754:	f7ff ff50 	bl	80085f8 <__sflush_r>
 8008758:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800875a:	0005      	movs	r5, r0
 800875c:	07db      	lsls	r3, r3, #31
 800875e:	d4de      	bmi.n	800871e <_fflush_r+0xe>
 8008760:	89a3      	ldrh	r3, [r4, #12]
 8008762:	059b      	lsls	r3, r3, #22
 8008764:	d4db      	bmi.n	800871e <_fflush_r+0xe>
 8008766:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008768:	f000 f916 	bl	8008998 <__retarget_lock_release_recursive>
 800876c:	e7d7      	b.n	800871e <_fflush_r+0xe>
 800876e:	4b06      	ldr	r3, [pc, #24]	; (8008788 <_fflush_r+0x78>)
 8008770:	429c      	cmp	r4, r3
 8008772:	d101      	bne.n	8008778 <_fflush_r+0x68>
 8008774:	68ac      	ldr	r4, [r5, #8]
 8008776:	e7df      	b.n	8008738 <_fflush_r+0x28>
 8008778:	4b04      	ldr	r3, [pc, #16]	; (800878c <_fflush_r+0x7c>)
 800877a:	429c      	cmp	r4, r3
 800877c:	d1dc      	bne.n	8008738 <_fflush_r+0x28>
 800877e:	68ec      	ldr	r4, [r5, #12]
 8008780:	e7da      	b.n	8008738 <_fflush_r+0x28>
 8008782:	46c0      	nop			; (mov r8, r8)
 8008784:	080096c8 	.word	0x080096c8
 8008788:	080096e8 	.word	0x080096e8
 800878c:	080096a8 	.word	0x080096a8

08008790 <std>:
 8008790:	2300      	movs	r3, #0
 8008792:	b510      	push	{r4, lr}
 8008794:	0004      	movs	r4, r0
 8008796:	6003      	str	r3, [r0, #0]
 8008798:	6043      	str	r3, [r0, #4]
 800879a:	6083      	str	r3, [r0, #8]
 800879c:	8181      	strh	r1, [r0, #12]
 800879e:	6643      	str	r3, [r0, #100]	; 0x64
 80087a0:	0019      	movs	r1, r3
 80087a2:	81c2      	strh	r2, [r0, #14]
 80087a4:	6103      	str	r3, [r0, #16]
 80087a6:	6143      	str	r3, [r0, #20]
 80087a8:	6183      	str	r3, [r0, #24]
 80087aa:	2208      	movs	r2, #8
 80087ac:	305c      	adds	r0, #92	; 0x5c
 80087ae:	f7fd fb41 	bl	8005e34 <memset>
 80087b2:	4b05      	ldr	r3, [pc, #20]	; (80087c8 <std+0x38>)
 80087b4:	6224      	str	r4, [r4, #32]
 80087b6:	6263      	str	r3, [r4, #36]	; 0x24
 80087b8:	4b04      	ldr	r3, [pc, #16]	; (80087cc <std+0x3c>)
 80087ba:	62a3      	str	r3, [r4, #40]	; 0x28
 80087bc:	4b04      	ldr	r3, [pc, #16]	; (80087d0 <std+0x40>)
 80087be:	62e3      	str	r3, [r4, #44]	; 0x2c
 80087c0:	4b04      	ldr	r3, [pc, #16]	; (80087d4 <std+0x44>)
 80087c2:	6323      	str	r3, [r4, #48]	; 0x30
 80087c4:	bd10      	pop	{r4, pc}
 80087c6:	46c0      	nop			; (mov r8, r8)
 80087c8:	08008bd5 	.word	0x08008bd5
 80087cc:	08008bfd 	.word	0x08008bfd
 80087d0:	08008c35 	.word	0x08008c35
 80087d4:	08008c61 	.word	0x08008c61

080087d8 <_cleanup_r>:
 80087d8:	b510      	push	{r4, lr}
 80087da:	4902      	ldr	r1, [pc, #8]	; (80087e4 <_cleanup_r+0xc>)
 80087dc:	f000 f8ba 	bl	8008954 <_fwalk_reent>
 80087e0:	bd10      	pop	{r4, pc}
 80087e2:	46c0      	nop			; (mov r8, r8)
 80087e4:	08008711 	.word	0x08008711

080087e8 <__sfmoreglue>:
 80087e8:	b570      	push	{r4, r5, r6, lr}
 80087ea:	2568      	movs	r5, #104	; 0x68
 80087ec:	1e4a      	subs	r2, r1, #1
 80087ee:	4355      	muls	r5, r2
 80087f0:	000e      	movs	r6, r1
 80087f2:	0029      	movs	r1, r5
 80087f4:	3174      	adds	r1, #116	; 0x74
 80087f6:	f7ff fadd 	bl	8007db4 <_malloc_r>
 80087fa:	1e04      	subs	r4, r0, #0
 80087fc:	d008      	beq.n	8008810 <__sfmoreglue+0x28>
 80087fe:	2100      	movs	r1, #0
 8008800:	002a      	movs	r2, r5
 8008802:	6001      	str	r1, [r0, #0]
 8008804:	6046      	str	r6, [r0, #4]
 8008806:	300c      	adds	r0, #12
 8008808:	60a0      	str	r0, [r4, #8]
 800880a:	3268      	adds	r2, #104	; 0x68
 800880c:	f7fd fb12 	bl	8005e34 <memset>
 8008810:	0020      	movs	r0, r4
 8008812:	bd70      	pop	{r4, r5, r6, pc}

08008814 <__sfp_lock_acquire>:
 8008814:	b510      	push	{r4, lr}
 8008816:	4802      	ldr	r0, [pc, #8]	; (8008820 <__sfp_lock_acquire+0xc>)
 8008818:	f000 f8bd 	bl	8008996 <__retarget_lock_acquire_recursive>
 800881c:	bd10      	pop	{r4, pc}
 800881e:	46c0      	nop			; (mov r8, r8)
 8008820:	2000231d 	.word	0x2000231d

08008824 <__sfp_lock_release>:
 8008824:	b510      	push	{r4, lr}
 8008826:	4802      	ldr	r0, [pc, #8]	; (8008830 <__sfp_lock_release+0xc>)
 8008828:	f000 f8b6 	bl	8008998 <__retarget_lock_release_recursive>
 800882c:	bd10      	pop	{r4, pc}
 800882e:	46c0      	nop			; (mov r8, r8)
 8008830:	2000231d 	.word	0x2000231d

08008834 <__sinit_lock_acquire>:
 8008834:	b510      	push	{r4, lr}
 8008836:	4802      	ldr	r0, [pc, #8]	; (8008840 <__sinit_lock_acquire+0xc>)
 8008838:	f000 f8ad 	bl	8008996 <__retarget_lock_acquire_recursive>
 800883c:	bd10      	pop	{r4, pc}
 800883e:	46c0      	nop			; (mov r8, r8)
 8008840:	2000231e 	.word	0x2000231e

08008844 <__sinit_lock_release>:
 8008844:	b510      	push	{r4, lr}
 8008846:	4802      	ldr	r0, [pc, #8]	; (8008850 <__sinit_lock_release+0xc>)
 8008848:	f000 f8a6 	bl	8008998 <__retarget_lock_release_recursive>
 800884c:	bd10      	pop	{r4, pc}
 800884e:	46c0      	nop			; (mov r8, r8)
 8008850:	2000231e 	.word	0x2000231e

08008854 <__sinit>:
 8008854:	b513      	push	{r0, r1, r4, lr}
 8008856:	0004      	movs	r4, r0
 8008858:	f7ff ffec 	bl	8008834 <__sinit_lock_acquire>
 800885c:	69a3      	ldr	r3, [r4, #24]
 800885e:	2b00      	cmp	r3, #0
 8008860:	d002      	beq.n	8008868 <__sinit+0x14>
 8008862:	f7ff ffef 	bl	8008844 <__sinit_lock_release>
 8008866:	bd13      	pop	{r0, r1, r4, pc}
 8008868:	64a3      	str	r3, [r4, #72]	; 0x48
 800886a:	64e3      	str	r3, [r4, #76]	; 0x4c
 800886c:	6523      	str	r3, [r4, #80]	; 0x50
 800886e:	4b13      	ldr	r3, [pc, #76]	; (80088bc <__sinit+0x68>)
 8008870:	4a13      	ldr	r2, [pc, #76]	; (80088c0 <__sinit+0x6c>)
 8008872:	681b      	ldr	r3, [r3, #0]
 8008874:	62a2      	str	r2, [r4, #40]	; 0x28
 8008876:	9301      	str	r3, [sp, #4]
 8008878:	42a3      	cmp	r3, r4
 800887a:	d101      	bne.n	8008880 <__sinit+0x2c>
 800887c:	2301      	movs	r3, #1
 800887e:	61a3      	str	r3, [r4, #24]
 8008880:	0020      	movs	r0, r4
 8008882:	f000 f81f 	bl	80088c4 <__sfp>
 8008886:	6060      	str	r0, [r4, #4]
 8008888:	0020      	movs	r0, r4
 800888a:	f000 f81b 	bl	80088c4 <__sfp>
 800888e:	60a0      	str	r0, [r4, #8]
 8008890:	0020      	movs	r0, r4
 8008892:	f000 f817 	bl	80088c4 <__sfp>
 8008896:	2200      	movs	r2, #0
 8008898:	2104      	movs	r1, #4
 800889a:	60e0      	str	r0, [r4, #12]
 800889c:	6860      	ldr	r0, [r4, #4]
 800889e:	f7ff ff77 	bl	8008790 <std>
 80088a2:	2201      	movs	r2, #1
 80088a4:	2109      	movs	r1, #9
 80088a6:	68a0      	ldr	r0, [r4, #8]
 80088a8:	f7ff ff72 	bl	8008790 <std>
 80088ac:	2202      	movs	r2, #2
 80088ae:	2112      	movs	r1, #18
 80088b0:	68e0      	ldr	r0, [r4, #12]
 80088b2:	f7ff ff6d 	bl	8008790 <std>
 80088b6:	2301      	movs	r3, #1
 80088b8:	61a3      	str	r3, [r4, #24]
 80088ba:	e7d2      	b.n	8008862 <__sinit+0xe>
 80088bc:	08009434 	.word	0x08009434
 80088c0:	080087d9 	.word	0x080087d9

080088c4 <__sfp>:
 80088c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80088c6:	0007      	movs	r7, r0
 80088c8:	f7ff ffa4 	bl	8008814 <__sfp_lock_acquire>
 80088cc:	4b1f      	ldr	r3, [pc, #124]	; (800894c <__sfp+0x88>)
 80088ce:	681e      	ldr	r6, [r3, #0]
 80088d0:	69b3      	ldr	r3, [r6, #24]
 80088d2:	2b00      	cmp	r3, #0
 80088d4:	d102      	bne.n	80088dc <__sfp+0x18>
 80088d6:	0030      	movs	r0, r6
 80088d8:	f7ff ffbc 	bl	8008854 <__sinit>
 80088dc:	3648      	adds	r6, #72	; 0x48
 80088de:	68b4      	ldr	r4, [r6, #8]
 80088e0:	6873      	ldr	r3, [r6, #4]
 80088e2:	3b01      	subs	r3, #1
 80088e4:	d504      	bpl.n	80088f0 <__sfp+0x2c>
 80088e6:	6833      	ldr	r3, [r6, #0]
 80088e8:	2b00      	cmp	r3, #0
 80088ea:	d022      	beq.n	8008932 <__sfp+0x6e>
 80088ec:	6836      	ldr	r6, [r6, #0]
 80088ee:	e7f6      	b.n	80088de <__sfp+0x1a>
 80088f0:	220c      	movs	r2, #12
 80088f2:	5ea5      	ldrsh	r5, [r4, r2]
 80088f4:	2d00      	cmp	r5, #0
 80088f6:	d11a      	bne.n	800892e <__sfp+0x6a>
 80088f8:	0020      	movs	r0, r4
 80088fa:	4b15      	ldr	r3, [pc, #84]	; (8008950 <__sfp+0x8c>)
 80088fc:	3058      	adds	r0, #88	; 0x58
 80088fe:	60e3      	str	r3, [r4, #12]
 8008900:	6665      	str	r5, [r4, #100]	; 0x64
 8008902:	f000 f847 	bl	8008994 <__retarget_lock_init_recursive>
 8008906:	f7ff ff8d 	bl	8008824 <__sfp_lock_release>
 800890a:	0020      	movs	r0, r4
 800890c:	2208      	movs	r2, #8
 800890e:	0029      	movs	r1, r5
 8008910:	6025      	str	r5, [r4, #0]
 8008912:	60a5      	str	r5, [r4, #8]
 8008914:	6065      	str	r5, [r4, #4]
 8008916:	6125      	str	r5, [r4, #16]
 8008918:	6165      	str	r5, [r4, #20]
 800891a:	61a5      	str	r5, [r4, #24]
 800891c:	305c      	adds	r0, #92	; 0x5c
 800891e:	f7fd fa89 	bl	8005e34 <memset>
 8008922:	6365      	str	r5, [r4, #52]	; 0x34
 8008924:	63a5      	str	r5, [r4, #56]	; 0x38
 8008926:	64a5      	str	r5, [r4, #72]	; 0x48
 8008928:	64e5      	str	r5, [r4, #76]	; 0x4c
 800892a:	0020      	movs	r0, r4
 800892c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800892e:	3468      	adds	r4, #104	; 0x68
 8008930:	e7d7      	b.n	80088e2 <__sfp+0x1e>
 8008932:	2104      	movs	r1, #4
 8008934:	0038      	movs	r0, r7
 8008936:	f7ff ff57 	bl	80087e8 <__sfmoreglue>
 800893a:	1e04      	subs	r4, r0, #0
 800893c:	6030      	str	r0, [r6, #0]
 800893e:	d1d5      	bne.n	80088ec <__sfp+0x28>
 8008940:	f7ff ff70 	bl	8008824 <__sfp_lock_release>
 8008944:	230c      	movs	r3, #12
 8008946:	603b      	str	r3, [r7, #0]
 8008948:	e7ef      	b.n	800892a <__sfp+0x66>
 800894a:	46c0      	nop			; (mov r8, r8)
 800894c:	08009434 	.word	0x08009434
 8008950:	ffff0001 	.word	0xffff0001

08008954 <_fwalk_reent>:
 8008954:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008956:	0004      	movs	r4, r0
 8008958:	0006      	movs	r6, r0
 800895a:	2700      	movs	r7, #0
 800895c:	9101      	str	r1, [sp, #4]
 800895e:	3448      	adds	r4, #72	; 0x48
 8008960:	6863      	ldr	r3, [r4, #4]
 8008962:	68a5      	ldr	r5, [r4, #8]
 8008964:	9300      	str	r3, [sp, #0]
 8008966:	9b00      	ldr	r3, [sp, #0]
 8008968:	3b01      	subs	r3, #1
 800896a:	9300      	str	r3, [sp, #0]
 800896c:	d504      	bpl.n	8008978 <_fwalk_reent+0x24>
 800896e:	6824      	ldr	r4, [r4, #0]
 8008970:	2c00      	cmp	r4, #0
 8008972:	d1f5      	bne.n	8008960 <_fwalk_reent+0xc>
 8008974:	0038      	movs	r0, r7
 8008976:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8008978:	89ab      	ldrh	r3, [r5, #12]
 800897a:	2b01      	cmp	r3, #1
 800897c:	d908      	bls.n	8008990 <_fwalk_reent+0x3c>
 800897e:	220e      	movs	r2, #14
 8008980:	5eab      	ldrsh	r3, [r5, r2]
 8008982:	3301      	adds	r3, #1
 8008984:	d004      	beq.n	8008990 <_fwalk_reent+0x3c>
 8008986:	0029      	movs	r1, r5
 8008988:	0030      	movs	r0, r6
 800898a:	9b01      	ldr	r3, [sp, #4]
 800898c:	4798      	blx	r3
 800898e:	4307      	orrs	r7, r0
 8008990:	3568      	adds	r5, #104	; 0x68
 8008992:	e7e8      	b.n	8008966 <_fwalk_reent+0x12>

08008994 <__retarget_lock_init_recursive>:
 8008994:	4770      	bx	lr

08008996 <__retarget_lock_acquire_recursive>:
 8008996:	4770      	bx	lr

08008998 <__retarget_lock_release_recursive>:
 8008998:	4770      	bx	lr
	...

0800899c <__swhatbuf_r>:
 800899c:	b570      	push	{r4, r5, r6, lr}
 800899e:	000e      	movs	r6, r1
 80089a0:	001d      	movs	r5, r3
 80089a2:	230e      	movs	r3, #14
 80089a4:	5ec9      	ldrsh	r1, [r1, r3]
 80089a6:	0014      	movs	r4, r2
 80089a8:	b096      	sub	sp, #88	; 0x58
 80089aa:	2900      	cmp	r1, #0
 80089ac:	da08      	bge.n	80089c0 <__swhatbuf_r+0x24>
 80089ae:	220c      	movs	r2, #12
 80089b0:	5eb3      	ldrsh	r3, [r6, r2]
 80089b2:	2200      	movs	r2, #0
 80089b4:	602a      	str	r2, [r5, #0]
 80089b6:	061b      	lsls	r3, r3, #24
 80089b8:	d411      	bmi.n	80089de <__swhatbuf_r+0x42>
 80089ba:	2380      	movs	r3, #128	; 0x80
 80089bc:	00db      	lsls	r3, r3, #3
 80089be:	e00f      	b.n	80089e0 <__swhatbuf_r+0x44>
 80089c0:	466a      	mov	r2, sp
 80089c2:	f000 f987 	bl	8008cd4 <_fstat_r>
 80089c6:	2800      	cmp	r0, #0
 80089c8:	dbf1      	blt.n	80089ae <__swhatbuf_r+0x12>
 80089ca:	23f0      	movs	r3, #240	; 0xf0
 80089cc:	9901      	ldr	r1, [sp, #4]
 80089ce:	021b      	lsls	r3, r3, #8
 80089d0:	4019      	ands	r1, r3
 80089d2:	4b05      	ldr	r3, [pc, #20]	; (80089e8 <__swhatbuf_r+0x4c>)
 80089d4:	18c9      	adds	r1, r1, r3
 80089d6:	424b      	negs	r3, r1
 80089d8:	4159      	adcs	r1, r3
 80089da:	6029      	str	r1, [r5, #0]
 80089dc:	e7ed      	b.n	80089ba <__swhatbuf_r+0x1e>
 80089de:	2340      	movs	r3, #64	; 0x40
 80089e0:	2000      	movs	r0, #0
 80089e2:	6023      	str	r3, [r4, #0]
 80089e4:	b016      	add	sp, #88	; 0x58
 80089e6:	bd70      	pop	{r4, r5, r6, pc}
 80089e8:	ffffe000 	.word	0xffffe000

080089ec <__smakebuf_r>:
 80089ec:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80089ee:	2602      	movs	r6, #2
 80089f0:	898b      	ldrh	r3, [r1, #12]
 80089f2:	0005      	movs	r5, r0
 80089f4:	000c      	movs	r4, r1
 80089f6:	4233      	tst	r3, r6
 80089f8:	d006      	beq.n	8008a08 <__smakebuf_r+0x1c>
 80089fa:	0023      	movs	r3, r4
 80089fc:	3347      	adds	r3, #71	; 0x47
 80089fe:	6023      	str	r3, [r4, #0]
 8008a00:	6123      	str	r3, [r4, #16]
 8008a02:	2301      	movs	r3, #1
 8008a04:	6163      	str	r3, [r4, #20]
 8008a06:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 8008a08:	466a      	mov	r2, sp
 8008a0a:	ab01      	add	r3, sp, #4
 8008a0c:	f7ff ffc6 	bl	800899c <__swhatbuf_r>
 8008a10:	9900      	ldr	r1, [sp, #0]
 8008a12:	0007      	movs	r7, r0
 8008a14:	0028      	movs	r0, r5
 8008a16:	f7ff f9cd 	bl	8007db4 <_malloc_r>
 8008a1a:	2800      	cmp	r0, #0
 8008a1c:	d108      	bne.n	8008a30 <__smakebuf_r+0x44>
 8008a1e:	220c      	movs	r2, #12
 8008a20:	5ea3      	ldrsh	r3, [r4, r2]
 8008a22:	059a      	lsls	r2, r3, #22
 8008a24:	d4ef      	bmi.n	8008a06 <__smakebuf_r+0x1a>
 8008a26:	2203      	movs	r2, #3
 8008a28:	4393      	bics	r3, r2
 8008a2a:	431e      	orrs	r6, r3
 8008a2c:	81a6      	strh	r6, [r4, #12]
 8008a2e:	e7e4      	b.n	80089fa <__smakebuf_r+0xe>
 8008a30:	4b0f      	ldr	r3, [pc, #60]	; (8008a70 <__smakebuf_r+0x84>)
 8008a32:	62ab      	str	r3, [r5, #40]	; 0x28
 8008a34:	2380      	movs	r3, #128	; 0x80
 8008a36:	89a2      	ldrh	r2, [r4, #12]
 8008a38:	6020      	str	r0, [r4, #0]
 8008a3a:	4313      	orrs	r3, r2
 8008a3c:	81a3      	strh	r3, [r4, #12]
 8008a3e:	9b00      	ldr	r3, [sp, #0]
 8008a40:	6120      	str	r0, [r4, #16]
 8008a42:	6163      	str	r3, [r4, #20]
 8008a44:	9b01      	ldr	r3, [sp, #4]
 8008a46:	2b00      	cmp	r3, #0
 8008a48:	d00d      	beq.n	8008a66 <__smakebuf_r+0x7a>
 8008a4a:	0028      	movs	r0, r5
 8008a4c:	230e      	movs	r3, #14
 8008a4e:	5ee1      	ldrsh	r1, [r4, r3]
 8008a50:	f000 f952 	bl	8008cf8 <_isatty_r>
 8008a54:	2800      	cmp	r0, #0
 8008a56:	d006      	beq.n	8008a66 <__smakebuf_r+0x7a>
 8008a58:	2203      	movs	r2, #3
 8008a5a:	89a3      	ldrh	r3, [r4, #12]
 8008a5c:	4393      	bics	r3, r2
 8008a5e:	001a      	movs	r2, r3
 8008a60:	2301      	movs	r3, #1
 8008a62:	4313      	orrs	r3, r2
 8008a64:	81a3      	strh	r3, [r4, #12]
 8008a66:	89a0      	ldrh	r0, [r4, #12]
 8008a68:	4307      	orrs	r7, r0
 8008a6a:	81a7      	strh	r7, [r4, #12]
 8008a6c:	e7cb      	b.n	8008a06 <__smakebuf_r+0x1a>
 8008a6e:	46c0      	nop			; (mov r8, r8)
 8008a70:	080087d9 	.word	0x080087d9

08008a74 <__ascii_mbtowc>:
 8008a74:	b082      	sub	sp, #8
 8008a76:	2900      	cmp	r1, #0
 8008a78:	d100      	bne.n	8008a7c <__ascii_mbtowc+0x8>
 8008a7a:	a901      	add	r1, sp, #4
 8008a7c:	1e10      	subs	r0, r2, #0
 8008a7e:	d006      	beq.n	8008a8e <__ascii_mbtowc+0x1a>
 8008a80:	2b00      	cmp	r3, #0
 8008a82:	d006      	beq.n	8008a92 <__ascii_mbtowc+0x1e>
 8008a84:	7813      	ldrb	r3, [r2, #0]
 8008a86:	600b      	str	r3, [r1, #0]
 8008a88:	7810      	ldrb	r0, [r2, #0]
 8008a8a:	1e43      	subs	r3, r0, #1
 8008a8c:	4198      	sbcs	r0, r3
 8008a8e:	b002      	add	sp, #8
 8008a90:	4770      	bx	lr
 8008a92:	2002      	movs	r0, #2
 8008a94:	4240      	negs	r0, r0
 8008a96:	e7fa      	b.n	8008a8e <__ascii_mbtowc+0x1a>

08008a98 <memmove>:
 8008a98:	b510      	push	{r4, lr}
 8008a9a:	4288      	cmp	r0, r1
 8008a9c:	d902      	bls.n	8008aa4 <memmove+0xc>
 8008a9e:	188b      	adds	r3, r1, r2
 8008aa0:	4298      	cmp	r0, r3
 8008aa2:	d303      	bcc.n	8008aac <memmove+0x14>
 8008aa4:	2300      	movs	r3, #0
 8008aa6:	e007      	b.n	8008ab8 <memmove+0x20>
 8008aa8:	5c8b      	ldrb	r3, [r1, r2]
 8008aaa:	5483      	strb	r3, [r0, r2]
 8008aac:	3a01      	subs	r2, #1
 8008aae:	d2fb      	bcs.n	8008aa8 <memmove+0x10>
 8008ab0:	bd10      	pop	{r4, pc}
 8008ab2:	5ccc      	ldrb	r4, [r1, r3]
 8008ab4:	54c4      	strb	r4, [r0, r3]
 8008ab6:	3301      	adds	r3, #1
 8008ab8:	429a      	cmp	r2, r3
 8008aba:	d1fa      	bne.n	8008ab2 <memmove+0x1a>
 8008abc:	e7f8      	b.n	8008ab0 <memmove+0x18>
	...

08008ac0 <__malloc_lock>:
 8008ac0:	b510      	push	{r4, lr}
 8008ac2:	4802      	ldr	r0, [pc, #8]	; (8008acc <__malloc_lock+0xc>)
 8008ac4:	f7ff ff67 	bl	8008996 <__retarget_lock_acquire_recursive>
 8008ac8:	bd10      	pop	{r4, pc}
 8008aca:	46c0      	nop			; (mov r8, r8)
 8008acc:	2000231c 	.word	0x2000231c

08008ad0 <__malloc_unlock>:
 8008ad0:	b510      	push	{r4, lr}
 8008ad2:	4802      	ldr	r0, [pc, #8]	; (8008adc <__malloc_unlock+0xc>)
 8008ad4:	f7ff ff60 	bl	8008998 <__retarget_lock_release_recursive>
 8008ad8:	bd10      	pop	{r4, pc}
 8008ada:	46c0      	nop			; (mov r8, r8)
 8008adc:	2000231c 	.word	0x2000231c

08008ae0 <_realloc_r>:
 8008ae0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008ae2:	0007      	movs	r7, r0
 8008ae4:	000e      	movs	r6, r1
 8008ae6:	0014      	movs	r4, r2
 8008ae8:	2900      	cmp	r1, #0
 8008aea:	d105      	bne.n	8008af8 <_realloc_r+0x18>
 8008aec:	0011      	movs	r1, r2
 8008aee:	f7ff f961 	bl	8007db4 <_malloc_r>
 8008af2:	0005      	movs	r5, r0
 8008af4:	0028      	movs	r0, r5
 8008af6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8008af8:	2a00      	cmp	r2, #0
 8008afa:	d103      	bne.n	8008b04 <_realloc_r+0x24>
 8008afc:	f7ff f8ee 	bl	8007cdc <_free_r>
 8008b00:	0025      	movs	r5, r4
 8008b02:	e7f7      	b.n	8008af4 <_realloc_r+0x14>
 8008b04:	f000 f91e 	bl	8008d44 <_malloc_usable_size_r>
 8008b08:	9001      	str	r0, [sp, #4]
 8008b0a:	4284      	cmp	r4, r0
 8008b0c:	d803      	bhi.n	8008b16 <_realloc_r+0x36>
 8008b0e:	0035      	movs	r5, r6
 8008b10:	0843      	lsrs	r3, r0, #1
 8008b12:	42a3      	cmp	r3, r4
 8008b14:	d3ee      	bcc.n	8008af4 <_realloc_r+0x14>
 8008b16:	0021      	movs	r1, r4
 8008b18:	0038      	movs	r0, r7
 8008b1a:	f7ff f94b 	bl	8007db4 <_malloc_r>
 8008b1e:	1e05      	subs	r5, r0, #0
 8008b20:	d0e8      	beq.n	8008af4 <_realloc_r+0x14>
 8008b22:	9b01      	ldr	r3, [sp, #4]
 8008b24:	0022      	movs	r2, r4
 8008b26:	429c      	cmp	r4, r3
 8008b28:	d900      	bls.n	8008b2c <_realloc_r+0x4c>
 8008b2a:	001a      	movs	r2, r3
 8008b2c:	0031      	movs	r1, r6
 8008b2e:	0028      	movs	r0, r5
 8008b30:	f7fe fd03 	bl	800753a <memcpy>
 8008b34:	0031      	movs	r1, r6
 8008b36:	0038      	movs	r0, r7
 8008b38:	f7ff f8d0 	bl	8007cdc <_free_r>
 8008b3c:	e7da      	b.n	8008af4 <_realloc_r+0x14>

08008b3e <_raise_r>:
 8008b3e:	b570      	push	{r4, r5, r6, lr}
 8008b40:	0004      	movs	r4, r0
 8008b42:	000d      	movs	r5, r1
 8008b44:	291f      	cmp	r1, #31
 8008b46:	d904      	bls.n	8008b52 <_raise_r+0x14>
 8008b48:	2316      	movs	r3, #22
 8008b4a:	6003      	str	r3, [r0, #0]
 8008b4c:	2001      	movs	r0, #1
 8008b4e:	4240      	negs	r0, r0
 8008b50:	bd70      	pop	{r4, r5, r6, pc}
 8008b52:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8008b54:	2b00      	cmp	r3, #0
 8008b56:	d004      	beq.n	8008b62 <_raise_r+0x24>
 8008b58:	008a      	lsls	r2, r1, #2
 8008b5a:	189b      	adds	r3, r3, r2
 8008b5c:	681a      	ldr	r2, [r3, #0]
 8008b5e:	2a00      	cmp	r2, #0
 8008b60:	d108      	bne.n	8008b74 <_raise_r+0x36>
 8008b62:	0020      	movs	r0, r4
 8008b64:	f000 f832 	bl	8008bcc <_getpid_r>
 8008b68:	002a      	movs	r2, r5
 8008b6a:	0001      	movs	r1, r0
 8008b6c:	0020      	movs	r0, r4
 8008b6e:	f000 f81b 	bl	8008ba8 <_kill_r>
 8008b72:	e7ed      	b.n	8008b50 <_raise_r+0x12>
 8008b74:	2000      	movs	r0, #0
 8008b76:	2a01      	cmp	r2, #1
 8008b78:	d0ea      	beq.n	8008b50 <_raise_r+0x12>
 8008b7a:	1c51      	adds	r1, r2, #1
 8008b7c:	d103      	bne.n	8008b86 <_raise_r+0x48>
 8008b7e:	2316      	movs	r3, #22
 8008b80:	3001      	adds	r0, #1
 8008b82:	6023      	str	r3, [r4, #0]
 8008b84:	e7e4      	b.n	8008b50 <_raise_r+0x12>
 8008b86:	2400      	movs	r4, #0
 8008b88:	0028      	movs	r0, r5
 8008b8a:	601c      	str	r4, [r3, #0]
 8008b8c:	4790      	blx	r2
 8008b8e:	0020      	movs	r0, r4
 8008b90:	e7de      	b.n	8008b50 <_raise_r+0x12>
	...

08008b94 <raise>:
 8008b94:	b510      	push	{r4, lr}
 8008b96:	4b03      	ldr	r3, [pc, #12]	; (8008ba4 <raise+0x10>)
 8008b98:	0001      	movs	r1, r0
 8008b9a:	6818      	ldr	r0, [r3, #0]
 8008b9c:	f7ff ffcf 	bl	8008b3e <_raise_r>
 8008ba0:	bd10      	pop	{r4, pc}
 8008ba2:	46c0      	nop			; (mov r8, r8)
 8008ba4:	20002028 	.word	0x20002028

08008ba8 <_kill_r>:
 8008ba8:	2300      	movs	r3, #0
 8008baa:	b570      	push	{r4, r5, r6, lr}
 8008bac:	4d06      	ldr	r5, [pc, #24]	; (8008bc8 <_kill_r+0x20>)
 8008bae:	0004      	movs	r4, r0
 8008bb0:	0008      	movs	r0, r1
 8008bb2:	0011      	movs	r1, r2
 8008bb4:	602b      	str	r3, [r5, #0]
 8008bb6:	f7fa fef6 	bl	80039a6 <_kill>
 8008bba:	1c43      	adds	r3, r0, #1
 8008bbc:	d103      	bne.n	8008bc6 <_kill_r+0x1e>
 8008bbe:	682b      	ldr	r3, [r5, #0]
 8008bc0:	2b00      	cmp	r3, #0
 8008bc2:	d000      	beq.n	8008bc6 <_kill_r+0x1e>
 8008bc4:	6023      	str	r3, [r4, #0]
 8008bc6:	bd70      	pop	{r4, r5, r6, pc}
 8008bc8:	20002320 	.word	0x20002320

08008bcc <_getpid_r>:
 8008bcc:	b510      	push	{r4, lr}
 8008bce:	f7fa fee4 	bl	800399a <_getpid>
 8008bd2:	bd10      	pop	{r4, pc}

08008bd4 <__sread>:
 8008bd4:	b570      	push	{r4, r5, r6, lr}
 8008bd6:	000c      	movs	r4, r1
 8008bd8:	250e      	movs	r5, #14
 8008bda:	5f49      	ldrsh	r1, [r1, r5]
 8008bdc:	f000 f8ba 	bl	8008d54 <_read_r>
 8008be0:	2800      	cmp	r0, #0
 8008be2:	db03      	blt.n	8008bec <__sread+0x18>
 8008be4:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8008be6:	181b      	adds	r3, r3, r0
 8008be8:	6563      	str	r3, [r4, #84]	; 0x54
 8008bea:	bd70      	pop	{r4, r5, r6, pc}
 8008bec:	89a3      	ldrh	r3, [r4, #12]
 8008bee:	4a02      	ldr	r2, [pc, #8]	; (8008bf8 <__sread+0x24>)
 8008bf0:	4013      	ands	r3, r2
 8008bf2:	81a3      	strh	r3, [r4, #12]
 8008bf4:	e7f9      	b.n	8008bea <__sread+0x16>
 8008bf6:	46c0      	nop			; (mov r8, r8)
 8008bf8:	ffffefff 	.word	0xffffefff

08008bfc <__swrite>:
 8008bfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008bfe:	001f      	movs	r7, r3
 8008c00:	898b      	ldrh	r3, [r1, #12]
 8008c02:	0005      	movs	r5, r0
 8008c04:	000c      	movs	r4, r1
 8008c06:	0016      	movs	r6, r2
 8008c08:	05db      	lsls	r3, r3, #23
 8008c0a:	d505      	bpl.n	8008c18 <__swrite+0x1c>
 8008c0c:	230e      	movs	r3, #14
 8008c0e:	5ec9      	ldrsh	r1, [r1, r3]
 8008c10:	2200      	movs	r2, #0
 8008c12:	2302      	movs	r3, #2
 8008c14:	f000 f882 	bl	8008d1c <_lseek_r>
 8008c18:	89a3      	ldrh	r3, [r4, #12]
 8008c1a:	4a05      	ldr	r2, [pc, #20]	; (8008c30 <__swrite+0x34>)
 8008c1c:	0028      	movs	r0, r5
 8008c1e:	4013      	ands	r3, r2
 8008c20:	81a3      	strh	r3, [r4, #12]
 8008c22:	0032      	movs	r2, r6
 8008c24:	230e      	movs	r3, #14
 8008c26:	5ee1      	ldrsh	r1, [r4, r3]
 8008c28:	003b      	movs	r3, r7
 8008c2a:	f000 f82d 	bl	8008c88 <_write_r>
 8008c2e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008c30:	ffffefff 	.word	0xffffefff

08008c34 <__sseek>:
 8008c34:	b570      	push	{r4, r5, r6, lr}
 8008c36:	000c      	movs	r4, r1
 8008c38:	250e      	movs	r5, #14
 8008c3a:	5f49      	ldrsh	r1, [r1, r5]
 8008c3c:	f000 f86e 	bl	8008d1c <_lseek_r>
 8008c40:	89a3      	ldrh	r3, [r4, #12]
 8008c42:	1c42      	adds	r2, r0, #1
 8008c44:	d103      	bne.n	8008c4e <__sseek+0x1a>
 8008c46:	4a05      	ldr	r2, [pc, #20]	; (8008c5c <__sseek+0x28>)
 8008c48:	4013      	ands	r3, r2
 8008c4a:	81a3      	strh	r3, [r4, #12]
 8008c4c:	bd70      	pop	{r4, r5, r6, pc}
 8008c4e:	2280      	movs	r2, #128	; 0x80
 8008c50:	0152      	lsls	r2, r2, #5
 8008c52:	4313      	orrs	r3, r2
 8008c54:	81a3      	strh	r3, [r4, #12]
 8008c56:	6560      	str	r0, [r4, #84]	; 0x54
 8008c58:	e7f8      	b.n	8008c4c <__sseek+0x18>
 8008c5a:	46c0      	nop			; (mov r8, r8)
 8008c5c:	ffffefff 	.word	0xffffefff

08008c60 <__sclose>:
 8008c60:	b510      	push	{r4, lr}
 8008c62:	230e      	movs	r3, #14
 8008c64:	5ec9      	ldrsh	r1, [r1, r3]
 8008c66:	f000 f823 	bl	8008cb0 <_close_r>
 8008c6a:	bd10      	pop	{r4, pc}

08008c6c <__ascii_wctomb>:
 8008c6c:	0003      	movs	r3, r0
 8008c6e:	1e08      	subs	r0, r1, #0
 8008c70:	d005      	beq.n	8008c7e <__ascii_wctomb+0x12>
 8008c72:	2aff      	cmp	r2, #255	; 0xff
 8008c74:	d904      	bls.n	8008c80 <__ascii_wctomb+0x14>
 8008c76:	228a      	movs	r2, #138	; 0x8a
 8008c78:	2001      	movs	r0, #1
 8008c7a:	601a      	str	r2, [r3, #0]
 8008c7c:	4240      	negs	r0, r0
 8008c7e:	4770      	bx	lr
 8008c80:	2001      	movs	r0, #1
 8008c82:	700a      	strb	r2, [r1, #0]
 8008c84:	e7fb      	b.n	8008c7e <__ascii_wctomb+0x12>
	...

08008c88 <_write_r>:
 8008c88:	b570      	push	{r4, r5, r6, lr}
 8008c8a:	0004      	movs	r4, r0
 8008c8c:	0008      	movs	r0, r1
 8008c8e:	0011      	movs	r1, r2
 8008c90:	001a      	movs	r2, r3
 8008c92:	2300      	movs	r3, #0
 8008c94:	4d05      	ldr	r5, [pc, #20]	; (8008cac <_write_r+0x24>)
 8008c96:	602b      	str	r3, [r5, #0]
 8008c98:	f7fa febe 	bl	8003a18 <_write>
 8008c9c:	1c43      	adds	r3, r0, #1
 8008c9e:	d103      	bne.n	8008ca8 <_write_r+0x20>
 8008ca0:	682b      	ldr	r3, [r5, #0]
 8008ca2:	2b00      	cmp	r3, #0
 8008ca4:	d000      	beq.n	8008ca8 <_write_r+0x20>
 8008ca6:	6023      	str	r3, [r4, #0]
 8008ca8:	bd70      	pop	{r4, r5, r6, pc}
 8008caa:	46c0      	nop			; (mov r8, r8)
 8008cac:	20002320 	.word	0x20002320

08008cb0 <_close_r>:
 8008cb0:	2300      	movs	r3, #0
 8008cb2:	b570      	push	{r4, r5, r6, lr}
 8008cb4:	4d06      	ldr	r5, [pc, #24]	; (8008cd0 <_close_r+0x20>)
 8008cb6:	0004      	movs	r4, r0
 8008cb8:	0008      	movs	r0, r1
 8008cba:	602b      	str	r3, [r5, #0]
 8008cbc:	f7fa fec8 	bl	8003a50 <_close>
 8008cc0:	1c43      	adds	r3, r0, #1
 8008cc2:	d103      	bne.n	8008ccc <_close_r+0x1c>
 8008cc4:	682b      	ldr	r3, [r5, #0]
 8008cc6:	2b00      	cmp	r3, #0
 8008cc8:	d000      	beq.n	8008ccc <_close_r+0x1c>
 8008cca:	6023      	str	r3, [r4, #0]
 8008ccc:	bd70      	pop	{r4, r5, r6, pc}
 8008cce:	46c0      	nop			; (mov r8, r8)
 8008cd0:	20002320 	.word	0x20002320

08008cd4 <_fstat_r>:
 8008cd4:	2300      	movs	r3, #0
 8008cd6:	b570      	push	{r4, r5, r6, lr}
 8008cd8:	4d06      	ldr	r5, [pc, #24]	; (8008cf4 <_fstat_r+0x20>)
 8008cda:	0004      	movs	r4, r0
 8008cdc:	0008      	movs	r0, r1
 8008cde:	0011      	movs	r1, r2
 8008ce0:	602b      	str	r3, [r5, #0]
 8008ce2:	f7fa febf 	bl	8003a64 <_fstat>
 8008ce6:	1c43      	adds	r3, r0, #1
 8008ce8:	d103      	bne.n	8008cf2 <_fstat_r+0x1e>
 8008cea:	682b      	ldr	r3, [r5, #0]
 8008cec:	2b00      	cmp	r3, #0
 8008cee:	d000      	beq.n	8008cf2 <_fstat_r+0x1e>
 8008cf0:	6023      	str	r3, [r4, #0]
 8008cf2:	bd70      	pop	{r4, r5, r6, pc}
 8008cf4:	20002320 	.word	0x20002320

08008cf8 <_isatty_r>:
 8008cf8:	2300      	movs	r3, #0
 8008cfa:	b570      	push	{r4, r5, r6, lr}
 8008cfc:	4d06      	ldr	r5, [pc, #24]	; (8008d18 <_isatty_r+0x20>)
 8008cfe:	0004      	movs	r4, r0
 8008d00:	0008      	movs	r0, r1
 8008d02:	602b      	str	r3, [r5, #0]
 8008d04:	f7fa febc 	bl	8003a80 <_isatty>
 8008d08:	1c43      	adds	r3, r0, #1
 8008d0a:	d103      	bne.n	8008d14 <_isatty_r+0x1c>
 8008d0c:	682b      	ldr	r3, [r5, #0]
 8008d0e:	2b00      	cmp	r3, #0
 8008d10:	d000      	beq.n	8008d14 <_isatty_r+0x1c>
 8008d12:	6023      	str	r3, [r4, #0]
 8008d14:	bd70      	pop	{r4, r5, r6, pc}
 8008d16:	46c0      	nop			; (mov r8, r8)
 8008d18:	20002320 	.word	0x20002320

08008d1c <_lseek_r>:
 8008d1c:	b570      	push	{r4, r5, r6, lr}
 8008d1e:	0004      	movs	r4, r0
 8008d20:	0008      	movs	r0, r1
 8008d22:	0011      	movs	r1, r2
 8008d24:	001a      	movs	r2, r3
 8008d26:	2300      	movs	r3, #0
 8008d28:	4d05      	ldr	r5, [pc, #20]	; (8008d40 <_lseek_r+0x24>)
 8008d2a:	602b      	str	r3, [r5, #0]
 8008d2c:	f7fa feb1 	bl	8003a92 <_lseek>
 8008d30:	1c43      	adds	r3, r0, #1
 8008d32:	d103      	bne.n	8008d3c <_lseek_r+0x20>
 8008d34:	682b      	ldr	r3, [r5, #0]
 8008d36:	2b00      	cmp	r3, #0
 8008d38:	d000      	beq.n	8008d3c <_lseek_r+0x20>
 8008d3a:	6023      	str	r3, [r4, #0]
 8008d3c:	bd70      	pop	{r4, r5, r6, pc}
 8008d3e:	46c0      	nop			; (mov r8, r8)
 8008d40:	20002320 	.word	0x20002320

08008d44 <_malloc_usable_size_r>:
 8008d44:	1f0b      	subs	r3, r1, #4
 8008d46:	681b      	ldr	r3, [r3, #0]
 8008d48:	1f18      	subs	r0, r3, #4
 8008d4a:	2b00      	cmp	r3, #0
 8008d4c:	da01      	bge.n	8008d52 <_malloc_usable_size_r+0xe>
 8008d4e:	580b      	ldr	r3, [r1, r0]
 8008d50:	18c0      	adds	r0, r0, r3
 8008d52:	4770      	bx	lr

08008d54 <_read_r>:
 8008d54:	b570      	push	{r4, r5, r6, lr}
 8008d56:	0004      	movs	r4, r0
 8008d58:	0008      	movs	r0, r1
 8008d5a:	0011      	movs	r1, r2
 8008d5c:	001a      	movs	r2, r3
 8008d5e:	2300      	movs	r3, #0
 8008d60:	4d05      	ldr	r5, [pc, #20]	; (8008d78 <_read_r+0x24>)
 8008d62:	602b      	str	r3, [r5, #0]
 8008d64:	f7fa fe3b 	bl	80039de <_read>
 8008d68:	1c43      	adds	r3, r0, #1
 8008d6a:	d103      	bne.n	8008d74 <_read_r+0x20>
 8008d6c:	682b      	ldr	r3, [r5, #0]
 8008d6e:	2b00      	cmp	r3, #0
 8008d70:	d000      	beq.n	8008d74 <_read_r+0x20>
 8008d72:	6023      	str	r3, [r4, #0]
 8008d74:	bd70      	pop	{r4, r5, r6, pc}
 8008d76:	46c0      	nop			; (mov r8, r8)
 8008d78:	20002320 	.word	0x20002320

08008d7c <_init>:
 8008d7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008d7e:	46c0      	nop			; (mov r8, r8)
 8008d80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008d82:	bc08      	pop	{r3}
 8008d84:	469e      	mov	lr, r3
 8008d86:	4770      	bx	lr

08008d88 <_fini>:
 8008d88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008d8a:	46c0      	nop			; (mov r8, r8)
 8008d8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008d8e:	bc08      	pop	{r3}
 8008d90:	469e      	mov	lr, r3
 8008d92:	4770      	bx	lr
